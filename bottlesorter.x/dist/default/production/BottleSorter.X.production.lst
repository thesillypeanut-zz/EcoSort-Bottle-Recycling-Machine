

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue Apr 11 15:54:10 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    65                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    66                           	psect	text53,global,reloc=2,class=CODE,delta=1
    67                           	psect	text54,global,reloc=2,class=CODE,delta=1
    68                           	psect	text55,global,reloc=2,class=CODE,delta=1
    69                           	psect	text56,global,reloc=2,class=CODE,delta=1
    70                           	psect	text57,global,reloc=2,class=CODE,delta=1
    71                           	psect	text58,global,reloc=2,class=CODE,delta=1
    72                           	psect	text59,global,reloc=2,class=CODE,delta=1
    73                           	psect	text60,global,reloc=2,class=CODE,delta=1
    74                           	psect	text61,global,reloc=2,class=CODE,delta=1
    75                           	psect	text62,global,reloc=2,class=CODE,delta=1
    76                           	psect	text63,global,reloc=2,class=CODE,delta=1
    77                           	psect	text64,global,reloc=2,class=CODE,delta=1
    78                           	psect	text65,global,reloc=2,class=CODE,delta=1
    79                           	psect	text66,global,reloc=2,class=CODE,delta=1
    80                           	psect	text67,global,reloc=2,class=CODE,delta=1
    81                           	psect	text68,global,reloc=2,class=CODE,delta=1
    82                           	psect	text69,global,reloc=2,class=CODE,delta=1
    83                           	psect	text70,global,reloc=2,class=CODE,delta=1
    84                           	psect	text71,global,reloc=2,class=CODE,delta=1
    85                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    86                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    87                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    88  0000                     
    89                           ; Version 1.41
    90                           ; Generated 25/01/2017 GMT
    91                           ; 
    92                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    93                           ; All rights reserved.
    94                           ; 
    95                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    96                           ; 
    97                           ; Redistribution and use in source and binary forms, with or without modification, are
    98                           ; permitted provided that the following conditions are met:
    99                           ; 
   100                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   101                           ;        conditions and the following disclaimer.
   102                           ; 
   103                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   104                           ;        of conditions and the following disclaimer in the documentation and/or other
   105                           ;        materials provided with the distribution.
   106                           ; 
   107                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   108                           ;        software without specific prior written permission.
   109                           ; 
   110                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   111                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   112                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   113                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   114                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   115                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   116                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   117                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   118                           ; 
   119                           ; 
   120                           ; Code-generator required, PIC18F4620 Definitions
   121                           ; 
   122                           ; SFR Addresses
   123  0000                     
   124                           	psect	mediumconst
   125  00FD42                     __pmediumconst:
   126                           	opt stack 0
   127  00FD42  00                 	db	0
   128  00FD43                     _keys:
   129                           	opt stack 0
   130  00FD43  31                 	db	49
   131  00FD44  32                 	db	50
   132  00FD45  33                 	db	51
   133  00FD46  41                 	db	65
   134  00FD47  34                 	db	52
   135  00FD48  35                 	db	53
   136  00FD49  36                 	db	54
   137  00FD4A  42                 	db	66
   138  00FD4B  37                 	db	55
   139  00FD4C  38                 	db	56
   140  00FD4D  39                 	db	57
   141  00FD4E  43                 	db	67
   142  00FD4F  2A                 	db	42
   143  00FD50  30                 	db	48
   144  00FD51  23                 	db	35
   145  00FD52  44                 	db	68
   146  00FD53  00                 	db	0
   147  00FD54                     __end_of_keys:
   148                           	opt stack 0
   149  00FD54                     _dpowers:
   150                           	opt stack 0
   151  00FD54  0001               	dw	1
   152  00FD56  000A               	dw	10
   153  00FD58  0064               	dw	100
   154  00FD5A  03E8               	dw	1000
   155  00FD5C  2710               	dw	10000
   156  00FD5E                     __end_of_dpowers:
   157                           	opt stack 0
   158  00FD5E                     _hexpowers:
   159                           	opt stack 0
   160  00FD5E  0001               	dw	1
   161  00FD60  0010               	dw	16
   162  00FD62  0100               	dw	256
   163  00FD64  1000               	dw	4096
   164  00FD66                     __end_of_hexpowers:
   165                           	opt stack 0
   166  00FD66                     _curr_time:
   167                           	opt stack 0
   168  00FD66  00                 	db	0
   169  00FD67  47                 	db	71
   170  00FD68  00                 	db	0
   171  00FD69  02                 	db	2
   172  00FD6A  11                 	db	17
   173  00FD6B  04                 	db	4
   174  00FD6C  17                 	db	23
   175  00FD6D                     __end_of_curr_time:
   176                           	opt stack 0
   177  00FD6D                     exp@coeff:
   178                           	opt stack 0
   179  00FD6D  00                 	db	0
   180  00FD6E  80                 	db	128
   181  00FD6F  3F                 	db	63
   182  00FD70  72                 	db	114
   183  00FD71  31                 	db	49
   184  00FD72  3F                 	db	63
   185  00FD73  FE                 	db	254
   186  00FD74  75                 	db	117
   187  00FD75  3E                 	db	62
   188  00FD76  58                 	db	88
   189  00FD77  63                 	db	99
   190  00FD78  3D                 	db	61
   191  00FD79  95                 	db	149
   192  00FD7A  1D                 	db	29
   193  00FD7B  3C                 	db	60
   194  00FD7C  C5                 	db	197
   195  00FD7D  AE                 	db	174
   196  00FD7E  3A                 	db	58
   197  00FD7F  79                 	db	121
   198  00FD80  21                 	db	33
   199  00FD81  39                 	db	57
   200  00FD82  94                 	db	148
   201  00FD83  80                 	db	128
   202  00FD84  37                 	db	55
   203  00FD85  93                 	db	147
   204  00FD86  A7                 	db	167
   205  00FD87  35                 	db	53
   206  00FD88  56                 	db	86
   207  00FD89  15                 	db	21
   208  00FD8A  34                 	db	52
   209  00FD8B                     __end_ofexp@coeff:
   210                           	opt stack 0
   211  00FD8B                     log@coeff:
   212                           	opt stack 0
   213  00FD8B  00                 	db	0
   214  00FD8C  00                 	db	0
   215  00FD8D  00                 	db	0
   216  00FD8E  00                 	db	0
   217  00FD8F  80                 	db	128
   218  00FD90  3F                 	db	63
   219  00FD91  F0                 	db	240
   220  00FD92  FF                 	db	255
   221  00FD93  BE                 	db	190
   222  00FD94  E2                 	db	226
   223  00FD95  A9                 	db	169
   224  00FD96  3E                 	db	62
   225  00FD97  83                 	db	131
   226  00FD98  76                 	db	118
   227  00FD99  BE                 	db	190
   228  00FD9A  AE                 	db	174
   229  00FD9B  2B                 	db	43
   230  00FD9C  3E                 	db	62
   231  00FD9D  3C                 	db	60
   232  00FD9E  C3                 	db	195
   233  00FD9F  BD                 	db	189
   234  00FDA0  D2                 	db	210
   235  00FDA1  13                 	db	19
   236  00FDA2  3D                 	db	61
   237  00FDA3  78                 	db	120
   238  00FDA4  D3                 	db	211
   239  00FDA5  BB                 	db	187
   240  00FDA6                     __end_oflog@coeff:
   241                           	opt stack 0
   242  0000                     _PIR2bits	set	4001
   243  0000                     _EECON2	set	4007
   244  0000                     _EEDATA	set	4008
   245  0000                     _EECON1bits	set	4006
   246  0000                     _EEADR	set	4009
   247  0000                     _EEADRH	set	4010
   248  0000                     _PORTAbits	set	3968
   249  0000                     _ADCON0bits	set	4034
   250  0000                     _PORTBbits	set	3969
   251  0000                     _PORTEbits	set	3972
   252  0000                     _ADRESL	set	4035
   253  0000                     _ADRESH	set	4036
   254  0000                     _PORTB	set	3969
   255  0000                     _INTCONbits	set	4082
   256  0000                     _CMCONbits	set	4020
   257  0000                     _CVRCON	set	4021
   258  0000                     _ADCON1	set	4033
   259  0000                     _ADCON0	set	4034
   260  0000                     _LATE	set	3981
   261  0000                     _LATC	set	3979
   262  0000                     _LATB	set	3978
   263  0000                     _LATA	set	3977
   264  0000                     _TRISE	set	3990
   265  0000                     _TRISD	set	3989
   266  0000                     _TRISC	set	3988
   267  0000                     _TRISB	set	3987
   268  0000                     _TRISA	set	3986
   269  0000                     _SSPBUF	set	4041
   270  0000                     _SSPADD	set	4040
   271  0000                     _SSPCON2	set	4037
   272  0000                     _SSPCON1	set	4038
   273  0000                     _SSPSTAT	set	4039
   274  0000                     _LATD	set	3980
   275  0000                     _LATDbits	set	3980
   276  0000                     _RC5	set	31765
   277  0000                     _INT1IF	set	32640
   278  0000                     _ADON	set	32272
   279  0000                     _RA0	set	31744
   280  0000                     _RA4	set	31748
   281  0000                     _RC6	set	31766
   282  0000                     _RC0	set	31760
   283  0000                     _RC7	set	31767
   284  0000                     _INT1IE	set	32643
   285  0000                     _nRBPU	set	32655
   286  0000                     _RB2	set	31754
   287  0000                     _RB0	set	31752
   288  0000                     _ADFM	set	32263
   289  0000                     _ACKEN	set	32300
   290  0000                     _ACKDT	set	32301
   291  0000                     _RCEN	set	32299
   292  0000                     _PEN	set	32298
   293  0000                     _RSEN	set	32297
   294  0000                     _SEN	set	32296
   295  0000                     _TRISC4	set	31908
   296  0000                     _TRISC3	set	31907
   297  00FDA6                     STR_40:
   298  00FDA6  25                 	db	37
   299  00FDA7  30                 	db	48	;'0'
   300  00FDA8  32                 	db	50	;'2'
   301  00FDA9  78                 	db	120	;'x'
   302  00FDAA  3A                 	db	58	;':'
   303  00FDAB  25                 	db	37
   304  00FDAC  30                 	db	48	;'0'
   305  00FDAD  32                 	db	50	;'2'
   306  00FDAE  78                 	db	120	;'x'
   307  00FDAF  3A                 	db	58	;':'
   308  00FDB0  25                 	db	37
   309  00FDB1  30                 	db	48	;'0'
   310  00FDB2  32                 	db	50	;'2'
   311  00FDB3  78                 	db	120	;'x'
   312  00FDB4  20                 	db	32
   313  00FDB5  50                 	db	80	;'P'
   314  00FDB6  72                 	db	114	;'r'
   315  00FDB7  65                 	db	101	;'e'
   316  00FDB8  73                 	db	115	;'s'
   317  00FDB9  73                 	db	115	;'s'
   318  00FDBA  20                 	db	32
   319  00FDBB  30                 	db	48	;'0'
   320  00FDBC  00                 	db	0
   321  00FDBD                     STR_39:
   322  00FDBD  25                 	db	37
   323  00FDBE  30                 	db	48	;'0'
   324  00FDBF  32                 	db	50	;'2'
   325  00FDC0  78                 	db	120	;'x'
   326  00FDC1  2F                 	db	47
   327  00FDC2  25                 	db	37
   328  00FDC3  30                 	db	48	;'0'
   329  00FDC4  32                 	db	50	;'2'
   330  00FDC5  78                 	db	120	;'x'
   331  00FDC6  2F                 	db	47
   332  00FDC7  25                 	db	37
   333  00FDC8  30                 	db	48	;'0'
   334  00FDC9  32                 	db	50	;'2'
   335  00FDCA  78                 	db	120	;'x'
   336  00FDCB  20                 	db	32
   337  00FDCC  4D                 	db	77	;'M'
   338  00FDCD  45                 	db	69	;'E'
   339  00FDCE  4E                 	db	78	;'N'
   340  00FDCF  55                 	db	85	;'U'
   341  00FDD0  3A                 	db	58	;':'
   342  00FDD1  00                 	db	0
   343  00FDD2                     STR_20:
   344  00FDD2  33                 	db	51	;'3'
   345  00FDD3  3A                 	db	58	;':'
   346  00FDD4  20                 	db	32
   347  00FDD5  43                 	db	67	;'C'
   348  00FDD6  72                 	db	114	;'r'
   349  00FDD7  65                 	db	101	;'e'
   350  00FDD8  64                 	db	100	;'d'
   351  00FDD9  69                 	db	105	;'i'
   352  00FDDA  74                 	db	116	;'t'
   353  00FDDB  73                 	db	115	;'s'
   354  00FDDC  20                 	db	32
   355  00FDDD  20                 	db	32
   356  00FDDE  20                 	db	32
   357  00FDDF  20                 	db	32
   358  00FDE0  20                 	db	32
   359  00FDE1  20                 	db	32
   360  00FDE2  20                 	db	32
   361  00FDE3  20                 	db	32
   362  00FDE4  20                 	db	32
   363  00FDE5  00                 	db	0
   364  00FDE6                     STR_5:
   365  00FDE6  53                 	db	83	;'S'
   366  00FDE7  6F                 	db	111	;'o'
   367  00FDE8  72                 	db	114	;'r'
   368  00FDE9  74                 	db	116	;'t'
   369  00FDEA  69                 	db	105	;'i'
   370  00FDEB  6E                 	db	110	;'n'
   371  00FDEC  67                 	db	103	;'g'
   372  00FDED  2E                 	db	46
   373  00FDEE  2E                 	db	46
   374  00FDEF  2E                 	db	46
   375  00FDF0  20                 	db	32
   376  00FDF1  20                 	db	32
   377  00FDF2  20                 	db	32
   378  00FDF3  20                 	db	32
   379  00FDF4  20                 	db	32
   380  00FDF5  20                 	db	32
   381  00FDF6  20                 	db	32
   382  00FDF7  20                 	db	32
   383  00FDF8  00                 	db	0
   384  00FDF9                     STR_6:
   385  00FDF9  50                 	db	80	;'P'
   386  00FDFA  72                 	db	114	;'r'
   387  00FDFB  65                 	db	101	;'e'
   388  00FDFC  73                 	db	115	;'s'
   389  00FDFD  73                 	db	115	;'s'
   390  00FDFE  20                 	db	32
   391  00FDFF  23                 	db	35
   392  00FE00  20                 	db	32
   393  00FE01  74                 	db	116	;'t'
   394  00FE02  6F                 	db	111	;'o'
   395  00FE03  20                 	db	32
   396  00FE04  53                 	db	83	;'S'
   397  00FE05  54                 	db	84	;'T'
   398  00FE06  4F                 	db	79	;'O'
   399  00FE07  50                 	db	80	;'P'
   400  00FE08  20                 	db	32
   401  00FE09  20                 	db	32
   402  00FE0A  20                 	db	32
   403  00FE0B  00                 	db	0
   404  00FE0C                     STR_10:
   405  00FE0C  45                 	db	69	;'E'
   406  00FE0D  53                 	db	83	;'S'
   407  00FE0E  4B                 	db	75	;'K'
   408  00FE0F  20                 	db	32
   409  00FE10  41                 	db	65	;'A'
   410  00FE11  3A                 	db	58	;':'
   411  00FE12  20                 	db	32
   412  00FE13  25                 	db	37
   413  00FE14  69                 	db	105	;'i'
   414  00FE15  20                 	db	32
   415  00FE16  42                 	db	66	;'B'
   416  00FE17  3A                 	db	58	;':'
   417  00FE18  20                 	db	32
   418  00FE19  25                 	db	37
   419  00FE1A  69                 	db	105	;'i'
   420  00FE1B  20                 	db	32
   421  00FE1C  20                 	db	32
   422  00FE1D  20                 	db	32
   423  00FE1E  00                 	db	0
   424  00FE1F                     STR_36:
   425  00FE1F  45                 	db	69	;'E'
   426  00FE20  53                 	db	83	;'S'
   427  00FE21  4B                 	db	75	;'K'
   428  00FE22  20                 	db	32
   429  00FE23  41                 	db	65	;'A'
   430  00FE24  3A                 	db	58	;':'
   431  00FE25  20                 	db	32
   432  00FE26  25                 	db	37
   433  00FE27  69                 	db	105	;'i'
   434  00FE28  20                 	db	32
   435  00FE29  42                 	db	66	;'B'
   436  00FE2A  3A                 	db	58	;':'
   437  00FE2B  20                 	db	32
   438  00FE2C  25                 	db	37
   439  00FE2D  69                 	db	105	;'i'
   440  00FE2E  7C                 	db	124
   441  00FE2F  44                 	db	68	;'D'
   442  00FE30  3E                 	db	62	;'>'
   443  00FE31  00                 	db	0
   444  00FE32                     STR_9:
   445  00FE32  59                 	db	89	;'Y'
   446  00FE33  4F                 	db	79	;'O'
   447  00FE34  50                 	db	80	;'P'
   448  00FE35  20                 	db	32
   449  00FE36  41                 	db	65	;'A'
   450  00FE37  3A                 	db	58	;':'
   451  00FE38  20                 	db	32
   452  00FE39  25                 	db	37
   453  00FE3A  69                 	db	105	;'i'
   454  00FE3B  20                 	db	32
   455  00FE3C  42                 	db	66	;'B'
   456  00FE3D  3A                 	db	58	;':'
   457  00FE3E  20                 	db	32
   458  00FE3F  25                 	db	37
   459  00FE40  69                 	db	105	;'i'
   460  00FE41  7C                 	db	124
   461  00FE42  3C                 	db	60	;'<'
   462  00FE43  43                 	db	67	;'C'
   463  00FE44  00                 	db	0
   464  00FE45                     STR_14:
   465  00FE45  37                 	db	55	;'7'
   466  00FE46  3A                 	db	58	;':'
   467  00FE47  20                 	db	32
   468  00FE48  52                 	db	82	;'R'
   469  00FE49  75                 	db	117	;'u'
   470  00FE4A  6E                 	db	110	;'n'
   471  00FE4B  20                 	db	32
   472  00FE4C  34                 	db	52	;'4'
   473  00FE4D  20                 	db	32
   474  00FE4E  20                 	db	32
   475  00FE4F  20                 	db	32
   476  00FE50  20                 	db	32
   477  00FE51  20                 	db	32
   478  00FE52  20                 	db	32
   479  00FE53  20                 	db	32
   480  00FE54  20                 	db	32
   481  00FE55  20                 	db	32
   482  00FE56  00                 	db	0
   483  00FE57                     STR_44:
   484  00FE57  30                 	db	48	;'0'
   485  00FE58  31                 	db	49	;'1'
   486  00FE59  32                 	db	50	;'2'
   487  00FE5A  33                 	db	51	;'3'
   488  00FE5B  34                 	db	52	;'4'
   489  00FE5C  35                 	db	53	;'5'
   490  00FE5D  36                 	db	54	;'6'
   491  00FE5E  37                 	db	55	;'7'
   492  00FE5F  38                 	db	56	;'8'
   493  00FE60  39                 	db	57	;'9'
   494  00FE61  61                 	db	97	;'a'
   495  00FE62  62                 	db	98	;'b'
   496  00FE63  63                 	db	99	;'c'
   497  00FE64  64                 	db	100	;'d'
   498  00FE65  65                 	db	101	;'e'
   499  00FE66  66                 	db	102	;'f'
   500  00FE67  00                 	db	0
   501  00FE68                     STR_30:
   502  00FE68  4D                 	db	77	;'M'
   503  00FE69  2E                 	db	46
   504  00FE6A  20                 	db	32
   505  00FE6B  49                 	db	73	;'I'
   506  00FE6C  73                 	db	115	;'s'
   507  00FE6D  6C                 	db	108	;'l'
   508  00FE6E  61                 	db	97	;'a'
   509  00FE6F  6D                 	db	109	;'m'
   510  00FE70  20                 	db	32
   511  00FE71  20                 	db	32
   512  00FE72  20                 	db	32
   513  00FE73  20                 	db	32
   514  00FE74  20                 	db	32
   515  00FE75  20                 	db	32
   516  00FE76  20                 	db	32
   517  00FE77  20                 	db	32
   518  00FE78  00                 	db	0
   519  00FE79                     STR_38:
   520  00FE79  54                 	db	84	;'T'
   521  00FE7A  69                 	db	105	;'i'
   522  00FE7B  6D                 	db	109	;'m'
   523  00FE7C  65                 	db	101	;'e'
   524  00FE7D  3A                 	db	58	;':'
   525  00FE7E  20                 	db	32
   526  00FE7F  25                 	db	37
   527  00FE80  69                 	db	105	;'i'
   528  00FE81  73                 	db	115	;'s'
   529  00FE82  20                 	db	32
   530  00FE83  20                 	db	32
   531  00FE84  20                 	db	32
   532  00FE85  20                 	db	32
   533  00FE86  20                 	db	32
   534  00FE87  20                 	db	32
   535  00FE88  20                 	db	32
   536  00FE89  00                 	db	0
   537  00FE8A                     STR_4:
   538  00FE8A  20                 	db	32
   539  00FE8B  20                 	db	32
   540  00FE8C  20                 	db	32
   541  00FE8D  68                 	db	104	;'h'
   542  00FE8E  61                 	db	97	;'a'
   543  00FE8F  73                 	db	115	;'s'
   544  00FE90  20                 	db	32
   545  00FE91  62                 	db	98	;'b'
   546  00FE92  65                 	db	101	;'e'
   547  00FE93  67                 	db	103	;'g'
   548  00FE94  75                 	db	117	;'u'
   549  00FE95  6E                 	db	110	;'n'
   550  00FE96  21                 	db	33
   551  00FE97  20                 	db	32
   552  00FE98  20                 	db	32
   553  00FE99  20                 	db	32
   554  00FE9A  00                 	db	0
   555  00FE9B                     STR_32:
   556  00FE9B  20                 	db	32
   557  00FE9C  20                 	db	32
   558  00FE9D  20                 	db	32
   559  00FE9E  74                 	db	116	;'t'
   560  00FE9F  65                 	db	101	;'e'
   561  00FEA0  72                 	db	114	;'r'
   562  00FEA1  6D                 	db	109	;'m'
   563  00FEA2  69                 	db	105	;'i'
   564  00FEA3  6E                 	db	110	;'n'
   565  00FEA4  61                 	db	97	;'a'
   566  00FEA5  74                 	db	116	;'t'
   567  00FEA6  65                 	db	101	;'e'
   568  00FEA7  64                 	db	100	;'d'
   569  00FEA8  20                 	db	32
   570  00FEA9  20                 	db	32
   571  00FEAA  20                 	db	32
   572  00FEAB  00                 	db	0
   573  00FEAC                     STR_33:
   574  00FEAC  20                 	db	32
   575  00FEAD  20                 	db	32
   576  00FEAE  43                 	db	67	;'C'
   577  00FEAF  6F                 	db	111	;'o'
   578  00FEB0  6C                 	db	108	;'l'
   579  00FEB1  6C                 	db	108	;'l'
   580  00FEB2  65                 	db	101	;'e'
   581  00FEB3  63                 	db	99	;'c'
   582  00FEB4  74                 	db	116	;'t'
   583  00FEB5  20                 	db	32
   584  00FEB6  4C                 	db	76	;'L'
   585  00FEB7  6F                 	db	111	;'o'
   586  00FEB8  67                 	db	103	;'g'
   587  00FEB9  3F                 	db	63	;'?'
   588  00FEBA  20                 	db	32
   589  00FEBB  20                 	db	32
   590  00FEBC  00                 	db	0
   591  00FEBD                     STR_31:
   592  00FEBD  20                 	db	32
   593  00FEBE  4F                 	db	79	;'O'
   594  00FEBF  70                 	db	112	;'p'
   595  00FEC0  65                 	db	101	;'e'
   596  00FEC1  72                 	db	114	;'r'
   597  00FEC2  61                 	db	97	;'a'
   598  00FEC3  74                 	db	116	;'t'
   599  00FEC4  69                 	db	105	;'i'
   600  00FEC5  6F                 	db	111	;'o'
   601  00FEC6  6E                 	db	110	;'n'
   602  00FEC7  20                 	db	32
   603  00FEC8  68                 	db	104	;'h'
   604  00FEC9  61                 	db	97	;'a'
   605  00FECA  73                 	db	115	;'s'
   606  00FECB  20                 	db	32
   607  00FECC  20                 	db	32
   608  00FECD  00                 	db	0
   609  00FECE                     STR_23:
   610  00FECE  43                 	db	67	;'C'
   611  00FECF  6F                 	db	111	;'o'
   612  00FED0  70                 	db	112	;'p'
   613  00FED1  79                 	db	121	;'y'
   614  00FED2  72                 	db	114	;'r'
   615  00FED3  69                 	db	105	;'i'
   616  00FED4  67                 	db	103	;'g'
   617  00FED5  68                 	db	104	;'h'
   618  00FED6  74                 	db	116	;'t'
   619  00FED7  28                 	db	40
   620  00FED8  43                 	db	67	;'C'
   621  00FED9  29                 	db	41
   622  00FEDA  32                 	db	50	;'2'
   623  00FEDB  30                 	db	48	;'0'
   624  00FEDC  31                 	db	49	;'1'
   625  00FEDD  37                 	db	55	;'7'
   626  00FEDE  00                 	db	0
   627  00FEDF                     STR_34:
   628  00FEDF  3C                 	db	60	;'<'
   629  00FEE0  20                 	db	32
   630  00FEE1  42                 	db	66	;'B'
   631  00FEE2  20                 	db	32
   632  00FEE3  48                 	db	72	;'H'
   633  00FEE4  6F                 	db	111	;'o'
   634  00FEE5  6D                 	db	109	;'m'
   635  00FEE6  65                 	db	101	;'e'
   636  00FEE7  7C                 	db	124
   637  00FEE8  59                 	db	89	;'Y'
   638  00FEE9  65                 	db	101	;'e'
   639  00FEEA  73                 	db	115	;'s'
   640  00FEEB  20                 	db	32
   641  00FEEC  41                 	db	65	;'A'
   642  00FEED  20                 	db	32
   643  00FEEE  3E                 	db	62	;'>'
   644  00FEEF  00                 	db	0
   645  00FEF0                     STR_28:
   646  00FEF0  4A                 	db	74	;'J'
   647  00FEF1  2E                 	db	46
   648  00FEF2  20                 	db	32
   649  00FEF3  51                 	db	81	;'Q'
   650  00FEF4  69                 	db	105	;'i'
   651  00FEF5  75                 	db	117	;'u'
   652  00FEF6  20                 	db	32
   653  00FEF7  20                 	db	32
   654  00FEF8  20                 	db	32
   655  00FEF9  20                 	db	32
   656  00FEFA  20                 	db	32
   657  00FEFB  20                 	db	32
   658  00FEFC  20                 	db	32
   659  00FEFD  7C                 	db	124
   660  00FEFE  44                 	db	68	;'D'
   661  00FEFF  3E                 	db	62	;'>'
   662  00FF00  00                 	db	0
   663  00FF01                     STR_26:
   664  00FF01  52                 	db	82	;'R'
   665  00FF02  2E                 	db	46
   666  00FF03  20                 	db	32
   667  00FF04  4A                 	db	74	;'J'
   668  00FF05  6F                 	db	111	;'o'
   669  00FF06  73                 	db	115	;'s'
   670  00FF07  65                 	db	101	;'e'
   671  00FF08  20                 	db	32
   672  00FF09  20                 	db	32
   673  00FF0A  20                 	db	32
   674  00FF0B  20                 	db	32
   675  00FF0C  20                 	db	32
   676  00FF0D  20                 	db	32
   677  00FF0E  7C                 	db	124
   678  00FF0F  44                 	db	68	;'D'
   679  00FF10  3E                 	db	62	;'>'
   680  00FF11  00                 	db	0
   681  00FF12                     STR_8:
   682  00FF12  35                 	db	53	;'5'
   683  00FF13  3A                 	db	58	;':'
   684  00FF14  20                 	db	32
   685  00FF15  52                 	db	82	;'R'
   686  00FF16  75                 	db	117	;'u'
   687  00FF17  6E                 	db	110	;'n'
   688  00FF18  20                 	db	32
   689  00FF19  32                 	db	50	;'2'
   690  00FF1A  20                 	db	32
   691  00FF1B  20                 	db	32
   692  00FF1C  20                 	db	32
   693  00FF1D  20                 	db	32
   694  00FF1E  20                 	db	32
   695  00FF1F  7C                 	db	124
   696  00FF20  44                 	db	68	;'D'
   697  00FF21  3E                 	db	62	;'>'
   698  00FF22  00                 	db	0
   699  00FF23                     STR_2:
   700  00FF23  31                 	db	49	;'1'
   701  00FF24  3A                 	db	58	;':'
   702  00FF25  20                 	db	32
   703  00FF26  50                 	db	80	;'P'
   704  00FF27  61                 	db	97	;'a'
   705  00FF28  73                 	db	115	;'s'
   706  00FF29  74                 	db	116	;'t'
   707  00FF2A  20                 	db	32
   708  00FF2B  4C                 	db	76	;'L'
   709  00FF2C  6F                 	db	111	;'o'
   710  00FF2D  67                 	db	103	;'g'
   711  00FF2E  73                 	db	115	;'s'
   712  00FF2F  20                 	db	32
   713  00FF30  7C                 	db	124
   714  00FF31  44                 	db	68	;'D'
   715  00FF32  3E                 	db	62	;'>'
   716  00FF33  00                 	db	0
   717  00FF34                     STR_22:
   718  00FF34  56                 	db	86	;'V'
   719  00FF35  65                 	db	101	;'e'
   720  00FF36  72                 	db	114	;'r'
   721  00FF37  73                 	db	115	;'s'
   722  00FF38  69                 	db	105	;'i'
   723  00FF39  6F                 	db	111	;'o'
   724  00FF3A  6E                 	db	110	;'n'
   725  00FF3B  3A                 	db	58	;':'
   726  00FF3C  20                 	db	32
   727  00FF3D  76                 	db	118	;'v'
   728  00FF3E  31                 	db	49	;'1'
   729  00FF3F  2E                 	db	46
   730  00FF40  30                 	db	48	;'0'
   731  00FF41  7C                 	db	124
   732  00FF42  44                 	db	68	;'D'
   733  00FF43  3E                 	db	62	;'>'
   734  00FF44  00                 	db	0
   735  00FF45                     STR_21:
   736  00FF45  45                 	db	69	;'E'
   737  00FF46  63                 	db	99	;'c'
   738  00FF47  6F                 	db	111	;'o'
   739  00FF48  53                 	db	83	;'S'
   740  00FF49  6F                 	db	111	;'o'
   741  00FF4A  72                 	db	114	;'r'
   742  00FF4B  74                 	db	116	;'t'
   743  00FF4C  20                 	db	32
   744  00FF4D  20                 	db	32
   745  00FF4E  20                 	db	32
   746  00FF4F  20                 	db	32
   747  00FF50  20                 	db	32
   748  00FF51  20                 	db	32
   749  00FF52  7C                 	db	124
   750  00FF53  3C                 	db	60	;'<'
   751  00FF54  43                 	db	67	;'C'
   752  00FF55  00                 	db	0
   753  00FF56                     STR_7:
   754  00FF56  34                 	db	52	;'4'
   755  00FF57  3A                 	db	58	;':'
   756  00FF58  20                 	db	32
   757  00FF59  52                 	db	82	;'R'
   758  00FF5A  75                 	db	117	;'u'
   759  00FF5B  6E                 	db	110	;'n'
   760  00FF5C  20                 	db	32
   761  00FF5D  31                 	db	49	;'1'
   762  00FF5E  20                 	db	32
   763  00FF5F  20                 	db	32
   764  00FF60  20                 	db	32
   765  00FF61  20                 	db	32
   766  00FF62  20                 	db	32
   767  00FF63  7C                 	db	124
   768  00FF64  3C                 	db	60	;'<'
   769  00FF65  43                 	db	67	;'C'
   770  00FF66  00                 	db	0
   771  00FF67                     STR_13:
   772  00FF67  36                 	db	54	;'6'
   773  00FF68  3A                 	db	58	;':'
   774  00FF69  20                 	db	32
   775  00FF6A  52                 	db	82	;'R'
   776  00FF6B  75                 	db	117	;'u'
   777  00FF6C  6E                 	db	110	;'n'
   778  00FF6D  20                 	db	32
   779  00FF6E  33                 	db	51	;'3'
   780  00FF6F  20                 	db	32
   781  00FF70  20                 	db	32
   782  00FF71  20                 	db	32
   783  00FF72  20                 	db	32
   784  00FF73  20                 	db	32
   785  00FF74  7C                 	db	124
   786  00FF75  3C                 	db	60	;'<'
   787  00FF76  43                 	db	67	;'C'
   788  00FF77  00                 	db	0
   789  00FF78                     STR_1:
   790  00FF78  2A                 	db	42
   791  00FF79  3A                 	db	58	;':'
   792  00FF7A  20                 	db	32
   793  00FF7B  53                 	db	83	;'S'
   794  00FF7C  74                 	db	116	;'t'
   795  00FF7D  61                 	db	97	;'a'
   796  00FF7E  72                 	db	114	;'r'
   797  00FF7F  74                 	db	116	;'t'
   798  00FF80  20                 	db	32
   799  00FF81  20                 	db	32
   800  00FF82  20                 	db	32
   801  00FF83  20                 	db	32
   802  00FF84  20                 	db	32
   803  00FF85  7C                 	db	124
   804  00FF86  3C                 	db	60	;'<'
   805  00FF87  43                 	db	67	;'C'
   806  00FF88  00                 	db	0
   807  00FF89                     STR_19:
   808  00FF89  32                 	db	50	;'2'
   809  00FF8A  3A                 	db	58	;':'
   810  00FF8B  20                 	db	32
   811  00FF8C  41                 	db	65	;'A'
   812  00FF8D  62                 	db	98	;'b'
   813  00FF8E  6F                 	db	111	;'o'
   814  00FF8F  75                 	db	117	;'u'
   815  00FF90  74                 	db	116	;'t'
   816  00FF91  20                 	db	32
   817  00FF92  20                 	db	32
   818  00FF93  20                 	db	32
   819  00FF94  20                 	db	32
   820  00FF95  20                 	db	32
   821  00FF96  7C                 	db	124
   822  00FF97  3C                 	db	60	;'<'
   823  00FF98  43                 	db	67	;'C'
   824  00FF99  00                 	db	0
   825  00FF9A                     STR_37:
   826  00FF9A  54                 	db	84	;'T'
   827  00FF9B  6F                 	db	111	;'o'
   828  00FF9C  74                 	db	116	;'t'
   829  00FF9D  61                 	db	97	;'a'
   830  00FF9E  6C                 	db	108	;'l'
   831  00FF9F  3A                 	db	58	;':'
   832  00FFA0  20                 	db	32
   833  00FFA1  25                 	db	37
   834  00FFA2  69                 	db	105	;'i'
   835  00FFA3  20                 	db	32
   836  00FFA4  20                 	db	32
   837  00FFA5  20                 	db	32
   838  00FFA6  20                 	db	32
   839  00FFA7  7C                 	db	124
   840  00FFA8  3C                 	db	60	;'<'
   841  00FFA9  43                 	db	67	;'C'
   842  00FFAA  00                 	db	0
   843  00FFAB                     STR_25:
   844  00FFAB  4D                 	db	77	;'M'
   845  00FFAC  65                 	db	101	;'e'
   846  00FFAD  63                 	db	99	;'c'
   847  00FFAE  68                 	db	104	;'h'
   848  00FFAF  61                 	db	97	;'a'
   849  00FFB0  6E                 	db	110	;'n'
   850  00FFB1  69                 	db	105	;'i'
   851  00FFB2  63                 	db	99	;'c'
   852  00FFB3  73                 	db	115	;'s'
   853  00FFB4  3A                 	db	58	;':'
   854  00FFB5  20                 	db	32
   855  00FFB6  20                 	db	32
   856  00FFB7  20                 	db	32
   857  00FFB8  7C                 	db	124
   858  00FFB9  3C                 	db	60	;'<'
   859  00FFBA  43                 	db	67	;'C'
   860  00FFBB  00                 	db	0
   861  00FFBC                     STR_27:
   862  00FFBC  43                 	db	67	;'C'
   863  00FFBD  69                 	db	105	;'i'
   864  00FFBE  72                 	db	114	;'r'
   865  00FFBF  63                 	db	99	;'c'
   866  00FFC0  75                 	db	117	;'u'
   867  00FFC1  69                 	db	105	;'i'
   868  00FFC2  74                 	db	116	;'t'
   869  00FFC3  72                 	db	114	;'r'
   870  00FFC4  79                 	db	121	;'y'
   871  00FFC5  3A                 	db	58	;':'
   872  00FFC6  20                 	db	32
   873  00FFC7  20                 	db	32
   874  00FFC8  20                 	db	32
   875  00FFC9  7C                 	db	124
   876  00FFCA  3C                 	db	60	;'<'
   877  00FFCB  43                 	db	67	;'C'
   878  00FFCC  00                 	db	0
   879  00FFCD                     STR_24:
   880  00FFCD  49                 	db	73	;'I'
   881  00FFCE  6E                 	db	110	;'n'
   882  00FFCF  6E                 	db	110	;'n'
   883  00FFD0  6F                 	db	111	;'o'
   884  00FFD1  76                 	db	118	;'v'
   885  00FFD2  61                 	db	97	;'a'
   886  00FFD3  54                 	db	84	;'T'
   887  00FFD4  65                 	db	101	;'e'
   888  00FFD5  63                 	db	99	;'c'
   889  00FFD6  68                 	db	104	;'h'
   890  00FFD7  20                 	db	32
   891  00FFD8  20                 	db	32
   892  00FFD9  20                 	db	32
   893  00FFDA  7C                 	db	124
   894  00FFDB  3C                 	db	60	;'<'
   895  00FFDC  43                 	db	67	;'C'
   896  00FFDD  00                 	db	0
   897  00FFDE                     STR_29:
   898  00FFDE  50                 	db	80	;'P'
   899  00FFDF  72                 	db	114	;'r'
   900  00FFE0  6F                 	db	111	;'o'
   901  00FFE1  67                 	db	103	;'g'
   902  00FFE2  72                 	db	114	;'r'
   903  00FFE3  61                 	db	97	;'a'
   904  00FFE4  6D                 	db	109	;'m'
   905  00FFE5  6D                 	db	109	;'m'
   906  00FFE6  69                 	db	105	;'i'
   907  00FFE7  6E                 	db	110	;'n'
   908  00FFE8  67                 	db	103	;'g'
   909  00FFE9  3A                 	db	58	;':'
   910  00FFEA  20                 	db	32
   911  00FFEB  7C                 	db	124
   912  00FFEC  3C                 	db	60	;'<'
   913  00FFED  43                 	db	67	;'C'
   914  00FFEE  00                 	db	0
   915  00FFEF                     STR_3:
   916  00FFEF  20                 	db	32
   917  00FFF0  20                 	db	32
   918  00FFF1  20                 	db	32
   919  00FFF2  20                 	db	32
   920  00FFF3  53                 	db	83	;'S'
   921  00FFF4  6F                 	db	111	;'o'
   922  00FFF5  72                 	db	114	;'r'
   923  00FFF6  74                 	db	116	;'t'
   924  00FFF7  69                 	db	105	;'i'
   925  00FFF8  6E                 	db	110	;'n'
   926  00FFF9  67                 	db	103	;'g'
   927  00FFFA  20                 	db	32
   928  00FFFB  20                 	db	32
   929  00FFFC  20                 	db	32
   930  00FFFD  20                 	db	32
   931  00FFFE  00                 	db	0
   932  0000                     
   933                           ; #config settings
   934  00FFFF  00                 	db	0	; dummy byte at the end
   935  0000                     
   936                           	psect	cinit
   937  0034CC                     __pcinit:
   938                           	opt stack 0
   939  0034CC                     start_initialization:
   940                           	opt stack 0
   941  0034CC                     __initialization:
   942                           	opt stack 0
   943                           
   944                           ; Clear objects allocated to BANK1 (49 bytes)
   945  0034CC  EE01  F000         	lfsr	0,__pbssBANK1
   946  0034D0  0E31               	movlw	49
   947  0034D2                     clear_0:
   948  0034D2  6AEE               	clrf	postinc0,c
   949  0034D4  06E8               	decf	wreg,f,c
   950  0034D6  E1FD               	bnz	clear_0
   951                           
   952                           ; Clear objects allocated to COMRAM (2 bytes)
   953  0034D8  6A4A               	clrf	(__pbssCOMRAM+1)& (0+255),c
   954  0034DA  6A49               	clrf	__pbssCOMRAM& (0+255),c
   955  0034DC                     end_of_initialization:
   956                           	opt stack 0
   957  0034DC                     __end_of__initialization:
   958                           	opt stack 0
   959  0034DC  904B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   960  0034DE  924B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   961  0034E0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   962  0034E2  6EF8               	movwf	tblptru,c
   963  0034E4  0100               	movlb	0
   964  0034E6  EF09  F000         	goto	_main	;jump to C main() function
   965                           tblptru	equ	0xFF8
   966                           postinc0	equ	0xFEE
   967                           wreg	equ	0xFE8
   968                           
   969                           	psect	bssCOMRAM
   970  000049                     __pbssCOMRAM:
   971                           	opt stack 0
   972  000049                     _errno:
   973                           	opt stack 0
   974  000049                     	ds	2
   975                           tblptru	equ	0xFF8
   976                           postinc0	equ	0xFEE
   977                           wreg	equ	0xFE8
   978                           
   979                           	psect	bssBANK1
   980  000100                     __pbssBANK1:
   981                           	opt stack 0
   982  000100                     _run:
   983                           	opt stack 0
   984  000100                     	ds	2
   985  000102                     _totalbot:
   986                           	opt stack 0
   987  000102                     	ds	2
   988  000104                     _eska_b:
   989                           	opt stack 0
   990  000104                     	ds	2
   991  000106                     _eska_a:
   992                           	opt stack 0
   993  000106                     	ds	2
   994  000108                     _yop_b:
   995                           	opt stack 0
   996  000108                     	ds	2
   997  00010A                     _yop_a:
   998                           	opt stack 0
   999  00010A                     	ds	2
  1000  00010C                     _flag5:
  1001                           	opt stack 0
  1002  00010C                     	ds	2
  1003  00010E                     _flag4:
  1004                           	opt stack 0
  1005  00010E                     	ds	2
  1006  000110                     _flag3:
  1007                           	opt stack 0
  1008  000110                     	ds	2
  1009  000112                     _flag2:
  1010                           	opt stack 0
  1011  000112                     	ds	2
  1012  000114                     _flag1:
  1013                           	opt stack 0
  1014  000114                     	ds	2
  1015  000116                     _flag:
  1016                           	opt stack 0
  1017  000116                     	ds	2
  1018  000118                     _curr_state:
  1019                           	opt stack 0
  1020  000118                     	ds	1
  1021  000119                     _type:
  1022                           	opt stack 0
  1023  000119                     	ds	1
  1024  00011A                     _brand:
  1025                           	opt stack 0
  1026  00011A                     	ds	1
  1027  00011B                     _pressed:
  1028                           	opt stack 0
  1029  00011B                     	ds	1
  1030  00011C                     _end_time:
  1031                           	opt stack 0
  1032  00011C                     	ds	7
  1033  000123                     _start_time:
  1034                           	opt stack 0
  1035  000123                     	ds	7
  1036  00012A                     _time:
  1037                           	opt stack 0
  1038  00012A                     	ds	7
  1039                           tblptru	equ	0xFF8
  1040                           postinc0	equ	0xFEE
  1041                           wreg	equ	0xFE8
  1042                           
  1043                           	psect	cstackBANK1
  1044  000131                     __pcstackBANK1:
  1045                           	opt stack 0
  1046  000131                     ??_printf:
  1047                           
  1048                           ; 1 bytes @ 0x0
  1049  000131                     	ds	4
  1050  000135                     printf@cp:
  1051                           	opt stack 0
  1052                           
  1053                           ; 2 bytes @ 0x4
  1054  000135                     	ds	2
  1055  000137                     printf@idx:
  1056                           	opt stack 0
  1057                           
  1058                           ; 1 bytes @ 0x6
  1059  000137                     	ds	1
  1060  000138                     printf@ap:
  1061                           	opt stack 0
  1062                           
  1063                           ; 2 bytes @ 0x7
  1064  000138                     	ds	2
  1065  00013A                     printf@len:
  1066                           	opt stack 0
  1067                           
  1068                           ; 2 bytes @ 0x9
  1069  00013A                     	ds	2
  1070  00013C                     printf@prec:
  1071                           	opt stack 0
  1072                           
  1073                           ; 1 bytes @ 0xB
  1074  00013C                     	ds	1
  1075  00013D                     printf@val:
  1076                           	opt stack 0
  1077                           
  1078                           ; 2 bytes @ 0xC
  1079  00013D                     	ds	2
  1080  00013F                     printf@flag:
  1081                           	opt stack 0
  1082                           
  1083                           ; 1 bytes @ 0xE
  1084  00013F                     	ds	1
  1085  000140                     printf@width:
  1086                           	opt stack 0
  1087                           
  1088                           ; 2 bytes @ 0xF
  1089  000140                     	ds	2
  1090  000142                     printf@c:
  1091                           	opt stack 0
  1092                           
  1093                           ; 1 bytes @ 0x11
  1094  000142                     	ds	1
  1095  000143                     ??_standby_mode:
  1096  000143                     print@line1:
  1097                           	opt stack 0
  1098                           
  1099                           ; 2 bytes @ 0x12
  1100  000143                     	ds	2
  1101  000145                     print@line2:
  1102                           	opt stack 0
  1103                           
  1104                           ; 2 bytes @ 0x14
  1105  000145                     	ds	2
  1106  000147                     ??_main:
  1107                           
  1108                           ; 1 bytes @ 0x16
  1109  000147                     	ds	2
  1110  000149                     main@i:
  1111                           	opt stack 0
  1112                           
  1113                           ; 2 bytes @ 0x18
  1114  000149                     	ds	2
  1115  00014B                     main@i_782:
  1116                           	opt stack 0
  1117                           
  1118                           ; 2 bytes @ 0x1A
  1119  00014B                     	ds	2
  1120  00014D                     main@i_783:
  1121                           	opt stack 0
  1122                           
  1123                           ; 2 bytes @ 0x1C
  1124  00014D                     	ds	2
  1125  00014F                     main@i_784:
  1126                           	opt stack 0
  1127                           
  1128                           ; 2 bytes @ 0x1E
  1129  00014F                     	ds	2
  1130  000151                     main@counter:
  1131                           	opt stack 0
  1132                           
  1133                           ; 2 bytes @ 0x20
  1134  000151                     	ds	2
  1135                           tblptru	equ	0xFF8
  1136                           postinc0	equ	0xFEE
  1137                           wreg	equ	0xFE8
  1138                           
  1139                           	psect	cstackBANK0
  1140  000080                     __pcstackBANK0:
  1141                           	opt stack 0
  1142  000080                     ??___ftmul:
  1143  000080                     ??_I2C_Master_Init:
  1144  000080                     ___ftdiv@cntr:
  1145                           	opt stack 0
  1146                           
  1147                           ; 1 bytes @ 0x0
  1148  000080                     	ds	1
  1149  000081                     ___ftdiv@f3:
  1150                           	opt stack 0
  1151                           
  1152                           ; 3 bytes @ 0x1
  1153  000081                     	ds	2
  1154  000083                     ___ftmul@exp:
  1155                           	opt stack 0
  1156                           
  1157                           ; 1 bytes @ 0x3
  1158  000083                     	ds	1
  1159  000084                     ___ftdiv@exp:
  1160                           	opt stack 0
  1161  000084                     ___ftmul@f3_as_product:
  1162                           	opt stack 0
  1163                           
  1164                           ; 3 bytes @ 0x4
  1165  000084                     	ds	1
  1166  000085                     ___ftdiv@sign:
  1167                           	opt stack 0
  1168                           
  1169                           ; 1 bytes @ 0x5
  1170  000085                     	ds	2
  1171  000087                     ___ftmul@cntr:
  1172                           	opt stack 0
  1173                           
  1174                           ; 1 bytes @ 0x7
  1175  000087                     	ds	1
  1176  000088                     ___ftmul@sign:
  1177                           	opt stack 0
  1178                           
  1179                           ; 1 bytes @ 0x8
  1180  000088                     	ds	1
  1181  000089                     ?___ftadd:
  1182                           	opt stack 0
  1183  000089                     ___ftadd@f1:
  1184                           	opt stack 0
  1185                           
  1186                           ; 3 bytes @ 0x9
  1187  000089                     	ds	3
  1188  00008C                     ___ftadd@f2:
  1189                           	opt stack 0
  1190                           
  1191                           ; 3 bytes @ 0xC
  1192  00008C                     	ds	3
  1193  00008F                     ??___ftadd:
  1194                           
  1195                           ; 1 bytes @ 0xF
  1196  00008F                     	ds	3
  1197  000092                     ___ftadd@sign:
  1198                           	opt stack 0
  1199                           
  1200                           ; 1 bytes @ 0x12
  1201  000092                     	ds	1
  1202  000093                     ___ftadd@exp2:
  1203                           	opt stack 0
  1204                           
  1205                           ; 1 bytes @ 0x13
  1206  000093                     	ds	1
  1207  000094                     ___ftadd@exp1:
  1208                           	opt stack 0
  1209                           
  1210                           ; 1 bytes @ 0x14
  1211  000094                     	ds	1
  1212  000095                     ?___ftsub:
  1213                           	opt stack 0
  1214  000095                     ?_eval_poly:
  1215                           	opt stack 0
  1216  000095                     ?___fttol:
  1217                           	opt stack 0
  1218  000095                     ___ftsub@f1:
  1219                           	opt stack 0
  1220  000095                     ___fttol@f1:
  1221                           	opt stack 0
  1222  000095                     eval_poly@x:
  1223                           	opt stack 0
  1224                           
  1225                           ; 3 bytes @ 0x15
  1226  000095                     	ds	3
  1227  000098                     eval_poly@d:
  1228                           	opt stack 0
  1229  000098                     ___ftsub@f2:
  1230                           	opt stack 0
  1231                           
  1232                           ; 3 bytes @ 0x18
  1233  000098                     	ds	1
  1234  000099                     ??___fttol:
  1235                           
  1236                           ; 1 bytes @ 0x19
  1237  000099                     	ds	1
  1238  00009A                     eval_poly@n:
  1239                           	opt stack 0
  1240                           
  1241                           ; 2 bytes @ 0x1A
  1242  00009A                     	ds	2
  1243  00009C                     eval_poly@res:
  1244                           	opt stack 0
  1245                           
  1246                           ; 3 bytes @ 0x1C
  1247  00009C                     	ds	2
  1248  00009E                     ___fttol@sign1:
  1249                           	opt stack 0
  1250                           
  1251                           ; 1 bytes @ 0x1E
  1252  00009E                     	ds	1
  1253  00009F                     ?_log:
  1254                           	opt stack 0
  1255  00009F                     ?_ldexp:
  1256                           	opt stack 0
  1257  00009F                     ldexp@value:
  1258                           	opt stack 0
  1259  00009F                     log@x:
  1260                           	opt stack 0
  1261  00009F                     ___fttol@lval:
  1262                           	opt stack 0
  1263                           
  1264                           ; 4 bytes @ 0x1F
  1265  00009F                     	ds	3
  1266  0000A2                     ldexp@newexp:
  1267                           	opt stack 0
  1268  0000A2                     log@exponent:
  1269                           	opt stack 0
  1270                           
  1271                           ; 2 bytes @ 0x22
  1272  0000A2                     	ds	1
  1273  0000A3                     ___fttol@exp1:
  1274                           	opt stack 0
  1275                           
  1276                           ; 1 bytes @ 0x23
  1277  0000A3                     	ds	1
  1278  0000A4                     ??_ldexp:
  1279  0000A4                     ?___altoft:
  1280                           	opt stack 0
  1281  0000A4                     ___altoft@c:
  1282                           	opt stack 0
  1283                           
  1284                           ; 4 bytes @ 0x24
  1285  0000A4                     	ds	4
  1286  0000A8                     ??___altoft:
  1287                           
  1288                           ; 1 bytes @ 0x28
  1289  0000A8                     	ds	4
  1290  0000AC                     ?_floor:
  1291                           	opt stack 0
  1292  0000AC                     floor@x:
  1293                           	opt stack 0
  1294                           
  1295                           ; 3 bytes @ 0x2C
  1296  0000AC                     	ds	3
  1297  0000AF                     floor@i:
  1298                           	opt stack 0
  1299                           
  1300                           ; 3 bytes @ 0x2F
  1301  0000AF                     	ds	3
  1302  0000B2                     floor@expon:
  1303                           	opt stack 0
  1304                           
  1305                           ; 2 bytes @ 0x32
  1306  0000B2                     	ds	2
  1307  0000B4                     ?_exp:
  1308                           	opt stack 0
  1309  0000B4                     exp@x:
  1310                           	opt stack 0
  1311                           
  1312                           ; 3 bytes @ 0x34
  1313  0000B4                     	ds	3
  1314  0000B7                     _exp$1580:
  1315                           	opt stack 0
  1316                           
  1317                           ; 3 bytes @ 0x37
  1318  0000B7                     	ds	3
  1319  0000BA                     exp@exponent:
  1320                           	opt stack 0
  1321                           
  1322                           ; 2 bytes @ 0x3A
  1323  0000BA                     	ds	2
  1324  0000BC                     exp@sign:
  1325                           	opt stack 0
  1326                           
  1327                           ; 1 bytes @ 0x3C
  1328  0000BC                     	ds	1
  1329  0000BD                     ?_pow:
  1330                           	opt stack 0
  1331  0000BD                     pow@x:
  1332                           	opt stack 0
  1333                           
  1334                           ; 3 bytes @ 0x3D
  1335  0000BD                     	ds	3
  1336  0000C0                     pow@y:
  1337                           	opt stack 0
  1338                           
  1339                           ; 3 bytes @ 0x40
  1340  0000C0                     	ds	3
  1341  0000C3                     _pow$1578:
  1342                           	opt stack 0
  1343                           
  1344                           ; 3 bytes @ 0x43
  1345  0000C3                     	ds	3
  1346  0000C6                     _pow$1579:
  1347                           	opt stack 0
  1348                           
  1349                           ; 3 bytes @ 0x46
  1350  0000C6                     	ds	3
  1351  0000C9                     pow@sign:
  1352                           	opt stack 0
  1353                           
  1354                           ; 1 bytes @ 0x49
  1355  0000C9                     	ds	1
  1356  0000CA                     pow@yi:
  1357                           	opt stack 0
  1358                           
  1359                           ; 4 bytes @ 0x4A
  1360  0000CA                     	ds	4
  1361  0000CE                     ?_dec2hex:
  1362                           	opt stack 0
  1363  0000CE                     dec2hex@num:
  1364                           	opt stack 0
  1365                           
  1366                           ; 2 bytes @ 0x4E
  1367  0000CE                     	ds	2
  1368  0000D0                     _dec2hex$1576:
  1369                           	opt stack 0
  1370                           
  1371                           ; 3 bytes @ 0x50
  1372  0000D0                     	ds	3
  1373  0000D3                     _dec2hex$1577:
  1374                           	opt stack 0
  1375                           
  1376                           ; 3 bytes @ 0x53
  1377  0000D3                     	ds	3
  1378  0000D6                     dec2hex@temp:
  1379                           	opt stack 0
  1380                           
  1381                           ; 2 bytes @ 0x56
  1382  0000D6                     	ds	2
  1383  0000D8                     dec2hex@i:
  1384                           	opt stack 0
  1385                           
  1386                           ; 2 bytes @ 0x58
  1387  0000D8                     	ds	2
  1388  0000DA                     dec2hex@hexnum:
  1389                           	opt stack 0
  1390                           
  1391                           ; 2 bytes @ 0x5A
  1392  0000DA                     	ds	2
  1393  0000DC                     dec2hex@quotient:
  1394                           	opt stack 0
  1395                           
  1396                           ; 2 bytes @ 0x5C
  1397  0000DC                     	ds	2
  1398  0000DE                     ?_time_diff:
  1399                           	opt stack 0
  1400  0000DE                     time_diff@time1:
  1401                           	opt stack 0
  1402                           
  1403                           ; 2 bytes @ 0x5E
  1404  0000DE                     	ds	2
  1405  0000E0                     time_diff@time2:
  1406                           	opt stack 0
  1407                           
  1408                           ; 2 bytes @ 0x60
  1409  0000E0                     	ds	2
  1410  0000E2                     ??_time_diff:
  1411                           
  1412                           ; 1 bytes @ 0x62
  1413  0000E2                     	ds	2
  1414  0000E4                     time_diff@hr1:
  1415                           	opt stack 0
  1416                           
  1417                           ; 2 bytes @ 0x64
  1418  0000E4                     	ds	2
  1419  0000E6                     time_diff@hr2:
  1420                           	opt stack 0
  1421                           
  1422                           ; 2 bytes @ 0x66
  1423  0000E6                     	ds	2
  1424  0000E8                     time_diff@min1:
  1425                           	opt stack 0
  1426                           
  1427                           ; 2 bytes @ 0x68
  1428  0000E8                     	ds	2
  1429  0000EA                     time_diff@min2:
  1430                           	opt stack 0
  1431                           
  1432                           ; 2 bytes @ 0x6A
  1433  0000EA                     	ds	2
  1434  0000EC                     time_diff@s1:
  1435                           	opt stack 0
  1436                           
  1437                           ; 2 bytes @ 0x6C
  1438  0000EC                     	ds	2
  1439  0000EE                     time_diff@s2:
  1440                           	opt stack 0
  1441                           
  1442                           ; 2 bytes @ 0x6E
  1443  0000EE                     	ds	2
  1444  0000F0                     time_diff@d1:
  1445                           	opt stack 0
  1446                           
  1447                           ; 2 bytes @ 0x70
  1448  0000F0                     	ds	2
  1449  0000F2                     time_diff@d2:
  1450                           	opt stack 0
  1451                           
  1452                           ; 2 bytes @ 0x72
  1453  0000F2                     	ds	2
  1454  0000F4                     time_diff@d3:
  1455                           	opt stack 0
  1456                           
  1457                           ; 2 bytes @ 0x74
  1458  0000F4                     	ds	2
  1459  0000F6                     ?_printf:
  1460                           	opt stack 0
  1461  0000F6                     printf@f:
  1462                           	opt stack 0
  1463                           
  1464                           ; 2 bytes @ 0x76
  1465  0000F6                     	ds	8
  1466  0000FE                     standby_mode@time:
  1467                           	opt stack 0
  1468                           
  1469                           ; 2 bytes @ 0x7E
  1470  0000FE                     	ds	2
  1471                           tblptru	equ	0xFF8
  1472                           postinc0	equ	0xFEE
  1473                           wreg	equ	0xFE8
  1474                           
  1475                           	psect	cstackCOMRAM
  1476  000001                     __pcstackCOMRAM:
  1477                           	opt stack 0
  1478  000001                     ??i2_I2C_Master_Wait:
  1479  000001                     ??i2_opentoplid:
  1480  000001                     ??i2_closebotlid:
  1481  000001                     ??i2_isdigit:
  1482  000001                     ?i2___wmul:
  1483                           	opt stack 0
  1484  000001                     ?i2___lwdiv:
  1485                           	opt stack 0
  1486  000001                     i2lcdNibble@temp:
  1487                           	opt stack 0
  1488  000001                     i2delay@seconds:
  1489                           	opt stack 0
  1490  000001                     i2___wmul@multiplier:
  1491                           	opt stack 0
  1492  000001                     i2___lwdiv@dividend:
  1493                           	opt stack 0
  1494                           
  1495                           ; 2 bytes @ 0x0
  1496  000001                     	ds	1
  1497  000002                     i2lcdNibble@data:
  1498                           	opt stack 0
  1499  000002                     i2I2C_Master_Read@a:
  1500                           	opt stack 0
  1501  000002                     i2_isdigit$1143:
  1502                           	opt stack 0
  1503  000002                     i2I2C_Master_Write@d:
  1504                           	opt stack 0
  1505  000002                     i2opentoplid@i:
  1506                           	opt stack 0
  1507  000002                     i2closebotlid@i:
  1508                           	opt stack 0
  1509                           
  1510                           ; 2 bytes @ 0x1
  1511  000002                     	ds	1
  1512  000003                     ??i2_delay:
  1513  000003                     i2lcdInst@data:
  1514                           	opt stack 0
  1515  000003                     i2putch@data:
  1516                           	opt stack 0
  1517  000003                     i2I2C_Master_Read@temp:
  1518                           	opt stack 0
  1519  000003                     i2isdigit@c:
  1520                           	opt stack 0
  1521  000003                     i2___wmul@multiplicand:
  1522                           	opt stack 0
  1523  000003                     i2___lwdiv@divisor:
  1524                           	opt stack 0
  1525                           
  1526                           ; 2 bytes @ 0x2
  1527  000003                     	ds	1
  1528  000004                     ??i2_lcdclear:
  1529  000004                     i2update_time@time:
  1530                           	opt stack 0
  1531  000004                     i2delay@i:
  1532                           	opt stack 0
  1533                           
  1534                           ; 2 bytes @ 0x3
  1535  000004                     	ds	1
  1536  000005                     i2___wmul@product:
  1537                           	opt stack 0
  1538  000005                     i2___lwdiv@quotient:
  1539                           	opt stack 0
  1540                           
  1541                           ; 2 bytes @ 0x4
  1542  000005                     	ds	1
  1543  000006                     i2update_time@i:
  1544                           	opt stack 0
  1545  000006                     i2delay@i_822:
  1546                           	opt stack 0
  1547                           
  1548                           ; 1 bytes @ 0x5
  1549  000006                     	ds	1
  1550  000007                     i2___lwdiv@counter:
  1551                           	opt stack 0
  1552                           
  1553                           ; 1 bytes @ 0x6
  1554  000007                     	ds	1
  1555  000008                     ?i2___lwmod:
  1556                           	opt stack 0
  1557  000008                     i2___lwmod@dividend:
  1558                           	opt stack 0
  1559                           
  1560                           ; 2 bytes @ 0x7
  1561  000008                     	ds	2
  1562  00000A                     i2___lwmod@divisor:
  1563                           	opt stack 0
  1564                           
  1565                           ; 2 bytes @ 0x9
  1566  00000A                     	ds	2
  1567  00000C                     i2___lwmod@counter:
  1568                           	opt stack 0
  1569                           
  1570                           ; 1 bytes @ 0xB
  1571  00000C                     	ds	1
  1572  00000D                     ?i2_printf:
  1573                           	opt stack 0
  1574  00000D                     i2printf@f:
  1575                           	opt stack 0
  1576                           
  1577                           ; 2 bytes @ 0xC
  1578  00000D                     	ds	2
  1579  00000F                     ??i2_printf:
  1580                           
  1581                           ; 1 bytes @ 0xE
  1582  00000F                     	ds	4
  1583  000013                     i2printf@cp:
  1584                           	opt stack 0
  1585                           
  1586                           ; 2 bytes @ 0x12
  1587  000013                     	ds	2
  1588  000015                     i2printf@idx:
  1589                           	opt stack 0
  1590                           
  1591                           ; 1 bytes @ 0x14
  1592  000015                     	ds	1
  1593  000016                     i2printf@ap:
  1594                           	opt stack 0
  1595                           
  1596                           ; 2 bytes @ 0x15
  1597  000016                     	ds	2
  1598  000018                     i2printf@len:
  1599                           	opt stack 0
  1600                           
  1601                           ; 2 bytes @ 0x17
  1602  000018                     	ds	2
  1603  00001A                     i2printf@prec:
  1604                           	opt stack 0
  1605                           
  1606                           ; 1 bytes @ 0x19
  1607  00001A                     	ds	1
  1608  00001B                     i2printf@val:
  1609                           	opt stack 0
  1610                           
  1611                           ; 2 bytes @ 0x1A
  1612  00001B                     	ds	2
  1613  00001D                     i2printf@flag:
  1614                           	opt stack 0
  1615                           
  1616                           ; 1 bytes @ 0x1C
  1617  00001D                     	ds	1
  1618  00001E                     i2printf@width:
  1619                           	opt stack 0
  1620                           
  1621                           ; 2 bytes @ 0x1D
  1622  00001E                     	ds	2
  1623  000020                     i2printf@c:
  1624                           	opt stack 0
  1625                           
  1626                           ; 1 bytes @ 0x1F
  1627  000020                     	ds	1
  1628  000021                     i2print@line1:
  1629                           	opt stack 0
  1630                           
  1631                           ; 2 bytes @ 0x20
  1632  000021                     	ds	2
  1633  000023                     i2print@line2:
  1634                           	opt stack 0
  1635                           
  1636                           ; 2 bytes @ 0x22
  1637  000023                     	ds	2
  1638  000025                     ??_keypressed:
  1639  000025                     
  1640                           ; 1 bytes @ 0x24
  1641  000025                     	ds	16
  1642  000035                     ??_key_release:
  1643  000035                     ??_closebotlid:
  1644  000035                     ??_opentoplid:
  1645  000035                     ??_readADC:
  1646  000035                     ??_openbotlid:
  1647  000035                     ??_closetoplid:
  1648  000035                     ??_isdigit:
  1649  000035                     ??_I2C_Master_Wait:
  1650  000035                     ?___wmul:
  1651                           	opt stack 0
  1652  000035                     ?___awdiv:
  1653                           	opt stack 0
  1654  000035                     ?___lwdiv:
  1655                           	opt stack 0
  1656  000035                     ?___ftpack:
  1657                           	opt stack 0
  1658  000035                     ?_frexp:
  1659                           	opt stack 0
  1660  000035                     ?___ftneg:
  1661                           	opt stack 0
  1662  000035                     ?___lldiv:
  1663                           	opt stack 0
  1664  000035                     lcdNibble@temp:
  1665                           	opt stack 0
  1666  000035                     delay@seconds:
  1667                           	opt stack 0
  1668  000035                     read_eeprom@address:
  1669                           	opt stack 0
  1670  000035                     write_eeprom@address:
  1671                           	opt stack 0
  1672  000035                     ___wmul@multiplier:
  1673                           	opt stack 0
  1674  000035                     ___awdiv@dividend:
  1675                           	opt stack 0
  1676  000035                     ___lwdiv@dividend:
  1677                           	opt stack 0
  1678  000035                     ___ftpack@arg:
  1679                           	opt stack 0
  1680  000035                     ___ftge@ff1:
  1681                           	opt stack 0
  1682  000035                     ___ftneg@f1:
  1683                           	opt stack 0
  1684  000035                     frexp@value:
  1685                           	opt stack 0
  1686  000035                     ___lldiv@dividend:
  1687                           	opt stack 0
  1688                           
  1689                           ; 4 bytes @ 0x34
  1690  000035                     	ds	1
  1691  000036                     lcdNibble@data:
  1692                           	opt stack 0
  1693  000036                     I2C_Master_Read@a:
  1694                           	opt stack 0
  1695  000036                     readADC@channel:
  1696                           	opt stack 0
  1697  000036                     _isdigit$1143:
  1698                           	opt stack 0
  1699  000036                     I2C_Master_Write@d:
  1700                           	opt stack 0
  1701  000036                     opentoplid@i:
  1702                           	opt stack 0
  1703  000036                     closetoplid@i:
  1704                           	opt stack 0
  1705  000036                     openbotlid@i:
  1706                           	opt stack 0
  1707  000036                     closebotlid@i:
  1708                           	opt stack 0
  1709                           
  1710                           ; 2 bytes @ 0x35
  1711  000036                     	ds	1
  1712  000037                     ??_delay:
  1713  000037                     lcdInst@data:
  1714                           	opt stack 0
  1715  000037                     putch@data:
  1716                           	opt stack 0
  1717  000037                     I2C_Master_Read@temp:
  1718                           	opt stack 0
  1719  000037                     write_eeprom@data:
  1720                           	opt stack 0
  1721  000037                     isdigit@c:
  1722                           	opt stack 0
  1723  000037                     ___wmul@multiplicand:
  1724                           	opt stack 0
  1725  000037                     ___awdiv@divisor:
  1726                           	opt stack 0
  1727  000037                     ___lwdiv@divisor:
  1728                           	opt stack 0
  1729                           
  1730                           ; 2 bytes @ 0x36
  1731  000037                     	ds	1
  1732  000038                     ??_lcdclear:
  1733  000038                     ??_initLCD:
  1734  000038                     ___ftpack@exp:
  1735                           	opt stack 0
  1736  000038                     update_time@time:
  1737                           	opt stack 0
  1738  000038                     delay@i:
  1739                           	opt stack 0
  1740  000038                     frexp@eptr:
  1741                           	opt stack 0
  1742  000038                     ___ftge@ff2:
  1743                           	opt stack 0
  1744                           
  1745                           ; 3 bytes @ 0x37
  1746  000038                     	ds	1
  1747  000039                     ___awdiv@counter:
  1748                           	opt stack 0
  1749  000039                     ___ftpack@sign:
  1750                           	opt stack 0
  1751  000039                     ___wmul@product:
  1752                           	opt stack 0
  1753  000039                     ___lwdiv@quotient:
  1754                           	opt stack 0
  1755  000039                     ___lldiv@divisor:
  1756                           	opt stack 0
  1757                           
  1758                           ; 4 bytes @ 0x38
  1759  000039                     	ds	1
  1760  00003A                     ??___ftpack:
  1761  00003A                     ??_frexp:
  1762  00003A                     update_time@i:
  1763                           	opt stack 0
  1764  00003A                     delay@i_822:
  1765                           	opt stack 0
  1766  00003A                     ___awdiv@sign:
  1767                           	opt stack 0
  1768                           
  1769                           ; 1 bytes @ 0x39
  1770  00003A                     	ds	1
  1771  00003B                     ??___ftge:
  1772  00003B                     ___lwdiv@counter:
  1773                           	opt stack 0
  1774  00003B                     ___awdiv@quotient:
  1775                           	opt stack 0
  1776                           
  1777                           ; 2 bytes @ 0x3A
  1778  00003B                     	ds	1
  1779  00003C                     ?___lwmod:
  1780                           	opt stack 0
  1781  00003C                     ___lwmod@dividend:
  1782                           	opt stack 0
  1783                           
  1784                           ; 2 bytes @ 0x3B
  1785  00003C                     	ds	1
  1786  00003D                     ?___ftdiv:
  1787                           	opt stack 0
  1788  00003D                     ?___awtoft:
  1789                           	opt stack 0
  1790  00003D                     ?___lltoft:
  1791                           	opt stack 0
  1792  00003D                     ___awtoft@c:
  1793                           	opt stack 0
  1794  00003D                     ___ftdiv@f1:
  1795                           	opt stack 0
  1796  00003D                     ___lldiv@quotient:
  1797                           	opt stack 0
  1798  00003D                     ___lltoft@c:
  1799                           	opt stack 0
  1800                           
  1801                           ; 4 bytes @ 0x3C
  1802  00003D                     	ds	1
  1803  00003E                     ___lwmod@divisor:
  1804                           	opt stack 0
  1805                           
  1806                           ; 2 bytes @ 0x3D
  1807  00003E                     	ds	2
  1808  000040                     ___awtoft@sign:
  1809                           	opt stack 0
  1810  000040                     ___lwmod@counter:
  1811                           	opt stack 0
  1812  000040                     ___ftdiv@f2:
  1813                           	opt stack 0
  1814                           
  1815                           ; 3 bytes @ 0x3F
  1816  000040                     	ds	1
  1817  000041                     ??___lltoft:
  1818  000041                     ?___ftmul:
  1819                           	opt stack 0
  1820  000041                     ___lldiv@counter:
  1821                           	opt stack 0
  1822  000041                     ___ftmul@f1:
  1823                           	opt stack 0
  1824                           
  1825                           ; 3 bytes @ 0x40
  1826  000041                     	ds	1
  1827  000042                     I2C_Master_Init@c:
  1828                           	opt stack 0
  1829                           
  1830                           ; 4 bytes @ 0x41
  1831  000042                     	ds	1
  1832  000043                     ??___ftdiv:
  1833                           
  1834                           ; 1 bytes @ 0x42
  1835  000043                     	ds	1
  1836  000044                     ___ftmul@f2:
  1837                           	opt stack 0
  1838                           
  1839                           ; 3 bytes @ 0x43
  1840  000044                     	ds	1
  1841  000045                     ___lltoft@exp:
  1842                           	opt stack 0
  1843                           
  1844                           ; 1 bytes @ 0x44
  1845  000045                     	ds	2
  1846  000047                     ??_eval_poly:
  1847  000047                     ___altoft@exp:
  1848                           	opt stack 0
  1849                           
  1850                           ; 1 bytes @ 0x46
  1851  000047                     	ds	1
  1852  000048                     ___altoft@sign:
  1853                           	opt stack 0
  1854                           
  1855                           ; 1 bytes @ 0x47
  1856  000048                     	ds	1
  1857  000049                     tblptru	equ	0xFF8
  1858                           postinc0	equ	0xFEE
  1859                           wreg	equ	0xFE8
  1860                           
  1861                           ; 1 bytes @ 0x48
  1862 ;;
  1863 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1864 ;;
  1865 ;; *************** function _main *****************
  1866 ;; Defined at:
  1867 ;;		line 91 in file "main.c"
  1868 ;; Parameters:    Size  Location     Type
  1869 ;;		None
  1870 ;; Auto vars:     Size  Location     Type
  1871 ;;  i               2   24[BANK1 ] unsigned int 
  1872 ;;  i               2   30[BANK1 ] unsigned int 
  1873 ;;  i               2   28[BANK1 ] unsigned int 
  1874 ;;  i               2   26[BANK1 ] unsigned int 
  1875 ;;  counter         2   32[BANK1 ] unsigned int 
  1876 ;; Return value:  Size  Location     Type
  1877 ;;                  1    wreg      void 
  1878 ;; Registers used:
  1879 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1880 ;; Tracked objects:
  1881 ;;		On entry : 0/0
  1882 ;;		On exit  : 0/0
  1883 ;;		Unchanged: 0/0
  1884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1886 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1887 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1888 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1889 ;;Total ram usage:       12 bytes
  1890 ;; Hardware stack levels required when called:   12
  1891 ;; This function calls:
  1892 ;;		_I2C_Master_Init
  1893 ;;		_closebotlid
  1894 ;;		_closetoplid
  1895 ;;		_delay
  1896 ;;		_initLCD
  1897 ;;		_key_release
  1898 ;;		_lcdInst
  1899 ;;		_lcdclear
  1900 ;;		_openbotlid
  1901 ;;		_opentoplid
  1902 ;;		_print
  1903 ;;		_printf
  1904 ;;		_readADC
  1905 ;;		_read_eeprom
  1906 ;;		_standby_mode
  1907 ;;		_time_diff
  1908 ;;		_update_time
  1909 ;;		_wait
  1910 ;;		_write_eeprom
  1911 ;; This function is called by:
  1912 ;;		Startup code after reset
  1913 ;; This function uses a non-reentrant model
  1914 ;;
  1915                           
  1916                           	psect	text0
  1917  000012                     __ptext0:
  1918                           	opt stack 0
  1919  000012                     _main:
  1920                           	opt stack 19
  1921                           
  1922                           ;main.c: 95: TRISA = 0b11011110;
  1923                           
  1924                           ;incstack = 0
  1925  000012  0EDE               	movlw	222
  1926  000014  6E92               	movwf	3986,c	;volatile
  1927                           
  1928                           ;main.c: 96: TRISB = 0b11111010;
  1929  000016  0EFA               	movlw	250
  1930  000018  6E93               	movwf	3987,c	;volatile
  1931                           
  1932                           ;main.c: 97: TRISC = 0b01011001;
  1933  00001A  0E59               	movlw	89
  1934  00001C  6E94               	movwf	3988,c	;volatile
  1935                           
  1936                           ;main.c: 98: TRISD = 0x00;
  1937  00001E  0E00               	movlw	0
  1938  000020  6E95               	movwf	3989,c	;volatile
  1939                           
  1940                           ;main.c: 99: TRISE = 0x00;
  1941  000022  0E00               	movlw	0
  1942  000024  6E96               	movwf	3990,c	;volatile
  1943                           
  1944                           ;main.c: 101: LATA = 0x00;
  1945  000026  0E00               	movlw	0
  1946  000028  6E89               	movwf	3977,c	;volatile
  1947                           
  1948                           ;main.c: 102: LATB = 0x00;
  1949  00002A  0E00               	movlw	0
  1950  00002C  6E8A               	movwf	3978,c	;volatile
  1951                           
  1952                           ;main.c: 103: LATC = 0x00;
  1953  00002E  0E00               	movlw	0
  1954  000030  6E8B               	movwf	3979,c	;volatile
  1955                           
  1956                           ;main.c: 104: LATD = 0x00;
  1957  000032  0E00               	movlw	0
  1958  000034  6E8C               	movwf	3980,c	;volatile
  1959                           
  1960                           ;main.c: 105: LATE = 0x00;
  1961  000036  0E00               	movlw	0
  1962  000038  6E8D               	movwf	3981,c	;volatile
  1963                           
  1964                           ;main.c: 107: ADCON0 = 0x00;
  1965  00003A  0E00               	movlw	0
  1966  00003C  6EC2               	movwf	4034,c	;volatile
  1967                           
  1968                           ;main.c: 108: ADCON1 = 0x0B;
  1969  00003E  0E0B               	movlw	11
  1970  000040  6EC1               	movwf	4033,c	;volatile
  1971                           
  1972                           ;main.c: 109: CVRCON = 0x00;
  1973  000042  0E00               	movlw	0
  1974  000044  6EB5               	movwf	4021,c	;volatile
  1975                           
  1976                           ;main.c: 110: CMCONbits.CIS = 0;
  1977  000046  96B4               	bcf	4020,3,c	;volatile
  1978                           
  1979                           ;main.c: 111: ADFM = 1;
  1980  000048  8EC0               	bsf	4032,7,c	;volatile
  1981                           
  1982                           ;main.c: 113: RB0 = 1;
  1983  00004A  8081               	bsf	3969,0,c	;volatile
  1984                           
  1985                           ;main.c: 114: RB2 = 1;
  1986  00004C  8481               	bsf	3969,2,c	;volatile
  1987                           
  1988                           ;main.c: 116: nRBPU = 0;
  1989  00004E  9EF1               	bcf	intcon2,7,c	;volatile
  1990                           
  1991                           ;main.c: 118: I2C_Master_Init(10000);
  1992  000050  0E10               	movlw	16
  1993  000052  6E42               	movwf	I2C_Master_Init@c,c
  1994  000054  0E27               	movlw	39
  1995  000056  6E43               	movwf	I2C_Master_Init@c+1,c
  1996  000058  0E00               	movlw	0
  1997  00005A  6E44               	movwf	I2C_Master_Init@c+2,c
  1998  00005C  0E00               	movlw	0
  1999  00005E  6E45               	movwf	I2C_Master_Init@c+3,c
  2000  000060  EC1E  F017         	call	_I2C_Master_Init	;wreg free
  2001                           
  2002                           ;main.c: 120: INT1IE = 1;
  2003  000064  86F0               	bsf	intcon3,3,c	;volatile
  2004                           
  2005                           ;main.c: 121: (INTCONbits.GIE = 1);
  2006  000066  8EF2               	bsf	intcon,7,c	;volatile
  2007                           
  2008                           ;main.c: 123: initLCD();
  2009  000068  EC12  F018         	call	_initLCD	;wreg free
  2010                           
  2011                           ;main.c: 126: write_eeprom(0x30,0x0);
  2012  00006C  0E00               	movlw	0
  2013  00006E  6E36               	movwf	write_eeprom@address+1,c
  2014  000070  0E30               	movlw	48
  2015  000072  6E35               	movwf	write_eeprom@address,c
  2016  000074  0E00               	movlw	0
  2017  000076  6E37               	movwf	write_eeprom@data,c
  2018  000078  ECE3  F019         	call	_write_eeprom	;wreg free
  2019                           
  2020                           ;main.c: 127: write_eeprom(0x31,0x0);
  2021  00007C  0E00               	movlw	0
  2022  00007E  6E36               	movwf	write_eeprom@address+1,c
  2023  000080  0E31               	movlw	49
  2024  000082  6E35               	movwf	write_eeprom@address,c
  2025  000084  0E00               	movlw	0
  2026  000086  6E37               	movwf	write_eeprom@data,c
  2027  000088  ECE3  F019         	call	_write_eeprom	;wreg free
  2028                           
  2029                           ;main.c: 128: write_eeprom(0x32,0x0);
  2030  00008C  0E00               	movlw	0
  2031  00008E  6E36               	movwf	write_eeprom@address+1,c
  2032  000090  0E32               	movlw	50
  2033  000092  6E35               	movwf	write_eeprom@address,c
  2034  000094  0E00               	movlw	0
  2035  000096  6E37               	movwf	write_eeprom@data,c
  2036  000098  ECE3  F019         	call	_write_eeprom	;wreg free
  2037                           
  2038                           ;main.c: 129: write_eeprom(0x33,0x0);
  2039  00009C  0E00               	movlw	0
  2040  00009E  6E36               	movwf	write_eeprom@address+1,c
  2041  0000A0  0E33               	movlw	51
  2042  0000A2  6E35               	movwf	write_eeprom@address,c
  2043  0000A4  0E00               	movlw	0
  2044  0000A6  6E37               	movwf	write_eeprom@data,c
  2045  0000A8  ECE3  F019         	call	_write_eeprom	;wreg free
  2046                           
  2047                           ;main.c: 132: write_eeprom(0x20,0x0);
  2048  0000AC  0E00               	movlw	0
  2049  0000AE  6E36               	movwf	write_eeprom@address+1,c
  2050  0000B0  0E20               	movlw	32
  2051  0000B2  6E35               	movwf	write_eeprom@address,c
  2052  0000B4  0E00               	movlw	0
  2053  0000B6  6E37               	movwf	write_eeprom@data,c
  2054  0000B8  ECE3  F019         	call	_write_eeprom	;wreg free
  2055                           
  2056                           ;main.c: 133: write_eeprom(0x21,0x0);
  2057  0000BC  0E00               	movlw	0
  2058  0000BE  6E36               	movwf	write_eeprom@address+1,c
  2059  0000C0  0E21               	movlw	33
  2060  0000C2  6E35               	movwf	write_eeprom@address,c
  2061  0000C4  0E00               	movlw	0
  2062  0000C6  6E37               	movwf	write_eeprom@data,c
  2063  0000C8  ECE3  F019         	call	_write_eeprom	;wreg free
  2064                           
  2065                           ;main.c: 134: write_eeprom(0x22,0x0);
  2066  0000CC  0E00               	movlw	0
  2067  0000CE  6E36               	movwf	write_eeprom@address+1,c
  2068  0000D0  0E22               	movlw	34
  2069  0000D2  6E35               	movwf	write_eeprom@address,c
  2070  0000D4  0E00               	movlw	0
  2071  0000D6  6E37               	movwf	write_eeprom@data,c
  2072  0000D8  ECE3  F019         	call	_write_eeprom	;wreg free
  2073                           
  2074                           ;main.c: 135: write_eeprom(0x23,0x0);
  2075  0000DC  0E00               	movlw	0
  2076  0000DE  6E36               	movwf	write_eeprom@address+1,c
  2077  0000E0  0E23               	movlw	35
  2078  0000E2  6E35               	movwf	write_eeprom@address,c
  2079  0000E4  0E00               	movlw	0
  2080  0000E6  6E37               	movwf	write_eeprom@data,c
  2081  0000E8  ECE3  F019         	call	_write_eeprom	;wreg free
  2082                           
  2083                           ;main.c: 138: write_eeprom(0x10,0x0);
  2084  0000EC  0E00               	movlw	0
  2085  0000EE  6E36               	movwf	write_eeprom@address+1,c
  2086  0000F0  0E10               	movlw	16
  2087  0000F2  6E35               	movwf	write_eeprom@address,c
  2088  0000F4  0E00               	movlw	0
  2089  0000F6  6E37               	movwf	write_eeprom@data,c
  2090  0000F8  ECE3  F019         	call	_write_eeprom	;wreg free
  2091                           
  2092                           ;main.c: 139: write_eeprom(0x11,0x0);
  2093  0000FC  0E00               	movlw	0
  2094  0000FE  6E36               	movwf	write_eeprom@address+1,c
  2095  000100  0E11               	movlw	17
  2096  000102  6E35               	movwf	write_eeprom@address,c
  2097  000104  0E00               	movlw	0
  2098  000106  6E37               	movwf	write_eeprom@data,c
  2099  000108  ECE3  F019         	call	_write_eeprom	;wreg free
  2100                           
  2101                           ;main.c: 140: write_eeprom(0x12,0x0);
  2102  00010C  0E00               	movlw	0
  2103  00010E  6E36               	movwf	write_eeprom@address+1,c
  2104  000110  0E12               	movlw	18
  2105  000112  6E35               	movwf	write_eeprom@address,c
  2106  000114  0E00               	movlw	0
  2107  000116  6E37               	movwf	write_eeprom@data,c
  2108  000118  ECE3  F019         	call	_write_eeprom	;wreg free
  2109                           
  2110                           ;main.c: 141: write_eeprom(0x13,0x0);
  2111  00011C  0E00               	movlw	0
  2112  00011E  6E36               	movwf	write_eeprom@address+1,c
  2113  000120  0E13               	movlw	19
  2114  000122  6E35               	movwf	write_eeprom@address,c
  2115  000124  0E00               	movlw	0
  2116  000126  6E37               	movwf	write_eeprom@data,c
  2117  000128  ECE3  F019         	call	_write_eeprom	;wreg free
  2118                           
  2119                           ;main.c: 144: write_eeprom(0x00,0x0);
  2120  00012C  0E00               	movlw	0
  2121  00012E  6E36               	movwf	write_eeprom@address+1,c
  2122  000130  0E00               	movlw	0
  2123  000132  6E35               	movwf	write_eeprom@address,c
  2124  000134  0E00               	movlw	0
  2125  000136  6E37               	movwf	write_eeprom@data,c
  2126  000138  ECE3  F019         	call	_write_eeprom	;wreg free
  2127                           
  2128                           ;main.c: 145: write_eeprom(0x01,0x0);
  2129  00013C  0E00               	movlw	0
  2130  00013E  6E36               	movwf	write_eeprom@address+1,c
  2131  000140  0E01               	movlw	1
  2132  000142  6E35               	movwf	write_eeprom@address,c
  2133  000144  0E00               	movlw	0
  2134  000146  6E37               	movwf	write_eeprom@data,c
  2135  000148  ECE3  F019         	call	_write_eeprom	;wreg free
  2136                           
  2137                           ;main.c: 146: write_eeprom(0x02,0x0);
  2138  00014C  0E00               	movlw	0
  2139  00014E  6E36               	movwf	write_eeprom@address+1,c
  2140  000150  0E02               	movlw	2
  2141  000152  6E35               	movwf	write_eeprom@address,c
  2142  000154  0E00               	movlw	0
  2143  000156  6E37               	movwf	write_eeprom@data,c
  2144  000158  ECE3  F019         	call	_write_eeprom	;wreg free
  2145                           
  2146                           ;main.c: 147: write_eeprom(0x03,0x0);
  2147  00015C  0E00               	movlw	0
  2148  00015E  6E36               	movwf	write_eeprom@address+1,c
  2149  000160  0E03               	movlw	3
  2150  000162  6E35               	movwf	write_eeprom@address,c
  2151  000164  0E00               	movlw	0
  2152  000166  6E37               	movwf	write_eeprom@data,c
  2153  000168  ECE3  F019         	call	_write_eeprom	;wreg free
  2154                           
  2155                           ;main.c: 156: switch(curr_state){
  2156                           
  2157                           ;main.c: 152: while (1){
  2158  00016C  EFA5  F007         	goto	l6196
  2159  000170                     l5704:
  2160                           
  2161                           ;main.c: 158: flag = 0, flag1 = 0, flag2 = 0, flag3 = 0, flag4 = 0, flag5 = 0;
  2162  000170  0E00               	movlw	0
  2163  000172  0101               	movlb	1	; () banked
  2164  000174  6F17               	movwf	(_flag+1)& (0+255),b
  2165  000176  0E00               	movlw	0
  2166  000178  6F16               	movwf	_flag& (0+255),b
  2167  00017A  0E00               	movlw	0
  2168  00017C  0101               	movlb	1	; () banked
  2169  00017E  6F15               	movwf	(_flag1+1)& (0+255),b
  2170  000180  0E00               	movlw	0
  2171  000182  6F14               	movwf	_flag1& (0+255),b
  2172  000184  0E00               	movlw	0
  2173  000186  0101               	movlb	1	; () banked
  2174  000188  6F13               	movwf	(_flag2+1)& (0+255),b
  2175  00018A  0E00               	movlw	0
  2176  00018C  6F12               	movwf	_flag2& (0+255),b
  2177  00018E  0E00               	movlw	0
  2178  000190  0101               	movlb	1	; () banked
  2179  000192  6F11               	movwf	(_flag3+1)& (0+255),b
  2180  000194  0E00               	movlw	0
  2181  000196  6F10               	movwf	_flag3& (0+255),b
  2182  000198  0E00               	movlw	0
  2183  00019A  0101               	movlb	1	; () banked
  2184  00019C  6F0F               	movwf	(_flag4+1)& (0+255),b
  2185  00019E  0E00               	movlw	0
  2186  0001A0  6F0E               	movwf	_flag4& (0+255),b
  2187  0001A2  0E00               	movlw	0
  2188  0001A4  0101               	movlb	1	; () banked
  2189  0001A6  6F0D               	movwf	(_flag5+1)& (0+255),b
  2190  0001A8  0E00               	movlw	0
  2191  0001AA  6F0C               	movwf	_flag5& (0+255),b
  2192                           
  2193                           ; BSR set to: 1
  2194                           ;main.c: 159: lcdclear();
  2195  0001AC  EC93  F01A         	call	_lcdclear	;wreg free
  2196                           
  2197                           ;main.c: 160: lcdInst(0b10000000);;
  2198  0001B0  0E80               	movlw	128
  2199  0001B2  ECCE  F01A         	call	_lcdInst
  2200                           
  2201                           ;main.c: 161: while(keys[(PORTB & 0xF0)>>4] != '0'){
  2202  0001B6  D008               	goto	l5712
  2203  0001B8                     l5710:
  2204                           
  2205                           ;main.c: 164: standby_mode(time);
  2206  0001B8  0E2A               	movlw	low _time
  2207  0001BA  0100               	movlb	0	; () banked
  2208  0001BC  6FFE               	movwf	standby_mode@time& (0+255),b
  2209  0001BE  0E01               	movlw	high _time
  2210  0001C0  0100               	movlb	0	; () banked
  2211  0001C2  6FFF               	movwf	(standby_mode@time+1)& (0+255),b
  2212  0001C4  ECEA  F013         	call	_standby_mode	;wreg free
  2213  0001C8                     l5712:
  2214  0001C8  3881               	swapf	3969,w,c	;volatile
  2215  0001CA  0B0F               	andlw	15
  2216  0001CC  0B0F               	andlw	15
  2217  0001CE  0101               	movlb	1	; () banked
  2218  0001D0  6F47               	movwf	??_main& (0+255),b
  2219  0001D2  6B48               	clrf	(??_main+1)& (0+255),b
  2220  0001D4  0E43               	movlw	low _keys
  2221  0001D6  0101               	movlb	1	; () banked
  2222  0001D8  2547               	addwf	??_main& (0+255),w,b
  2223  0001DA  6EF6               	movwf	tblptrl,c
  2224  0001DC  0EFD               	movlw	high _keys
  2225  0001DE  2148               	addwfc	(??_main+1)& (0+255),w,b
  2226  0001E0  6EF7               	movwf	tblptrh,c
  2227  0001E2                     	if	0	;There are less than 3 active tblptr bytes
  2228  0001E2                     	endif
  2229  0001E2  0008               	tblrd		*
  2230  0001E4  50F5               	movf	tablat,w,c
  2231  0001E6  0A30               	xorlw	48
  2232  0001E8  A4D8               	btfss	status,2,c
  2233  0001EA  D7E6               	goto	l5710
  2234                           
  2235                           ; BSR set to: 1
  2236                           ;main.c: 165: }
  2237                           ;main.c: 166: key_release();
  2238                           
  2239                           ; BSR set to: 1
  2240  0001EC  ECCF  F019         	call	_key_release	;wreg free
  2241                           
  2242                           ;main.c: 168: while (!flag){
  2243  0001F0  D318               	goto	l5934
  2244  0001F2                     l5716:
  2245                           
  2246                           ;main.c: 169: lcdclear();
  2247  0001F2  EC93  F01A         	call	_lcdclear	;wreg free
  2248                           
  2249                           ;main.c: 170: print("*: Start     |<C","1: Past Logs |D>");
  2250  0001F6  0E78               	movlw	low STR_1
  2251  0001F8  0101               	movlb	1	; () banked
  2252  0001FA  6F43               	movwf	print@line1& (0+255),b
  2253  0001FC  0EFF               	movlw	high STR_1
  2254  0001FE  0101               	movlb	1	; () banked
  2255  000200  6F44               	movwf	(print@line1+1)& (0+255),b
  2256  000202  0E23               	movlw	low STR_2
  2257  000204  0101               	movlb	1	; () banked
  2258  000206  6F45               	movwf	print@line2& (0+255),b
  2259  000208  0EFF               	movlw	high STR_2
  2260  00020A  0101               	movlb	1	; () banked
  2261  00020C  6F46               	movwf	(print@line2+1)& (0+255),b
  2262  00020E  ECBB  F018         	call	_print	;wreg free
  2263                           
  2264                           ;main.c: 171: wait();
  2265  000212  ECFA  F01A         	call	_wait	;wreg free
  2266                           
  2267                           ;main.c: 172: key_release();
  2268  000216  ECCF  F019         	call	_key_release	;wreg free
  2269                           
  2270                           ;main.c: 174: if (pressed == '*'){
  2271  00021A  0E2A               	movlw	42
  2272  00021C  0101               	movlb	1	; () banked
  2273  00021E  191B               	xorwf	_pressed& (0+255),w,b
  2274  000220  A4D8               	btfss	status,2,c
  2275  000222  D05D               	goto	l5752
  2276                           
  2277                           ; BSR set to: 1
  2278                           ;main.c: 176: yop_a = 0;
  2279  000224  0E00               	movlw	0
  2280  000226  0101               	movlb	1	; () banked
  2281  000228  6F0B               	movwf	(_yop_a+1)& (0+255),b
  2282  00022A  0E00               	movlw	0
  2283  00022C  6F0A               	movwf	_yop_a& (0+255),b
  2284                           
  2285                           ;main.c: 177: yop_b = 0;
  2286  00022E  0E00               	movlw	0
  2287  000230  0101               	movlb	1	; () banked
  2288  000232  6F09               	movwf	(_yop_b+1)& (0+255),b
  2289  000234  0E00               	movlw	0
  2290  000236  6F08               	movwf	_yop_b& (0+255),b
  2291                           
  2292                           ;main.c: 178: eska_a = 0;
  2293  000238  0E00               	movlw	0
  2294  00023A  0101               	movlb	1	; () banked
  2295  00023C  6F07               	movwf	(_eska_a+1)& (0+255),b
  2296  00023E  0E00               	movlw	0
  2297  000240  6F06               	movwf	_eska_a& (0+255),b
  2298                           
  2299                           ;main.c: 179: eska_b = 0;
  2300  000242  0E00               	movlw	0
  2301  000244  0101               	movlb	1	; () banked
  2302  000246  6F05               	movwf	(_eska_b+1)& (0+255),b
  2303  000248  0E00               	movlw	0
  2304  00024A  6F04               	movwf	_eska_b& (0+255),b
  2305                           
  2306                           ;main.c: 180: totalbot = 0;
  2307  00024C  0E00               	movlw	0
  2308  00024E  0101               	movlb	1	; () banked
  2309  000250  6F03               	movwf	(_totalbot+1)& (0+255),b
  2310  000252  0E00               	movlw	0
  2311  000254  6F02               	movwf	_totalbot& (0+255),b
  2312                           
  2313                           ; BSR set to: 1
  2314                           ;main.c: 181: if (run == 5){
  2315  000256  0E05               	movlw	5
  2316  000258  0101               	movlb	1	; () banked
  2317  00025A  1900               	xorwf	_run& (0+255),w,b
  2318  00025C  0101               	movlb	1	; () banked
  2319  00025E  1101               	iorwf	(_run+1)& (0+255),w,b
  2320  000260  A4D8               	btfss	status,2,c
  2321  000262  D006               	goto	l5732
  2322                           
  2323                           ; BSR set to: 1
  2324                           ;main.c: 182: run = 1;
  2325  000264  0E00               	movlw	0
  2326  000266  0101               	movlb	1	; () banked
  2327  000268  6F01               	movwf	(_run+1)& (0+255),b
  2328  00026A  0E01               	movlw	1
  2329  00026C  6F00               	movwf	_run& (0+255),b
  2330                           
  2331                           ;main.c: 183: }
  2332  00026E  D003               	goto	l5734
  2333  000270                     l5732:
  2334                           
  2335                           ; BSR set to: 1
  2336                           ;main.c: 184: else{
  2337                           ;main.c: 185: run++;
  2338  000270  0101               	movlb	1	; () banked
  2339  000272  4B00               	infsnz	_run& (0+255),f,b
  2340  000274  2B01               	incf	(_run+1)& (0+255),f,b
  2341  000276                     l5734:
  2342                           
  2343                           ; BSR set to: 1
  2344                           ;main.c: 186: }
  2345                           ;main.c: 188: lcdclear();
  2346  000276  EC93  F01A         	call	_lcdclear	;wreg free
  2347                           
  2348                           ;main.c: 189: print("    Sorting    ","   has begun!   ");
  2349  00027A  0EEF               	movlw	low STR_3
  2350  00027C  0101               	movlb	1	; () banked
  2351  00027E  6F43               	movwf	print@line1& (0+255),b
  2352  000280  0EFF               	movlw	high STR_3
  2353  000282  0101               	movlb	1	; () banked
  2354  000284  6F44               	movwf	(print@line1+1)& (0+255),b
  2355  000286  0E8A               	movlw	low STR_4
  2356  000288  0101               	movlb	1	; () banked
  2357  00028A  6F45               	movwf	print@line2& (0+255),b
  2358  00028C  0EFE               	movlw	high STR_4
  2359  00028E  0101               	movlb	1	; () banked
  2360  000290  6F46               	movwf	(print@line2+1)& (0+255),b
  2361  000292  ECBB  F018         	call	_print	;wreg free
  2362                           
  2363                           ;main.c: 190: delay(2);
  2364  000296  0E00               	movlw	0
  2365  000298  6E36               	movwf	delay@seconds+1,c
  2366  00029A  0E02               	movlw	2
  2367  00029C  6E35               	movwf	delay@seconds,c
  2368  00029E  EC35  F018         	call	_delay	;wreg free
  2369                           
  2370                           ;main.c: 192: lcdclear();
  2371  0002A2  EC93  F01A         	call	_lcdclear	;wreg free
  2372                           
  2373                           ;main.c: 193: print("Sorting...        ","Press # to STOP   ");
  2374  0002A6  0EE6               	movlw	low STR_5
  2375  0002A8  0101               	movlb	1	; () banked
  2376  0002AA  6F43               	movwf	print@line1& (0+255),b
  2377  0002AC  0EFD               	movlw	high STR_5
  2378  0002AE  0101               	movlb	1	; () banked
  2379  0002B0  6F44               	movwf	(print@line1+1)& (0+255),b
  2380  0002B2  0EF9               	movlw	low STR_6
  2381  0002B4  0101               	movlb	1	; () banked
  2382  0002B6  6F45               	movwf	print@line2& (0+255),b
  2383  0002B8  0EFD               	movlw	high STR_6
  2384  0002BA  0101               	movlb	1	; () banked
  2385  0002BC  6F46               	movwf	(print@line2+1)& (0+255),b
  2386  0002BE  ECBB  F018         	call	_print	;wreg free
  2387                           
  2388                           ;main.c: 194: update_time(start_time);
  2389  0002C2  0E23               	movlw	low _start_time
  2390  0002C4  6E38               	movwf	update_time@time,c
  2391  0002C6  0E01               	movlw	high _start_time
  2392  0002C8  6E39               	movwf	update_time@time+1,c
  2393  0002CA  EC7E  F016         	call	_update_time	;wreg free
  2394                           
  2395                           ;main.c: 195: update_time(end_time);
  2396  0002CE  0E1C               	movlw	low _end_time
  2397  0002D0  6E38               	movwf	update_time@time,c
  2398  0002D2  0E01               	movlw	high _end_time
  2399  0002D4  6E39               	movwf	update_time@time+1,c
  2400  0002D6  EC7E  F016         	call	_update_time	;wreg free
  2401                           
  2402                           ;main.c: 196: curr_state = OPERATION;
  2403  0002DA  0E01               	movlw	1
  2404  0002DC  D1B0               	goto	L1
  2405  0002DE                     l5752:
  2406                           
  2407                           ; BSR set to: 1
  2408                           ;main.c: 200: else if (pressed == '1'){
  2409  0002DE  0E31               	movlw	49
  2410  0002E0  0101               	movlb	1	; () banked
  2411  0002E2  191B               	xorwf	_pressed& (0+255),w,b
  2412  0002E4  A4D8               	btfss	status,2,c
  2413  0002E6  D1A5               	goto	l5836
  2414                           
  2415                           ; BSR set to: 1
  2416                           ;main.c: 201: flag1=0;
  2417  0002E8  0E00               	movlw	0
  2418  0002EA  0101               	movlb	1	; () banked
  2419  0002EC  6F15               	movwf	(_flag1+1)& (0+255),b
  2420  0002EE  0E00               	movlw	0
  2421  0002F0  D198               	goto	L2
  2422  0002F2                     l5756:
  2423                           
  2424                           ; BSR set to: 1
  2425                           ;main.c: 203: lcdclear();
  2426  0002F2  EC93  F01A         	call	_lcdclear	;wreg free
  2427                           
  2428                           ;main.c: 204: print("4: Run 1     |<C","5: Run 2     |D>");
  2429  0002F6  0E56               	movlw	low STR_7
  2430  0002F8  0101               	movlb	1	; () banked
  2431  0002FA  6F43               	movwf	print@line1& (0+255),b
  2432  0002FC  0EFF               	movlw	high STR_7
  2433  0002FE  0101               	movlb	1	; () banked
  2434  000300  6F44               	movwf	(print@line1+1)& (0+255),b
  2435  000302  0E12               	movlw	low STR_8
  2436  000304  0101               	movlb	1	; () banked
  2437  000306  6F45               	movwf	print@line2& (0+255),b
  2438  000308  0EFF               	movlw	high STR_8
  2439  00030A  0101               	movlb	1	; () banked
  2440  00030C  6F46               	movwf	(print@line2+1)& (0+255),b
  2441  00030E  ECBB  F018         	call	_print	;wreg free
  2442                           
  2443                           ;main.c: 205: wait();
  2444  000312  ECFA  F01A         	call	_wait	;wreg free
  2445                           
  2446                           ;main.c: 206: key_release();
  2447  000316  ECCF  F019         	call	_key_release	;wreg free
  2448                           
  2449                           ;main.c: 207: if (pressed == '4'){
  2450  00031A  0E34               	movlw	52
  2451  00031C  0101               	movlb	1	; () banked
  2452  00031E  191B               	xorwf	_pressed& (0+255),w,b
  2453  000320  A4D8               	btfss	status,2,c
  2454  000322  D04E               	goto	l5776
  2455                           
  2456                           ; BSR set to: 1
  2457                           ;main.c: 209: lcdclear();
  2458  000324  EC93  F01A         	call	_lcdclear	;wreg free
  2459                           
  2460                           ;main.c: 210: printf("YOP A: %i B: %i|<C",(int)read_eeprom(0x30),(int)read_eeprom(0x31))
      +                          ;
  2461  000328  0E32               	movlw	low STR_9
  2462  00032A  0100               	movlb	0	; () banked
  2463  00032C  6FF6               	movwf	printf@f& (0+255),b
  2464  00032E  0EFE               	movlw	high STR_9
  2465  000330  0100               	movlb	0	; () banked
  2466  000332  6FF7               	movwf	(printf@f+1)& (0+255),b
  2467  000334  0E00               	movlw	0
  2468  000336  6E36               	movwf	read_eeprom@address+1,c
  2469  000338  0E30               	movlw	48
  2470  00033A  6E35               	movwf	read_eeprom@address,c
  2471  00033C  ECAB  F01A         	call	_read_eeprom	;wreg free
  2472  000340  0101               	movlb	1	; () banked
  2473  000342  6F47               	movwf	??_main& (0+255),b
  2474  000344  0101               	movlb	1	; () banked
  2475  000346  5147               	movf	??_main& (0+255),w,b
  2476  000348  0100               	movlb	0	; () banked
  2477  00034A  6FF8               	movwf	(?_printf+2)& (0+255),b
  2478  00034C  6BF9               	clrf	(?_printf+3)& (0+255),b
  2479  00034E  0E00               	movlw	0
  2480  000350  6E36               	movwf	read_eeprom@address+1,c
  2481  000352  0E31               	movlw	49
  2482  000354  6E35               	movwf	read_eeprom@address,c
  2483  000356  ECAB  F01A         	call	_read_eeprom	;wreg free
  2484  00035A  0101               	movlb	1	; () banked
  2485  00035C  6F48               	movwf	(??_main+1)& (0+255),b
  2486  00035E  0101               	movlb	1	; () banked
  2487  000360  5148               	movf	(??_main+1)& (0+255),w,b
  2488  000362  0100               	movlb	0	; () banked
  2489  000364  6FFA               	movwf	(?_printf+4)& (0+255),b
  2490  000366  6BFB               	clrf	(?_printf+5)& (0+255),b
  2491  000368  ECB5  F007         	call	_printf	;wreg free
  2492                           
  2493                           ;main.c: 211: lcdInst(0b11000000);;
  2494  00036C  0EC0               	movlw	192
  2495  00036E  ECCE  F01A         	call	_lcdInst
  2496                           
  2497                           ;main.c: 212: printf("ESK A: %i B: %i   ",(int)read_eeprom(0x32),(int)read_eeprom(0x33))
      +                          ;
  2498  000372  0E0C               	movlw	low STR_10
  2499  000374  0100               	movlb	0	; () banked
  2500  000376  6FF6               	movwf	printf@f& (0+255),b
  2501  000378  0EFE               	movlw	high STR_10
  2502  00037A  0100               	movlb	0	; () banked
  2503  00037C  6FF7               	movwf	(printf@f+1)& (0+255),b
  2504  00037E  0E00               	movlw	0
  2505  000380  6E36               	movwf	read_eeprom@address+1,c
  2506  000382  0E32               	movlw	50
  2507  000384  6E35               	movwf	read_eeprom@address,c
  2508  000386  ECAB  F01A         	call	_read_eeprom	;wreg free
  2509  00038A  0101               	movlb	1	; () banked
  2510  00038C  6F47               	movwf	??_main& (0+255),b
  2511  00038E  0101               	movlb	1	; () banked
  2512  000390  5147               	movf	??_main& (0+255),w,b
  2513  000392  0100               	movlb	0	; () banked
  2514  000394  6FF8               	movwf	(?_printf+2)& (0+255),b
  2515  000396  6BF9               	clrf	(?_printf+3)& (0+255),b
  2516  000398  0E00               	movlw	0
  2517  00039A  6E36               	movwf	read_eeprom@address+1,c
  2518  00039C  0E33               	movlw	51
  2519  00039E  6E35               	movwf	read_eeprom@address,c
  2520  0003A0  ECAB  F01A         	call	_read_eeprom	;wreg free
  2521  0003A4  0101               	movlb	1	; () banked
  2522  0003A6  6F48               	movwf	(??_main+1)& (0+255),b
  2523  0003A8  0101               	movlb	1	; () banked
  2524  0003AA  5148               	movf	(??_main+1)& (0+255),w,b
  2525  0003AC  0100               	movlb	0	; () banked
  2526  0003AE  6FFA               	movwf	(?_printf+4)& (0+255),b
  2527  0003B0  6BFB               	clrf	(?_printf+5)& (0+255),b
  2528  0003B2  ECB5  F007         	call	_printf	;wreg free
  2529                           
  2530                           ;main.c: 213: wait();
  2531  0003B6  ECFA  F01A         	call	_wait	;wreg free
  2532                           
  2533                           ;main.c: 214: key_release();
  2534  0003BA  ECCF  F019         	call	_key_release	;wreg free
  2535                           
  2536                           ;main.c: 216: }
  2537  0003BE  D132               	goto	l5834
  2538  0003C0                     l5776:
  2539                           
  2540                           ;main.c: 217: else if (pressed == '5'){
  2541  0003C0  0E35               	movlw	53
  2542  0003C2  0101               	movlb	1	; () banked
  2543  0003C4  191B               	xorwf	_pressed& (0+255),w,b
  2544  0003C6  A4D8               	btfss	status,2,c
  2545  0003C8  D04E               	goto	l5788
  2546                           
  2547                           ; BSR set to: 1
  2548                           ;main.c: 219: lcdclear();
  2549  0003CA  EC93  F01A         	call	_lcdclear	;wreg free
  2550                           
  2551                           ;main.c: 220: printf("YOP A: %i B: %i|<C",read_eeprom(0x20),read_eeprom(0x21));
  2552  0003CE  0E32               	movlw	low STR_9
  2553  0003D0  0100               	movlb	0	; () banked
  2554  0003D2  6FF6               	movwf	printf@f& (0+255),b
  2555  0003D4  0EFE               	movlw	high STR_9
  2556  0003D6  0100               	movlb	0	; () banked
  2557  0003D8  6FF7               	movwf	(printf@f+1)& (0+255),b
  2558  0003DA  0E00               	movlw	0
  2559  0003DC  6E36               	movwf	read_eeprom@address+1,c
  2560  0003DE  0E20               	movlw	32
  2561  0003E0  6E35               	movwf	read_eeprom@address,c
  2562  0003E2  ECAB  F01A         	call	_read_eeprom	;wreg free
  2563  0003E6  0101               	movlb	1	; () banked
  2564  0003E8  6F47               	movwf	??_main& (0+255),b
  2565  0003EA  0101               	movlb	1	; () banked
  2566  0003EC  5147               	movf	??_main& (0+255),w,b
  2567  0003EE  0100               	movlb	0	; () banked
  2568  0003F0  6FF8               	movwf	(?_printf+2)& (0+255),b
  2569  0003F2  6BF9               	clrf	(?_printf+3)& (0+255),b
  2570  0003F4  0E00               	movlw	0
  2571  0003F6  6E36               	movwf	read_eeprom@address+1,c
  2572  0003F8  0E21               	movlw	33
  2573  0003FA  6E35               	movwf	read_eeprom@address,c
  2574  0003FC  ECAB  F01A         	call	_read_eeprom	;wreg free
  2575  000400  0101               	movlb	1	; () banked
  2576  000402  6F48               	movwf	(??_main+1)& (0+255),b
  2577  000404  0101               	movlb	1	; () banked
  2578  000406  5148               	movf	(??_main+1)& (0+255),w,b
  2579  000408  0100               	movlb	0	; () banked
  2580  00040A  6FFA               	movwf	(?_printf+4)& (0+255),b
  2581  00040C  6BFB               	clrf	(?_printf+5)& (0+255),b
  2582  00040E  ECB5  F007         	call	_printf	;wreg free
  2583                           
  2584                           ;main.c: 221: lcdInst(0b11000000);;
  2585  000412  0EC0               	movlw	192
  2586  000414  ECCE  F01A         	call	_lcdInst
  2587                           
  2588                           ;main.c: 222: printf("ESK A: %i B: %i   ",read_eeprom(0x22),read_eeprom(0x23));
  2589  000418  0E0C               	movlw	low STR_10
  2590  00041A  0100               	movlb	0	; () banked
  2591  00041C  6FF6               	movwf	printf@f& (0+255),b
  2592  00041E  0EFE               	movlw	high STR_10
  2593  000420  0100               	movlb	0	; () banked
  2594  000422  6FF7               	movwf	(printf@f+1)& (0+255),b
  2595  000424  0E00               	movlw	0
  2596  000426  6E36               	movwf	read_eeprom@address+1,c
  2597  000428  0E22               	movlw	34
  2598  00042A  6E35               	movwf	read_eeprom@address,c
  2599  00042C  ECAB  F01A         	call	_read_eeprom	;wreg free
  2600  000430  0101               	movlb	1	; () banked
  2601  000432  6F47               	movwf	??_main& (0+255),b
  2602  000434  0101               	movlb	1	; () banked
  2603  000436  5147               	movf	??_main& (0+255),w,b
  2604  000438  0100               	movlb	0	; () banked
  2605  00043A  6FF8               	movwf	(?_printf+2)& (0+255),b
  2606  00043C  6BF9               	clrf	(?_printf+3)& (0+255),b
  2607  00043E  0E00               	movlw	0
  2608  000440  6E36               	movwf	read_eeprom@address+1,c
  2609  000442  0E23               	movlw	35
  2610  000444  6E35               	movwf	read_eeprom@address,c
  2611  000446  ECAB  F01A         	call	_read_eeprom	;wreg free
  2612  00044A  0101               	movlb	1	; () banked
  2613  00044C  6F48               	movwf	(??_main+1)& (0+255),b
  2614  00044E  0101               	movlb	1	; () banked
  2615  000450  5148               	movf	(??_main+1)& (0+255),w,b
  2616  000452  0100               	movlb	0	; () banked
  2617  000454  6FFA               	movwf	(?_printf+4)& (0+255),b
  2618  000456  6BFB               	clrf	(?_printf+5)& (0+255),b
  2619  000458  ECB5  F007         	call	_printf	;wreg free
  2620                           
  2621                           ;main.c: 223: wait();
  2622  00045C  ECFA  F01A         	call	_wait	;wreg free
  2623                           
  2624                           ;main.c: 224: key_release();
  2625  000460  ECCF  F019         	call	_key_release	;wreg free
  2626                           
  2627                           ;main.c: 226: }
  2628  000464  D0DF               	goto	l5834
  2629  000466                     l5788:
  2630                           
  2631                           ;main.c: 227: else if (pressed == 'D'){
  2632  000466  0E44               	movlw	68
  2633  000468  0101               	movlb	1	; () banked
  2634  00046A  191B               	xorwf	_pressed& (0+255),w,b
  2635  00046C  A4D8               	btfss	status,2,c
  2636  00046E  D0D0               	goto	l5830
  2637                           
  2638                           ; BSR set to: 1
  2639                           ;main.c: 228: flag2= 0;
  2640  000470  0E00               	movlw	0
  2641  000472  0101               	movlb	1	; () banked
  2642  000474  6F13               	movwf	(_flag2+1)& (0+255),b
  2643  000476  0E00               	movlw	0
  2644  000478  D0C3               	goto	L3
  2645  00047A                     l5792:
  2646                           
  2647                           ; BSR set to: 1
  2648                           ;main.c: 230: lcdclear();
  2649  00047A  EC93  F01A         	call	_lcdclear	;wreg free
  2650                           
  2651                           ;main.c: 231: print("6: Run 3     |<C","7: Run 4         ");
  2652  00047E  0E67               	movlw	low STR_13
  2653  000480  0101               	movlb	1	; () banked
  2654  000482  6F43               	movwf	print@line1& (0+255),b
  2655  000484  0EFF               	movlw	high STR_13
  2656  000486  0101               	movlb	1	; () banked
  2657  000488  6F44               	movwf	(print@line1+1)& (0+255),b
  2658  00048A  0E45               	movlw	low STR_14
  2659  00048C  0101               	movlb	1	; () banked
  2660  00048E  6F45               	movwf	print@line2& (0+255),b
  2661  000490  0EFE               	movlw	high STR_14
  2662  000492  0101               	movlb	1	; () banked
  2663  000494  6F46               	movwf	(print@line2+1)& (0+255),b
  2664  000496  ECBB  F018         	call	_print	;wreg free
  2665                           
  2666                           ;main.c: 232: wait();
  2667  00049A  ECFA  F01A         	call	_wait	;wreg free
  2668                           
  2669                           ;main.c: 233: key_release();
  2670  00049E  ECCF  F019         	call	_key_release	;wreg free
  2671                           
  2672                           ;main.c: 234: if (pressed == '6'){
  2673  0004A2  0E36               	movlw	54
  2674  0004A4  0101               	movlb	1	; () banked
  2675  0004A6  191B               	xorwf	_pressed& (0+255),w,b
  2676  0004A8  A4D8               	btfss	status,2,c
  2677  0004AA  D04E               	goto	l5812
  2678                           
  2679                           ; BSR set to: 1
  2680                           ;main.c: 236: lcdclear();
  2681  0004AC  EC93  F01A         	call	_lcdclear	;wreg free
  2682                           
  2683                           ;main.c: 237: printf("YOP A: %i B: %i|<C",(int)read_eeprom(0x10),(int)read_eeprom(0x11))
      +                          ;
  2684  0004B0  0E32               	movlw	low STR_9
  2685  0004B2  0100               	movlb	0	; () banked
  2686  0004B4  6FF6               	movwf	printf@f& (0+255),b
  2687  0004B6  0EFE               	movlw	high STR_9
  2688  0004B8  0100               	movlb	0	; () banked
  2689  0004BA  6FF7               	movwf	(printf@f+1)& (0+255),b
  2690  0004BC  0E00               	movlw	0
  2691  0004BE  6E36               	movwf	read_eeprom@address+1,c
  2692  0004C0  0E10               	movlw	16
  2693  0004C2  6E35               	movwf	read_eeprom@address,c
  2694  0004C4  ECAB  F01A         	call	_read_eeprom	;wreg free
  2695  0004C8  0101               	movlb	1	; () banked
  2696  0004CA  6F47               	movwf	??_main& (0+255),b
  2697  0004CC  0101               	movlb	1	; () banked
  2698  0004CE  5147               	movf	??_main& (0+255),w,b
  2699  0004D0  0100               	movlb	0	; () banked
  2700  0004D2  6FF8               	movwf	(?_printf+2)& (0+255),b
  2701  0004D4  6BF9               	clrf	(?_printf+3)& (0+255),b
  2702  0004D6  0E00               	movlw	0
  2703  0004D8  6E36               	movwf	read_eeprom@address+1,c
  2704  0004DA  0E11               	movlw	17
  2705  0004DC  6E35               	movwf	read_eeprom@address,c
  2706  0004DE  ECAB  F01A         	call	_read_eeprom	;wreg free
  2707  0004E2  0101               	movlb	1	; () banked
  2708  0004E4  6F48               	movwf	(??_main+1)& (0+255),b
  2709  0004E6  0101               	movlb	1	; () banked
  2710  0004E8  5148               	movf	(??_main+1)& (0+255),w,b
  2711  0004EA  0100               	movlb	0	; () banked
  2712  0004EC  6FFA               	movwf	(?_printf+4)& (0+255),b
  2713  0004EE  6BFB               	clrf	(?_printf+5)& (0+255),b
  2714  0004F0  ECB5  F007         	call	_printf	;wreg free
  2715                           
  2716                           ;main.c: 238: lcdInst(0b11000000);;
  2717  0004F4  0EC0               	movlw	192
  2718  0004F6  ECCE  F01A         	call	_lcdInst
  2719                           
  2720                           ;main.c: 239: printf("ESK A: %i B: %i   ",(int)read_eeprom(0x12),(int)read_eeprom(0x13))
      +                          ;
  2721  0004FA  0E0C               	movlw	low STR_10
  2722  0004FC  0100               	movlb	0	; () banked
  2723  0004FE  6FF6               	movwf	printf@f& (0+255),b
  2724  000500  0EFE               	movlw	high STR_10
  2725  000502  0100               	movlb	0	; () banked
  2726  000504  6FF7               	movwf	(printf@f+1)& (0+255),b
  2727  000506  0E00               	movlw	0
  2728  000508  6E36               	movwf	read_eeprom@address+1,c
  2729  00050A  0E12               	movlw	18
  2730  00050C  6E35               	movwf	read_eeprom@address,c
  2731  00050E  ECAB  F01A         	call	_read_eeprom	;wreg free
  2732  000512  0101               	movlb	1	; () banked
  2733  000514  6F47               	movwf	??_main& (0+255),b
  2734  000516  0101               	movlb	1	; () banked
  2735  000518  5147               	movf	??_main& (0+255),w,b
  2736  00051A  0100               	movlb	0	; () banked
  2737  00051C  6FF8               	movwf	(?_printf+2)& (0+255),b
  2738  00051E  6BF9               	clrf	(?_printf+3)& (0+255),b
  2739  000520  0E00               	movlw	0
  2740  000522  6E36               	movwf	read_eeprom@address+1,c
  2741  000524  0E13               	movlw	19
  2742  000526  6E35               	movwf	read_eeprom@address,c
  2743  000528  ECAB  F01A         	call	_read_eeprom	;wreg free
  2744  00052C  0101               	movlb	1	; () banked
  2745  00052E  6F48               	movwf	(??_main+1)& (0+255),b
  2746  000530  0101               	movlb	1	; () banked
  2747  000532  5148               	movf	(??_main+1)& (0+255),w,b
  2748  000534  0100               	movlb	0	; () banked
  2749  000536  6FFA               	movwf	(?_printf+4)& (0+255),b
  2750  000538  6BFB               	clrf	(?_printf+5)& (0+255),b
  2751  00053A  ECB5  F007         	call	_printf	;wreg free
  2752                           
  2753                           ;main.c: 240: wait();
  2754  00053E  ECFA  F01A         	call	_wait	;wreg free
  2755                           
  2756                           ;main.c: 241: key_release();
  2757  000542  ECCF  F019         	call	_key_release	;wreg free
  2758                           
  2759                           ;main.c: 243: }
  2760  000546  D05D               	goto	l5828
  2761  000548                     l5812:
  2762                           
  2763                           ;main.c: 244: else if (pressed == '7'){
  2764  000548  0E37               	movlw	55
  2765  00054A  0101               	movlb	1	; () banked
  2766  00054C  191B               	xorwf	_pressed& (0+255),w,b
  2767  00054E  A4D8               	btfss	status,2,c
  2768  000550  D04E               	goto	l5824
  2769                           
  2770                           ; BSR set to: 1
  2771                           ;main.c: 246: lcdclear();
  2772  000552  EC93  F01A         	call	_lcdclear	;wreg free
  2773                           
  2774                           ;main.c: 247: printf("YOP A: %i B: %i|<C",(int)read_eeprom(0x00),(int)read_eeprom(0x01))
      +                          ;
  2775  000556  0E32               	movlw	low STR_9
  2776  000558  0100               	movlb	0	; () banked
  2777  00055A  6FF6               	movwf	printf@f& (0+255),b
  2778  00055C  0EFE               	movlw	high STR_9
  2779  00055E  0100               	movlb	0	; () banked
  2780  000560  6FF7               	movwf	(printf@f+1)& (0+255),b
  2781  000562  0E00               	movlw	0
  2782  000564  6E36               	movwf	read_eeprom@address+1,c
  2783  000566  0E00               	movlw	0
  2784  000568  6E35               	movwf	read_eeprom@address,c
  2785  00056A  ECAB  F01A         	call	_read_eeprom	;wreg free
  2786  00056E  0101               	movlb	1	; () banked
  2787  000570  6F47               	movwf	??_main& (0+255),b
  2788  000572  0101               	movlb	1	; () banked
  2789  000574  5147               	movf	??_main& (0+255),w,b
  2790  000576  0100               	movlb	0	; () banked
  2791  000578  6FF8               	movwf	(?_printf+2)& (0+255),b
  2792  00057A  6BF9               	clrf	(?_printf+3)& (0+255),b
  2793  00057C  0E00               	movlw	0
  2794  00057E  6E36               	movwf	read_eeprom@address+1,c
  2795  000580  0E01               	movlw	1
  2796  000582  6E35               	movwf	read_eeprom@address,c
  2797  000584  ECAB  F01A         	call	_read_eeprom	;wreg free
  2798  000588  0101               	movlb	1	; () banked
  2799  00058A  6F48               	movwf	(??_main+1)& (0+255),b
  2800  00058C  0101               	movlb	1	; () banked
  2801  00058E  5148               	movf	(??_main+1)& (0+255),w,b
  2802  000590  0100               	movlb	0	; () banked
  2803  000592  6FFA               	movwf	(?_printf+4)& (0+255),b
  2804  000594  6BFB               	clrf	(?_printf+5)& (0+255),b
  2805  000596  ECB5  F007         	call	_printf	;wreg free
  2806                           
  2807                           ;main.c: 248: lcdInst(0b11000000);;
  2808  00059A  0EC0               	movlw	192
  2809  00059C  ECCE  F01A         	call	_lcdInst
  2810                           
  2811                           ;main.c: 249: printf("ESK A: %i B: %i   ",(int)read_eeprom(0x02),(int)read_eeprom(0x03))
      +                          ;
  2812  0005A0  0E0C               	movlw	low STR_10
  2813  0005A2  0100               	movlb	0	; () banked
  2814  0005A4  6FF6               	movwf	printf@f& (0+255),b
  2815  0005A6  0EFE               	movlw	high STR_10
  2816  0005A8  0100               	movlb	0	; () banked
  2817  0005AA  6FF7               	movwf	(printf@f+1)& (0+255),b
  2818  0005AC  0E00               	movlw	0
  2819  0005AE  6E36               	movwf	read_eeprom@address+1,c
  2820  0005B0  0E02               	movlw	2
  2821  0005B2  6E35               	movwf	read_eeprom@address,c
  2822  0005B4  ECAB  F01A         	call	_read_eeprom	;wreg free
  2823  0005B8  0101               	movlb	1	; () banked
  2824  0005BA  6F47               	movwf	??_main& (0+255),b
  2825  0005BC  0101               	movlb	1	; () banked
  2826  0005BE  5147               	movf	??_main& (0+255),w,b
  2827  0005C0  0100               	movlb	0	; () banked
  2828  0005C2  6FF8               	movwf	(?_printf+2)& (0+255),b
  2829  0005C4  6BF9               	clrf	(?_printf+3)& (0+255),b
  2830  0005C6  0E00               	movlw	0
  2831  0005C8  6E36               	movwf	read_eeprom@address+1,c
  2832  0005CA  0E03               	movlw	3
  2833  0005CC  6E35               	movwf	read_eeprom@address,c
  2834  0005CE  ECAB  F01A         	call	_read_eeprom	;wreg free
  2835  0005D2  0101               	movlb	1	; () banked
  2836  0005D4  6F48               	movwf	(??_main+1)& (0+255),b
  2837  0005D6  0101               	movlb	1	; () banked
  2838  0005D8  5148               	movf	(??_main+1)& (0+255),w,b
  2839  0005DA  0100               	movlb	0	; () banked
  2840  0005DC  6FFA               	movwf	(?_printf+4)& (0+255),b
  2841  0005DE  6BFB               	clrf	(?_printf+5)& (0+255),b
  2842  0005E0  ECB5  F007         	call	_printf	;wreg free
  2843                           
  2844                           ;main.c: 250: wait();
  2845  0005E4  ECFA  F01A         	call	_wait	;wreg free
  2846                           
  2847                           ;main.c: 251: key_release();
  2848  0005E8  ECCF  F019         	call	_key_release	;wreg free
  2849                           
  2850                           ;main.c: 253: }
  2851  0005EC  D00A               	goto	l5828
  2852  0005EE                     l5824:
  2853                           
  2854                           ;main.c: 254: else if (pressed == 'C'){
  2855  0005EE  0E43               	movlw	67
  2856  0005F0  0101               	movlb	1	; () banked
  2857  0005F2  191B               	xorwf	_pressed& (0+255),w,b
  2858  0005F4  A4D8               	btfss	status,2,c
  2859  0005F6  D005               	goto	l5828
  2860                           
  2861                           ; BSR set to: 1
  2862                           ;main.c: 255: flag2 = 1;
  2863  0005F8  0E00               	movlw	0
  2864  0005FA  0101               	movlb	1	; () banked
  2865  0005FC  6F13               	movwf	(_flag2+1)& (0+255),b
  2866  0005FE  0E01               	movlw	1
  2867  000600                     L3:
  2868  000600  6F12               	movwf	_flag2& (0+255),b
  2869  000602                     l5828:
  2870  000602  0101               	movlb	1	; () banked
  2871  000604  5112               	movf	_flag2& (0+255),w,b
  2872  000606  0101               	movlb	1	; () banked
  2873  000608  1113               	iorwf	(_flag2+1)& (0+255),w,b
  2874  00060A  A4D8               	btfss	status,2,c
  2875  00060C  D00B               	goto	l5834
  2876  00060E  D735               	goto	l5792
  2877  000610                     l5830:
  2878                           
  2879                           ; BSR set to: 1
  2880                           ;main.c: 259: else if (pressed == 'C'){
  2881  000610  0E43               	movlw	67
  2882  000612  0101               	movlb	1	; () banked
  2883  000614  191B               	xorwf	_pressed& (0+255),w,b
  2884  000616  A4D8               	btfss	status,2,c
  2885  000618  D005               	goto	l5834
  2886                           
  2887                           ; BSR set to: 1
  2888                           ;main.c: 260: flag1 = 1;
  2889  00061A  0E00               	movlw	0
  2890  00061C  0101               	movlb	1	; () banked
  2891  00061E  6F15               	movwf	(_flag1+1)& (0+255),b
  2892  000620  0E01               	movlw	1
  2893  000622                     L2:
  2894  000622  6F14               	movwf	_flag1& (0+255),b
  2895  000624                     l5834:
  2896  000624  0101               	movlb	1	; () banked
  2897  000626  5114               	movf	_flag1& (0+255),w,b
  2898  000628  0101               	movlb	1	; () banked
  2899  00062A  1115               	iorwf	(_flag1+1)& (0+255),w,b
  2900  00062C  A4D8               	btfss	status,2,c
  2901  00062E  D0F9               	goto	l5934
  2902  000630  D660               	goto	l5756
  2903  000632                     l5836:
  2904                           
  2905                           ; BSR set to: 1
  2906                           ;main.c: 264: else if (pressed == 'C'){
  2907  000632  0E43               	movlw	67
  2908  000634  0101               	movlb	1	; () banked
  2909  000636  191B               	xorwf	_pressed& (0+255),w,b
  2910  000638  A4D8               	btfss	status,2,c
  2911  00063A  D004               	goto	l5842
  2912                           
  2913                           ; BSR set to: 1
  2914                           ;main.c: 265: curr_state = STANDBY;
  2915  00063C  0E00               	movlw	0
  2916  00063E                     L1:
  2917  00063E  0101               	movlb	1	; () banked
  2918  000640  6F18               	movwf	_curr_state& (0+255),b
  2919                           
  2920                           ;main.c: 266: break;
  2921  000642  D2C1               	goto	l6104
  2922  000644                     l5842:
  2923                           
  2924                           ; BSR set to: 1
  2925                           ;main.c: 268: else if (pressed == 'D'){
  2926  000644  0E44               	movlw	68
  2927  000646  0101               	movlb	1	; () banked
  2928  000648  191B               	xorwf	_pressed& (0+255),w,b
  2929  00064A  A4D8               	btfss	status,2,c
  2930  00064C  D0EA               	goto	l5934
  2931                           
  2932                           ; BSR set to: 1
  2933                           ;main.c: 269: flag3=0;
  2934  00064E  0E00               	movlw	0
  2935  000650  0101               	movlb	1	; () banked
  2936  000652  6F11               	movwf	(_flag3+1)& (0+255),b
  2937  000654  0E00               	movlw	0
  2938  000656  D0DE               	goto	L4
  2939  000658                     l5846:
  2940                           
  2941                           ; BSR set to: 1
  2942                           ;main.c: 271: lcdclear();
  2943  000658  EC93  F01A         	call	_lcdclear	;wreg free
  2944                           
  2945                           ;main.c: 272: print("2: About     |<C","3: Credits         ");
  2946  00065C  0E89               	movlw	low STR_19
  2947  00065E  0101               	movlb	1	; () banked
  2948  000660  6F43               	movwf	print@line1& (0+255),b
  2949  000662  0EFF               	movlw	high STR_19
  2950  000664  0101               	movlb	1	; () banked
  2951  000666  6F44               	movwf	(print@line1+1)& (0+255),b
  2952  000668  0ED2               	movlw	low STR_20
  2953  00066A  0101               	movlb	1	; () banked
  2954  00066C  6F45               	movwf	print@line2& (0+255),b
  2955  00066E  0EFD               	movlw	high STR_20
  2956  000670  0101               	movlb	1	; () banked
  2957  000672  6F46               	movwf	(print@line2+1)& (0+255),b
  2958  000674  ECBB  F018         	call	_print	;wreg free
  2959                           
  2960                           ;main.c: 273: wait();
  2961  000678  ECFA  F01A         	call	_wait	;wreg free
  2962                           
  2963                           ;main.c: 274: key_release();
  2964  00067C  ECCF  F019         	call	_key_release	;wreg free
  2965                           
  2966                           ;main.c: 275: if (pressed == '2'){
  2967  000680  0E32               	movlw	50
  2968  000682  0101               	movlb	1	; () banked
  2969  000684  191B               	xorwf	_pressed& (0+255),w,b
  2970  000686  A4D8               	btfss	status,2,c
  2971  000688  D044               	goto	l5882
  2972                           
  2973                           ; BSR set to: 1
  2974                           ;main.c: 277: flag4=0;
  2975  00068A  0E00               	movlw	0
  2976  00068C  0101               	movlb	1	; () banked
  2977  00068E  6F0F               	movwf	(_flag4+1)& (0+255),b
  2978  000690  0E00               	movlw	0
  2979  000692  D01D               	goto	L5
  2980  000694                     l5858:
  2981                           
  2982                           ; BSR set to: 1
  2983                           ;main.c: 279: lcdclear();
  2984  000694  EC93  F01A         	call	_lcdclear	;wreg free
  2985                           
  2986                           ;main.c: 280: print("EcoSort      |<C","Version: v1.0|D>");
  2987  000698  0E45               	movlw	low STR_21
  2988  00069A  0101               	movlb	1	; () banked
  2989  00069C  6F43               	movwf	print@line1& (0+255),b
  2990  00069E  0EFF               	movlw	high STR_21
  2991  0006A0  0101               	movlb	1	; () banked
  2992  0006A2  6F44               	movwf	(print@line1+1)& (0+255),b
  2993  0006A4  0E34               	movlw	low STR_22
  2994  0006A6  0101               	movlb	1	; () banked
  2995  0006A8  6F45               	movwf	print@line2& (0+255),b
  2996  0006AA  0EFF               	movlw	high STR_22
  2997  0006AC  0101               	movlb	1	; () banked
  2998  0006AE  6F46               	movwf	(print@line2+1)& (0+255),b
  2999  0006B0  ECBB  F018         	call	_print	;wreg free
  3000                           
  3001                           ;main.c: 281: wait();
  3002  0006B4  ECFA  F01A         	call	_wait	;wreg free
  3003                           
  3004                           ;main.c: 282: key_release();
  3005  0006B8  ECCF  F019         	call	_key_release	;wreg free
  3006                           
  3007                           ;main.c: 283: if (pressed == 'C'){
  3008  0006BC  0E43               	movlw	67
  3009  0006BE  0101               	movlb	1	; () banked
  3010  0006C0  191B               	xorwf	_pressed& (0+255),w,b
  3011  0006C2  A4D8               	btfss	status,2,c
  3012  0006C4  D006               	goto	l5870
  3013                           
  3014                           ; BSR set to: 1
  3015                           ;main.c: 284: flag4 = 1;
  3016  0006C6  0E00               	movlw	0
  3017  0006C8  0101               	movlb	1	; () banked
  3018  0006CA  6F0F               	movwf	(_flag4+1)& (0+255),b
  3019  0006CC  0E01               	movlw	1
  3020  0006CE                     L5:
  3021  0006CE  6F0E               	movwf	_flag4& (0+255),b
  3022                           
  3023                           ;main.c: 285: }
  3024  0006D0  D019               	goto	l5880
  3025  0006D2                     l5870:
  3026                           
  3027                           ; BSR set to: 1
  3028                           ;main.c: 286: else if (pressed == 'D'){
  3029  0006D2  0E44               	movlw	68
  3030  0006D4  0101               	movlb	1	; () banked
  3031  0006D6  191B               	xorwf	_pressed& (0+255),w,b
  3032  0006D8  A4D8               	btfss	status,2,c
  3033  0006DA  D014               	goto	l5880
  3034                           
  3035                           ; BSR set to: 1
  3036                           ;main.c: 287: lcdclear();
  3037  0006DC  EC93  F01A         	call	_lcdclear	;wreg free
  3038                           
  3039                           ;main.c: 288: print("Copyright(C)2017","InnovaTech   |<C");
  3040  0006E0  0ECE               	movlw	low STR_23
  3041  0006E2  0101               	movlb	1	; () banked
  3042  0006E4  6F43               	movwf	print@line1& (0+255),b
  3043  0006E6  0EFE               	movlw	high STR_23
  3044  0006E8  0101               	movlb	1	; () banked
  3045  0006EA  6F44               	movwf	(print@line1+1)& (0+255),b
  3046  0006EC  0ECD               	movlw	low STR_24
  3047  0006EE  0101               	movlb	1	; () banked
  3048  0006F0  6F45               	movwf	print@line2& (0+255),b
  3049  0006F2  0EFF               	movlw	high STR_24
  3050  0006F4  0101               	movlb	1	; () banked
  3051  0006F6  6F46               	movwf	(print@line2+1)& (0+255),b
  3052  0006F8  ECBB  F018         	call	_print	;wreg free
  3053                           
  3054                           ;main.c: 289: wait();
  3055  0006FC  ECFA  F01A         	call	_wait	;wreg free
  3056                           
  3057                           ;main.c: 290: key_release();
  3058  000700  ECCF  F019         	call	_key_release	;wreg free
  3059  000704                     l5880:
  3060  000704  0101               	movlb	1	; () banked
  3061  000706  510E               	movf	_flag4& (0+255),w,b
  3062  000708  0101               	movlb	1	; () banked
  3063  00070A  110F               	iorwf	(_flag4+1)& (0+255),w,b
  3064  00070C  A4D8               	btfss	status,2,c
  3065  00070E  D083               	goto	l5932
  3066  000710  D7C1               	goto	l5858
  3067  000712                     l5882:
  3068                           
  3069                           ; BSR set to: 1
  3070                           ;main.c: 296: else if (pressed == '3'){
  3071  000712  0E33               	movlw	51
  3072  000714  0101               	movlb	1	; () banked
  3073  000716  191B               	xorwf	_pressed& (0+255),w,b
  3074  000718  A4D8               	btfss	status,2,c
  3075  00071A  D073               	goto	l5928
  3076                           
  3077                           ; BSR set to: 1
  3078                           ;main.c: 298: flag4=0;
  3079  00071C  0E00               	movlw	0
  3080  00071E  0101               	movlb	1	; () banked
  3081  000720  6F0F               	movwf	(_flag4+1)& (0+255),b
  3082  000722  0E00               	movlw	0
  3083  000724  D01D               	goto	L6
  3084  000726                     l5886:
  3085                           
  3086                           ; BSR set to: 1
  3087                           ;main.c: 300: lcdclear();
  3088  000726  EC93  F01A         	call	_lcdclear	;wreg free
  3089                           
  3090                           ;main.c: 301: print("Mechanics:   |<C","R. Jose      |D>");
  3091  00072A  0EAB               	movlw	low STR_25
  3092  00072C  0101               	movlb	1	; () banked
  3093  00072E  6F43               	movwf	print@line1& (0+255),b
  3094  000730  0EFF               	movlw	high STR_25
  3095  000732  0101               	movlb	1	; () banked
  3096  000734  6F44               	movwf	(print@line1+1)& (0+255),b
  3097  000736  0E01               	movlw	low STR_26
  3098  000738  0101               	movlb	1	; () banked
  3099  00073A  6F45               	movwf	print@line2& (0+255),b
  3100  00073C  0EFF               	movlw	high STR_26
  3101  00073E  0101               	movlb	1	; () banked
  3102  000740  6F46               	movwf	(print@line2+1)& (0+255),b
  3103  000742  ECBB  F018         	call	_print	;wreg free
  3104                           
  3105                           ;main.c: 302: wait();
  3106  000746  ECFA  F01A         	call	_wait	;wreg free
  3107                           
  3108                           ;main.c: 303: key_release();
  3109  00074A  ECCF  F019         	call	_key_release	;wreg free
  3110                           
  3111                           ;main.c: 304: if (pressed == 'C'){
  3112  00074E  0E43               	movlw	67
  3113  000750  0101               	movlb	1	; () banked
  3114  000752  191B               	xorwf	_pressed& (0+255),w,b
  3115  000754  A4D8               	btfss	status,2,c
  3116  000756  D006               	goto	l5898
  3117                           
  3118                           ; BSR set to: 1
  3119                           ;main.c: 305: flag4 = 1;
  3120  000758  0E00               	movlw	0
  3121  00075A  0101               	movlb	1	; () banked
  3122  00075C  6F0F               	movwf	(_flag4+1)& (0+255),b
  3123  00075E  0E01               	movlw	1
  3124  000760                     L6:
  3125  000760  6F0E               	movwf	_flag4& (0+255),b
  3126                           
  3127                           ;main.c: 306: }
  3128  000762  D048               	goto	l5926
  3129  000764                     l5898:
  3130                           
  3131                           ; BSR set to: 1
  3132                           ;main.c: 307: else if (pressed == 'D'){
  3133  000764  0E44               	movlw	68
  3134  000766  0101               	movlb	1	; () banked
  3135  000768  191B               	xorwf	_pressed& (0+255),w,b
  3136  00076A  A4D8               	btfss	status,2,c
  3137  00076C  D043               	goto	l5926
  3138                           
  3139                           ; BSR set to: 1
  3140                           ;main.c: 308: flag5=0;
  3141  00076E  0E00               	movlw	0
  3142  000770  0101               	movlb	1	; () banked
  3143  000772  6F0D               	movwf	(_flag5+1)& (0+255),b
  3144  000774  0E00               	movlw	0
  3145  000776  D037               	goto	L7
  3146  000778                     l5902:
  3147                           
  3148                           ; BSR set to: 1
  3149                           ;main.c: 310: lcdclear();
  3150  000778  EC93  F01A         	call	_lcdclear	;wreg free
  3151                           
  3152                           ;main.c: 311: print("Circuitry:   |<C","J. Qiu       |D>");
  3153  00077C  0EBC               	movlw	low STR_27
  3154  00077E  0101               	movlb	1	; () banked
  3155  000780  6F43               	movwf	print@line1& (0+255),b
  3156  000782  0EFF               	movlw	high STR_27
  3157  000784  0101               	movlb	1	; () banked
  3158  000786  6F44               	movwf	(print@line1+1)& (0+255),b
  3159  000788  0EF0               	movlw	low STR_28
  3160  00078A  0101               	movlb	1	; () banked
  3161  00078C  6F45               	movwf	print@line2& (0+255),b
  3162  00078E  0EFE               	movlw	high STR_28
  3163  000790  0101               	movlb	1	; () banked
  3164  000792  6F46               	movwf	(print@line2+1)& (0+255),b
  3165  000794  ECBB  F018         	call	_print	;wreg free
  3166                           
  3167                           ;main.c: 312: wait();
  3168  000798  ECFA  F01A         	call	_wait	;wreg free
  3169                           
  3170                           ;main.c: 313: key_release();
  3171  00079C  ECCF  F019         	call	_key_release	;wreg free
  3172                           
  3173                           ;main.c: 314: if (pressed == 'D'){
  3174  0007A0  0E44               	movlw	68
  3175  0007A2  0101               	movlb	1	; () banked
  3176  0007A4  191B               	xorwf	_pressed& (0+255),w,b
  3177  0007A6  A4D8               	btfss	status,2,c
  3178  0007A8  D015               	goto	l5920
  3179                           
  3180                           ; BSR set to: 1
  3181                           ;main.c: 315: lcdclear();
  3182  0007AA  EC93  F01A         	call	_lcdclear	;wreg free
  3183                           
  3184                           ;main.c: 316: print("Programming: |<C","M. Islam        ");
  3185  0007AE  0EDE               	movlw	low STR_29
  3186  0007B0  0101               	movlb	1	; () banked
  3187  0007B2  6F43               	movwf	print@line1& (0+255),b
  3188  0007B4  0EFF               	movlw	high STR_29
  3189  0007B6  0101               	movlb	1	; () banked
  3190  0007B8  6F44               	movwf	(print@line1+1)& (0+255),b
  3191  0007BA  0E68               	movlw	low STR_30
  3192  0007BC  0101               	movlb	1	; () banked
  3193  0007BE  6F45               	movwf	print@line2& (0+255),b
  3194  0007C0  0EFE               	movlw	high STR_30
  3195  0007C2  0101               	movlb	1	; () banked
  3196  0007C4  6F46               	movwf	(print@line2+1)& (0+255),b
  3197  0007C6  ECBB  F018         	call	_print	;wreg free
  3198                           
  3199                           ;main.c: 317: wait();
  3200  0007CA  ECFA  F01A         	call	_wait	;wreg free
  3201                           
  3202                           ;main.c: 318: key_release();
  3203  0007CE  ECCF  F019         	call	_key_release	;wreg free
  3204                           
  3205                           ;main.c: 319: }
  3206  0007D2  D00A               	goto	l5924
  3207  0007D4                     l5920:
  3208                           
  3209                           ;main.c: 320: else if (pressed == 'C'){
  3210  0007D4  0E43               	movlw	67
  3211  0007D6  0101               	movlb	1	; () banked
  3212  0007D8  191B               	xorwf	_pressed& (0+255),w,b
  3213  0007DA  A4D8               	btfss	status,2,c
  3214  0007DC  D005               	goto	l5924
  3215                           
  3216                           ; BSR set to: 1
  3217                           ;main.c: 321: flag5=1;
  3218  0007DE  0E00               	movlw	0
  3219  0007E0  0101               	movlb	1	; () banked
  3220  0007E2  6F0D               	movwf	(_flag5+1)& (0+255),b
  3221  0007E4  0E01               	movlw	1
  3222  0007E6                     L7:
  3223  0007E6  6F0C               	movwf	_flag5& (0+255),b
  3224  0007E8                     l5924:
  3225  0007E8  0101               	movlb	1	; () banked
  3226  0007EA  510C               	movf	_flag5& (0+255),w,b
  3227  0007EC  0101               	movlb	1	; () banked
  3228  0007EE  110D               	iorwf	(_flag5+1)& (0+255),w,b
  3229  0007F0  B4D8               	btfsc	status,2,c
  3230  0007F2  D7C2               	goto	l5902
  3231  0007F4                     l5926:
  3232                           
  3233                           ; BSR set to: 1
  3234  0007F4  0101               	movlb	1	; () banked
  3235  0007F6  510E               	movf	_flag4& (0+255),w,b
  3236  0007F8  0101               	movlb	1	; () banked
  3237  0007FA  110F               	iorwf	(_flag4+1)& (0+255),w,b
  3238  0007FC  A4D8               	btfss	status,2,c
  3239  0007FE  D00B               	goto	l5932
  3240  000800  D792               	goto	l5886
  3241  000802                     l5928:
  3242                           
  3243                           ; BSR set to: 1
  3244                           ;main.c: 328: else if (pressed == 'C'){
  3245  000802  0E43               	movlw	67
  3246  000804  0101               	movlb	1	; () banked
  3247  000806  191B               	xorwf	_pressed& (0+255),w,b
  3248  000808  A4D8               	btfss	status,2,c
  3249  00080A  D005               	goto	l5932
  3250                           
  3251                           ; BSR set to: 1
  3252                           ;main.c: 329: flag3 = 1;
  3253  00080C  0E00               	movlw	0
  3254  00080E  0101               	movlb	1	; () banked
  3255  000810  6F11               	movwf	(_flag3+1)& (0+255),b
  3256  000812  0E01               	movlw	1
  3257  000814                     L4:
  3258  000814  6F10               	movwf	_flag3& (0+255),b
  3259  000816                     l5932:
  3260                           
  3261                           ; BSR set to: 1
  3262  000816  0101               	movlb	1	; () banked
  3263  000818  5110               	movf	_flag3& (0+255),w,b
  3264  00081A  0101               	movlb	1	; () banked
  3265  00081C  1111               	iorwf	(_flag3+1)& (0+255),w,b
  3266  00081E  B4D8               	btfsc	status,2,c
  3267  000820  D71B               	goto	l5846
  3268  000822                     l5934:
  3269  000822  0101               	movlb	1	; () banked
  3270  000824  5116               	movf	_flag& (0+255),w,b
  3271  000826  0101               	movlb	1	; () banked
  3272  000828  1117               	iorwf	(_flag+1)& (0+255),w,b
  3273  00082A  A4D8               	btfss	status,2,c
  3274  00082C  D1CC               	goto	l6104
  3275  00082E  D4E1               	goto	l5716
  3276  000830                     l5936:
  3277                           
  3278                           ; BSR set to: 1
  3279                           ;main.c: 339: if (curr_state == OPERATION){
  3280  000830  0101               	movlb	1	; () banked
  3281  000832  0518               	decf	_curr_state& (0+255),w,b
  3282  000834  A4D8               	btfss	status,2,c
  3283  000836  D004               	goto	l326
  3284                           
  3285                           ; BSR set to: 1
  3286                           ;main.c: 340: closebotlid();
  3287  000838  EC38  F019         	call	_closebotlid	;wreg free
  3288                           
  3289                           ;main.c: 341: opentoplid();
  3290  00083C  ECDB  F018         	call	_opentoplid	;wreg free
  3291  000840                     l326:
  3292                           
  3293                           ;main.c: 342: }
  3294                           ;main.c: 343: readADC(3);
  3295  000840  0E03               	movlw	3
  3296  000842  EC54  F01A         	call	_readADC
  3297                           
  3298                           ;main.c: 358: while ((ADRESH*256 + ADRESL > 0x19))
  3299  000846  D017               	goto	l5950
  3300  000848                     l5940:
  3301                           
  3302                           ;main.c: 359: {
  3303                           ;main.c: 360: readADC(3);
  3304  000848  0E03               	movlw	3
  3305  00084A  EC54  F01A         	call	_readADC
  3306                           
  3307                           ;main.c: 361: RC7 = 1;
  3308  00084E  8E82               	bsf	3970,7,c	;volatile
  3309                           
  3310                           ;main.c: 362: _delay((unsigned long)((2000)*(8000000/4000000.0)));
  3311  000850  0E06               	movlw	6
  3312  000852  0101               	movlb	1	; () banked
  3313  000854  6F47               	movwf	??_main& (0+255),b
  3314  000856  0E30               	movlw	48
  3315  000858                     u7307:
  3316  000858  2EE8               	decfsz	wreg,f,c
  3317  00085A  D7FE               	bra	u7307
  3318  00085C  2F47               	decfsz	??_main& (0+255),f,b
  3319  00085E  D7FC               	bra	u7307
  3320  000860  F000               	nop	
  3321                           
  3322                           ;main.c: 363: RC7 = 0;
  3323  000862  9E82               	bcf	3970,7,c	;volatile
  3324                           
  3325                           ;main.c: 364: _delay((unsigned long)((18000)*(8000000/4000000.0)));
  3326  000864  0E2F               	movlw	47
  3327  000866  0101               	movlb	1	; () banked
  3328  000868  6F47               	movwf	??_main& (0+255),b
  3329  00086A  0EBF               	movlw	191
  3330  00086C                     u7317:
  3331  00086C  2EE8               	decfsz	wreg,f,c
  3332  00086E  D7FE               	bra	u7317
  3333  000870  2F47               	decfsz	??_main& (0+255),f,b
  3334  000872  D7FC               	bra	u7317
  3335  000874  D000               	nop2	
  3336  000876                     l5950:
  3337  000876  50C3               	movf	4035,w,c	;volatile
  3338  000878  CFC4 F147          	movff	4036,??_main	;volatile
  3339  00087C  0101               	movlb	1	; () banked
  3340  00087E  6B48               	clrf	(??_main+1)& (0+255),b
  3341  000880  C147  F148         	movff	??_main,??_main+1
  3342  000884  0101               	movlb	1	; () banked
  3343  000886  6B47               	clrf	??_main& (0+255),b
  3344  000888  0101               	movlb	1	; () banked
  3345  00088A  2747               	addwf	??_main& (0+255),f,b
  3346  00088C  0E00               	movlw	0
  3347  00088E  2348               	addwfc	(??_main+1)& (0+255),f,b
  3348  000890  0101               	movlb	1	; () banked
  3349  000892  BF48               	btfsc	(??_main+1)& (0+255),7,b
  3350  000894  D008               	goto	l5952
  3351  000896  0101               	movlb	1	; () banked
  3352  000898  5148               	movf	(??_main+1)& (0+255),w,b
  3353  00089A  E1D6               	bnz	l5940
  3354  00089C  0E1A               	movlw	26
  3355  00089E  0101               	movlb	1	; () banked
  3356  0008A0  5D47               	subwf	??_main& (0+255),w,b
  3357  0008A2  B0D8               	btfsc	status,0,c
  3358  0008A4  D7D1               	goto	l5940
  3359  0008A6                     l5952:
  3360                           
  3361                           ; BSR set to: 1
  3362                           ;main.c: 365: }
  3363                           ;main.c: 367: unsigned int counter = 0;
  3364  0008A6  0E00               	movlw	0
  3365  0008A8  0101               	movlb	1	; () banked
  3366  0008AA  6F52               	movwf	(main@counter+1)& (0+255),b
  3367  0008AC  0E00               	movlw	0
  3368  0008AE  6F51               	movwf	main@counter& (0+255),b
  3369                           
  3370                           ;main.c: 368: while (RC0 && curr_state==OPERATION){
  3371  0008B0  D085               	goto	l330
  3372  0008B2                     l331:
  3373                           
  3374                           ; BSR set to: 1
  3375                           ;main.c: 373: RB0 = 0;
  3376  0008B2  9081               	bcf	3969,0,c	;volatile
  3377                           
  3378                           ; BSR set to: 1
  3379                           ;main.c: 374: for (unsigned int i = 0; i<31; i++){
  3380  0008B4  0E00               	movlw	0
  3381  0008B6  0101               	movlb	1	; () banked
  3382  0008B8  6F4A               	movwf	(main@i+1)& (0+255),b
  3383  0008BA  0E00               	movlw	0
  3384  0008BC  6F49               	movwf	main@i& (0+255),b
  3385  0008BE                     l5956:
  3386                           
  3387                           ; BSR set to: 1
  3388  0008BE  0101               	movlb	1	; () banked
  3389  0008C0  514A               	movf	(main@i+1)& (0+255),w,b
  3390  0008C2  E11B               	bnz	l5966
  3391  0008C4  0E1F               	movlw	31
  3392  0008C6  0101               	movlb	1	; () banked
  3393  0008C8  5D49               	subwf	main@i& (0+255),w,b
  3394  0008CA  B0D8               	btfsc	status,0,c
  3395  0008CC  D016               	goto	l5966
  3396                           
  3397                           ; BSR set to: 1
  3398                           ;main.c: 375: PORTEbits.RE0 = 1;
  3399                           
  3400                           ; BSR set to: 1
  3401  0008CE  8084               	bsf	3972,0,c	;volatile
  3402                           
  3403                           ; BSR set to: 1
  3404                           ;main.c: 376: _delay((unsigned long)((18300)*(8000000/4000000.0)));
  3405  0008D0  0E30               	movlw	48
  3406  0008D2  0101               	movlb	1	; () banked
  3407  0008D4  6F47               	movwf	??_main& (0+255),b
  3408  0008D6  0E87               	movlw	135
  3409  0008D8                     u7327:
  3410  0008D8  2EE8               	decfsz	wreg,f,c
  3411  0008DA  D7FE               	bra	u7327
  3412  0008DC  2F47               	decfsz	??_main& (0+255),f,b
  3413  0008DE  D7FC               	bra	u7327
  3414                           
  3415                           ;main.c: 377: PORTEbits.RE0 = 0;
  3416  0008E0  9084               	bcf	3972,0,c	;volatile
  3417                           
  3418                           ;main.c: 378: _delay((unsigned long)((1700)*(8000000/4000000.0)));
  3419  0008E2  0E05               	movlw	5
  3420  0008E4  0101               	movlb	1	; () banked
  3421  0008E6  6F47               	movwf	??_main& (0+255),b
  3422  0008E8  0E69               	movlw	105
  3423  0008EA                     u7337:
  3424  0008EA  2EE8               	decfsz	wreg,f,c
  3425  0008EC  D7FE               	bra	u7337
  3426  0008EE  2F47               	decfsz	??_main& (0+255),f,b
  3427  0008F0  D7FC               	bra	u7337
  3428  0008F2  0101               	movlb	1	; () banked
  3429  0008F4  4B49               	infsnz	main@i& (0+255),f,b
  3430  0008F6  2B4A               	incf	(main@i+1)& (0+255),f,b
  3431  0008F8  D7E2               	goto	l5956
  3432  0008FA                     l5966:
  3433                           
  3434                           ; BSR set to: 1
  3435                           ;main.c: 380: }
  3436                           ;main.c: 382: _delay((unsigned long)((3000)*(8000000/4000.0)));
  3437  0008FA  0E1F               	movlw	31
  3438  0008FC  0101               	movlb	1	; () banked
  3439  0008FE  6F48               	movwf	(??_main+1)& (0+255),b
  3440  000900  0E71               	movlw	113
  3441  000902  0101               	movlb	1	; () banked
  3442  000904  6F47               	movwf	??_main& (0+255),b
  3443  000906  0E1E               	movlw	30
  3444  000908                     u7347:
  3445  000908  2EE8               	decfsz	wreg,f,c
  3446  00090A  D7FE               	bra	u7347
  3447  00090C  2F47               	decfsz	??_main& (0+255),f,b
  3448  00090E  D7FC               	bra	u7347
  3449  000910  2F48               	decfsz	(??_main+1)& (0+255),f,b
  3450  000912  D7FA               	bra	u7347
  3451  000914  F000               	nop	
  3452                           
  3453                           ;main.c: 383: counter++;
  3454  000916  0101               	movlb	1	; () banked
  3455  000918  4B51               	infsnz	main@counter& (0+255),f,b
  3456  00091A  2B52               	incf	(main@counter+1)& (0+255),f,b
  3457                           
  3458                           ;main.c: 384: if ((counter == 5) && RC0){
  3459  00091C  0E05               	movlw	5
  3460  00091E  0101               	movlb	1	; () banked
  3461  000920  1951               	xorwf	main@counter& (0+255),w,b
  3462  000922  0101               	movlb	1	; () banked
  3463  000924  1152               	iorwf	(main@counter+1)& (0+255),w,b
  3464  000926  B4D8               	btfsc	status,2,c
  3465                           
  3466                           ; BSR set to: 1
  3467  000928  A082               	btfss	3970,0,c	;volatile
  3468  00092A  D00A               	goto	l5974
  3469                           
  3470                           ; BSR set to: 1
  3471                           ;main.c: 385: openbotlid();
  3472  00092C  ECFA  F018         	call	_openbotlid	;wreg free
  3473                           
  3474                           ;main.c: 386: delay(1);
  3475  000930  0E00               	movlw	0
  3476  000932  6E36               	movwf	delay@seconds+1,c
  3477  000934  0E01               	movlw	1
  3478  000936  6E35               	movwf	delay@seconds,c
  3479  000938  EC35  F018         	call	_delay	;wreg free
  3480                           
  3481                           ;main.c: 387: closebotlid();
  3482  00093C  EC38  F019         	call	_closebotlid	;wreg free
  3483  000940                     l5974:
  3484                           
  3485                           ;main.c: 388: }
  3486                           ;main.c: 389: if ((yop_a>=1) && (yop_b>=1) && (eska_a>=1) && (eska_b>=1) && (counter==10
      +                          )){
  3487  000940  0101               	movlb	1	; () banked
  3488  000942  BF0B               	btfsc	(_yop_a+1)& (0+255),7,b
  3489  000944  D03B               	goto	l330
  3490  000946  0101               	movlb	1	; () banked
  3491  000948  510B               	movf	(_yop_a+1)& (0+255),w,b
  3492  00094A  E104               	bnz	u6810
  3493  00094C  0101               	movlb	1	; () banked
  3494  00094E  050A               	decf	_yop_a& (0+255),w,b
  3495  000950  A0D8               	btfss	status,0,c
  3496  000952  D034               	goto	l330
  3497  000954                     u6810:
  3498                           
  3499                           ; BSR set to: 1
  3500  000954  0101               	movlb	1	; () banked
  3501  000956  BF09               	btfsc	(_yop_b+1)& (0+255),7,b
  3502  000958  D031               	goto	l330
  3503  00095A  0101               	movlb	1	; () banked
  3504  00095C  5109               	movf	(_yop_b+1)& (0+255),w,b
  3505  00095E  E104               	bnz	u6820
  3506  000960  0101               	movlb	1	; () banked
  3507  000962  0508               	decf	_yop_b& (0+255),w,b
  3508  000964  A0D8               	btfss	status,0,c
  3509  000966  D02A               	goto	l330
  3510  000968                     u6820:
  3511                           
  3512                           ; BSR set to: 1
  3513  000968  0101               	movlb	1	; () banked
  3514  00096A  BF07               	btfsc	(_eska_a+1)& (0+255),7,b
  3515  00096C  D027               	goto	l330
  3516  00096E  0101               	movlb	1	; () banked
  3517  000970  5107               	movf	(_eska_a+1)& (0+255),w,b
  3518  000972  E104               	bnz	u6830
  3519  000974  0101               	movlb	1	; () banked
  3520  000976  0506               	decf	_eska_a& (0+255),w,b
  3521  000978  A0D8               	btfss	status,0,c
  3522  00097A  D020               	goto	l330
  3523  00097C                     u6830:
  3524                           
  3525                           ; BSR set to: 1
  3526  00097C  0101               	movlb	1	; () banked
  3527  00097E  BF05               	btfsc	(_eska_b+1)& (0+255),7,b
  3528  000980  D01D               	goto	l330
  3529  000982  0101               	movlb	1	; () banked
  3530  000984  5105               	movf	(_eska_b+1)& (0+255),w,b
  3531  000986  E104               	bnz	u6840
  3532  000988  0101               	movlb	1	; () banked
  3533  00098A  0504               	decf	_eska_b& (0+255),w,b
  3534  00098C  A0D8               	btfss	status,0,c
  3535  00098E  D016               	goto	l330
  3536  000990                     u6840:
  3537                           
  3538                           ; BSR set to: 1
  3539  000990  0E0A               	movlw	10
  3540  000992  0101               	movlb	1	; () banked
  3541  000994  1951               	xorwf	main@counter& (0+255),w,b
  3542  000996  0101               	movlb	1	; () banked
  3543  000998  1152               	iorwf	(main@counter+1)& (0+255),w,b
  3544  00099A  A4D8               	btfss	status,2,c
  3545  00099C  D00F               	goto	l330
  3546                           
  3547                           ; BSR set to: 1
  3548                           ;main.c: 390: update_time(end_time);
  3549  00099E  0E1C               	movlw	low _end_time
  3550  0009A0  6E38               	movwf	update_time@time,c
  3551  0009A2  0E01               	movlw	high _end_time
  3552  0009A4  6E39               	movwf	update_time@time+1,c
  3553  0009A6  EC7E  F016         	call	_update_time	;wreg free
  3554                           
  3555                           ;main.c: 391: curr_state = END;
  3556  0009AA  0E02               	movlw	2
  3557  0009AC  0101               	movlb	1	; () banked
  3558  0009AE  6F18               	movwf	_curr_state& (0+255),b
  3559                           
  3560                           ; BSR set to: 1
  3561                           ;main.c: 392: counter = 0;
  3562  0009B0  0E00               	movlw	0
  3563  0009B2  0101               	movlb	1	; () banked
  3564  0009B4  6F52               	movwf	(main@counter+1)& (0+255),b
  3565  0009B6  0E00               	movlw	0
  3566  0009B8  6F51               	movwf	main@counter& (0+255),b
  3567                           
  3568                           ;main.c: 393: break;
  3569  0009BA  D006               	goto	l5992
  3570  0009BC                     l330:
  3571                           
  3572                           ; BSR set to: 1
  3573  0009BC  A082               	btfss	3970,0,c	;volatile
  3574  0009BE  D004               	goto	l5992
  3575                           
  3576                           ; BSR set to: 1
  3577  0009C0  0101               	movlb	1	; () banked
  3578  0009C2  0518               	decf	_curr_state& (0+255),w,b
  3579  0009C4  B4D8               	btfsc	status,2,c
  3580  0009C6  D775               	goto	l331
  3581  0009C8                     l5992:
  3582                           
  3583                           ; BSR set to: 1
  3584                           ;main.c: 394: }
  3585                           ;main.c: 397: }
  3586                           ;main.c: 399: if (curr_state == OPERATION){
  3587  0009C8  0101               	movlb	1	; () banked
  3588  0009CA  0518               	decf	_curr_state& (0+255),w,b
  3589  0009CC  B4D8               	btfsc	status,2,c
  3590                           
  3591                           ; BSR set to: 1
  3592                           ;main.c: 400: closetoplid();
  3593  0009CE  EC19  F019         	call	_closetoplid	;wreg free
  3594                           
  3595                           ;main.c: 401: }
  3596                           ;main.c: 405: readADC(2);
  3597  0009D2  0E02               	movlw	2
  3598  0009D4  EC54  F01A         	call	_readADC
  3599                           
  3600                           ;main.c: 408: if (RC6){
  3601  0009D8  AC82               	btfss	3970,6,c	;volatile
  3602  0009DA  D002               	goto	l340
  3603                           
  3604                           ;main.c: 409: brand = YOP;
  3605  0009DC  0E00               	movlw	0
  3606  0009DE  D003               	goto	L8
  3607  0009E0                     l340:
  3608                           
  3609                           ;main.c: 411: else if (!RC6){
  3610  0009E0  BC82               	btfsc	3970,6,c	;volatile
  3611  0009E2  D003               	goto	l341
  3612                           
  3613                           ;main.c: 412: brand = ESKA;
  3614  0009E4  0E01               	movlw	1
  3615  0009E6                     L8:
  3616  0009E6  0101               	movlb	1	; () banked
  3617  0009E8  6F1A               	movwf	_brand& (0+255),b
  3618  0009EA                     l341:
  3619                           
  3620                           ;main.c: 413: }
  3621                           ;main.c: 415: if (brand == YOP && RA4 == 0 && (ADRESL < 0x14)){
  3622  0009EA  0101               	movlb	1	; () banked
  3623  0009EC  511A               	movf	_brand& (0+255),w,b
  3624  0009EE  0101               	movlb	1	; () banked
  3625  0009F0  B4D8               	btfsc	status,2,c
  3626                           
  3627                           ; BSR set to: 1
  3628  0009F2  B880               	btfsc	3968,4,c	;volatile
  3629  0009F4  D004               	goto	l6008
  3630                           
  3631                           ; BSR set to: 1
  3632  0009F6  0E14               	movlw	20
  3633  0009F8  60C3               	cpfslt	4035,c	;volatile
  3634  0009FA  D001               	goto	l6008
  3635  0009FC  D009               	goto	l6014
  3636  0009FE                     l6008:
  3637                           
  3638                           ; BSR set to: 1
  3639                           ;main.c: 419: else if (brand == ESKA && (RA4 == 0 || (ADRESL < 0x14))){
  3640  0009FE  0101               	movlb	1	; () banked
  3641  000A00  051A               	decf	_brand& (0+255),w,b
  3642  000A02  A4D8               	btfss	status,2,c
  3643  000A04  D007               	goto	l6016
  3644                           
  3645                           ; BSR set to: 1
  3646  000A06  A880               	btfss	3968,4,c	;volatile
  3647  000A08  D003               	goto	l6014
  3648                           
  3649                           ; BSR set to: 1
  3650  000A0A  0E14               	movlw	20
  3651  000A0C  60C3               	cpfslt	4035,c	;volatile
  3652  000A0E  D002               	goto	l6016
  3653  000A10                     l6014:
  3654                           
  3655                           ; BSR set to: 1
  3656                           ;main.c: 420: type = CAP;
  3657  000A10  0E02               	movlw	2
  3658  000A12  D001               	goto	L9
  3659  000A14                     l6016:
  3660                           
  3661                           ; BSR set to: 1
  3662                           ;main.c: 422: else{
  3663                           ;main.c: 423: type = NOCAP;
  3664  000A14  0E03               	movlw	3
  3665  000A16                     L9:
  3666  000A16  0101               	movlb	1	; () banked
  3667  000A18  6F19               	movwf	_type& (0+255),b
  3668                           
  3669                           ; BSR set to: 1
  3670                           ;main.c: 424: }
  3671                           ;main.c: 432: if (brand == ESKA && type == CAP && curr_state == OPERATION){
  3672                           
  3673                           ; BSR set to: 1
  3674                           
  3675                           ; BSR set to: 1
  3676  000A1A  0101               	movlb	1	; () banked
  3677  000A1C  051A               	decf	_brand& (0+255),w,b
  3678  000A1E  A4D8               	btfss	status,2,c
  3679  000A20  D00F               	goto	l6028
  3680                           
  3681                           ; BSR set to: 1
  3682  000A22  0E02               	movlw	2
  3683  000A24  0101               	movlb	1	; () banked
  3684  000A26  1919               	xorwf	_type& (0+255),w,b
  3685  000A28  A4D8               	btfss	status,2,c
  3686  000A2A  D00A               	goto	l6028
  3687                           
  3688                           ; BSR set to: 1
  3689  000A2C  0101               	movlb	1	; () banked
  3690  000A2E  0518               	decf	_curr_state& (0+255),w,b
  3691  000A30  A4D8               	btfss	status,2,c
  3692  000A32  D006               	goto	l6028
  3693                           
  3694                           ; BSR set to: 1
  3695                           ;main.c: 433: openbotlid();
  3696  000A34  ECFA  F018         	call	_openbotlid	;wreg free
  3697                           
  3698                           ;main.c: 435: eska_a++;
  3699  000A38  0101               	movlb	1	; () banked
  3700  000A3A  4B06               	infsnz	_eska_a& (0+255),f,b
  3701  000A3C  2B07               	incf	(_eska_a+1)& (0+255),f,b
  3702                           
  3703                           ;main.c: 436: }
  3704  000A3E  D0A9               	goto	l6094
  3705  000A40                     l6028:
  3706                           
  3707                           ; BSR set to: 1
  3708                           ;main.c: 437: else if (brand == YOP && type == CAP && curr_state == OPERATION){
  3709  000A40  0101               	movlb	1	; () banked
  3710  000A42  511A               	movf	_brand& (0+255),w,b
  3711  000A44  0101               	movlb	1	; () banked
  3712  000A46  A4D8               	btfss	status,2,c
  3713  000A48  D034               	goto	l6050
  3714                           
  3715                           ; BSR set to: 1
  3716  000A4A  0E02               	movlw	2
  3717  000A4C  0101               	movlb	1	; () banked
  3718  000A4E  1919               	xorwf	_type& (0+255),w,b
  3719  000A50  A4D8               	btfss	status,2,c
  3720  000A52  D02F               	goto	l6050
  3721                           
  3722                           ; BSR set to: 1
  3723  000A54  0101               	movlb	1	; () banked
  3724  000A56  0518               	decf	_curr_state& (0+255),w,b
  3725  000A58  A4D8               	btfss	status,2,c
  3726  000A5A  D02B               	goto	l6050
  3727                           
  3728                           ; BSR set to: 1
  3729                           ;main.c: 439: unsigned int i;
  3730                           ;main.c: 440: for(i=0;i<5;i++)
  3731  000A5C  0E00               	movlw	0
  3732  000A5E  0101               	movlb	1	; () banked
  3733  000A60  6F4C               	movwf	(main@i_782+1)& (0+255),b
  3734  000A62  0E00               	movlw	0
  3735  000A64  6F4B               	movwf	main@i_782& (0+255),b
  3736  000A66                     l6036:
  3737                           
  3738                           ; BSR set to: 1
  3739  000A66  0101               	movlb	1	; () banked
  3740  000A68  514C               	movf	(main@i_782+1)& (0+255),w,b
  3741  000A6A  E11D               	bnz	l6046
  3742  000A6C  0E05               	movlw	5
  3743  000A6E  0101               	movlb	1	; () banked
  3744  000A70  5D4B               	subwf	main@i_782& (0+255),w,b
  3745  000A72  B0D8               	btfsc	status,0,c
  3746  000A74  D018               	goto	l6046
  3747                           
  3748                           ; BSR set to: 1
  3749                           ;main.c: 441: {
  3750                           ;main.c: 443: RC7 = 1;
  3751                           
  3752                           ; BSR set to: 1
  3753  000A76  8E82               	bsf	3970,7,c	;volatile
  3754                           
  3755                           ; BSR set to: 1
  3756                           ;main.c: 444: _delay((unsigned long)((2300)*(8000000/4000000.0)));
  3757  000A78  0E06               	movlw	6
  3758  000A7A  0101               	movlb	1	; () banked
  3759  000A7C  6F47               	movwf	??_main& (0+255),b
  3760  000A7E  0EF8               	movlw	248
  3761  000A80                     u7357:
  3762  000A80  2EE8               	decfsz	wreg,f,c
  3763  000A82  D7FE               	bra	u7357
  3764  000A84  2F47               	decfsz	??_main& (0+255),f,b
  3765  000A86  D7FC               	bra	u7357
  3766  000A88  F000               	nop	
  3767                           
  3768                           ;main.c: 445: RC7 = 0;
  3769  000A8A  9E82               	bcf	3970,7,c	;volatile
  3770                           
  3771                           ;main.c: 446: _delay((unsigned long)((17700)*(8000000/4000000.0)));
  3772  000A8C  0E2E               	movlw	46
  3773  000A8E  0101               	movlb	1	; () banked
  3774  000A90  6F47               	movwf	??_main& (0+255),b
  3775  000A92  0EF8               	movlw	248
  3776  000A94                     u7367:
  3777  000A94  2EE8               	decfsz	wreg,f,c
  3778  000A96  D7FE               	bra	u7367
  3779  000A98  2F47               	decfsz	??_main& (0+255),f,b
  3780  000A9A  D7FC               	bra	u7367
  3781  000A9C  F000               	nop	
  3782  000A9E  0101               	movlb	1	; () banked
  3783  000AA0  4B4B               	infsnz	main@i_782& (0+255),f,b
  3784  000AA2  2B4C               	incf	(main@i_782+1)& (0+255),f,b
  3785  000AA4  D7E0               	goto	l6036
  3786  000AA6                     l6046:
  3787                           
  3788                           ; BSR set to: 1
  3789                           ;main.c: 447: }
  3790                           ;main.c: 448: openbotlid();
  3791  000AA6  ECFA  F018         	call	_openbotlid	;wreg free
  3792                           
  3793                           ;main.c: 451: yop_a++;
  3794  000AAA  0101               	movlb	1	; () banked
  3795  000AAC  4B0A               	infsnz	_yop_a& (0+255),f,b
  3796  000AAE  2B0B               	incf	(_yop_a+1)& (0+255),f,b
  3797                           
  3798                           ;main.c: 452: }
  3799  000AB0  D070               	goto	l6094
  3800  000AB2                     l6050:
  3801                           
  3802                           ; BSR set to: 1
  3803                           ;main.c: 454: else if (brand == YOP && type == NOCAP && curr_state == OPERATION){
  3804  000AB2  0101               	movlb	1	; () banked
  3805  000AB4  511A               	movf	_brand& (0+255),w,b
  3806  000AB6  0101               	movlb	1	; () banked
  3807  000AB8  A4D8               	btfss	status,2,c
  3808  000ABA  D034               	goto	l6072
  3809                           
  3810                           ; BSR set to: 1
  3811  000ABC  0E03               	movlw	3
  3812  000ABE  0101               	movlb	1	; () banked
  3813  000AC0  1919               	xorwf	_type& (0+255),w,b
  3814  000AC2  A4D8               	btfss	status,2,c
  3815  000AC4  D02F               	goto	l6072
  3816                           
  3817                           ; BSR set to: 1
  3818  000AC6  0101               	movlb	1	; () banked
  3819  000AC8  0518               	decf	_curr_state& (0+255),w,b
  3820  000ACA  A4D8               	btfss	status,2,c
  3821  000ACC  D02B               	goto	l6072
  3822                           
  3823                           ; BSR set to: 1
  3824                           ;main.c: 456: unsigned int i;
  3825                           ;main.c: 457: for(i=0;i<13;i++)
  3826  000ACE  0E00               	movlw	0
  3827  000AD0  0101               	movlb	1	; () banked
  3828  000AD2  6F4E               	movwf	(main@i_783+1)& (0+255),b
  3829  000AD4  0E00               	movlw	0
  3830  000AD6  6F4D               	movwf	main@i_783& (0+255),b
  3831  000AD8                     l6058:
  3832                           
  3833                           ; BSR set to: 1
  3834  000AD8  0101               	movlb	1	; () banked
  3835  000ADA  514E               	movf	(main@i_783+1)& (0+255),w,b
  3836  000ADC  E11D               	bnz	l6068
  3837  000ADE  0E0D               	movlw	13
  3838  000AE0  0101               	movlb	1	; () banked
  3839  000AE2  5D4D               	subwf	main@i_783& (0+255),w,b
  3840  000AE4  B0D8               	btfsc	status,0,c
  3841  000AE6  D018               	goto	l6068
  3842                           
  3843                           ; BSR set to: 1
  3844                           ;main.c: 458: {
  3845                           ;main.c: 460: RC7 = 1;
  3846                           
  3847                           ; BSR set to: 1
  3848  000AE8  8E82               	bsf	3970,7,c	;volatile
  3849                           
  3850                           ; BSR set to: 1
  3851                           ;main.c: 461: _delay((unsigned long)((2300)*(8000000/4000000.0)));
  3852  000AEA  0E06               	movlw	6
  3853  000AEC  0101               	movlb	1	; () banked
  3854  000AEE  6F47               	movwf	??_main& (0+255),b
  3855  000AF0  0EF8               	movlw	248
  3856  000AF2                     u7377:
  3857  000AF2  2EE8               	decfsz	wreg,f,c
  3858  000AF4  D7FE               	bra	u7377
  3859  000AF6  2F47               	decfsz	??_main& (0+255),f,b
  3860  000AF8  D7FC               	bra	u7377
  3861  000AFA  F000               	nop	
  3862                           
  3863                           ;main.c: 462: RC7 = 0;
  3864  000AFC  9E82               	bcf	3970,7,c	;volatile
  3865                           
  3866                           ;main.c: 463: _delay((unsigned long)((17700)*(8000000/4000000.0)));
  3867  000AFE  0E2E               	movlw	46
  3868  000B00  0101               	movlb	1	; () banked
  3869  000B02  6F47               	movwf	??_main& (0+255),b
  3870  000B04  0EF8               	movlw	248
  3871  000B06                     u7387:
  3872  000B06  2EE8               	decfsz	wreg,f,c
  3873  000B08  D7FE               	bra	u7387
  3874  000B0A  2F47               	decfsz	??_main& (0+255),f,b
  3875  000B0C  D7FC               	bra	u7387
  3876  000B0E  F000               	nop	
  3877  000B10  0101               	movlb	1	; () banked
  3878  000B12  4B4D               	infsnz	main@i_783& (0+255),f,b
  3879  000B14  2B4E               	incf	(main@i_783+1)& (0+255),f,b
  3880  000B16  D7E0               	goto	l6058
  3881  000B18                     l6068:
  3882                           
  3883                           ; BSR set to: 1
  3884                           ;main.c: 464: }
  3885                           ;main.c: 465: openbotlid();
  3886  000B18  ECFA  F018         	call	_openbotlid	;wreg free
  3887                           
  3888                           ;main.c: 468: yop_b++;
  3889  000B1C  0101               	movlb	1	; () banked
  3890  000B1E  4B08               	infsnz	_yop_b& (0+255),f,b
  3891  000B20  2B09               	incf	(_yop_b+1)& (0+255),f,b
  3892                           
  3893                           ;main.c: 469: }
  3894  000B22  D037               	goto	l6094
  3895  000B24                     l6072:
  3896                           
  3897                           ; BSR set to: 1
  3898                           ;main.c: 471: else if (brand == ESKA && type == NOCAP && curr_state == OPERATION){
  3899  000B24  0101               	movlb	1	; () banked
  3900  000B26  051A               	decf	_brand& (0+255),w,b
  3901  000B28  A4D8               	btfss	status,2,c
  3902  000B2A  D033               	goto	l6094
  3903                           
  3904                           ; BSR set to: 1
  3905  000B2C  0E03               	movlw	3
  3906  000B2E  0101               	movlb	1	; () banked
  3907  000B30  1919               	xorwf	_type& (0+255),w,b
  3908  000B32  A4D8               	btfss	status,2,c
  3909  000B34  D02E               	goto	l6094
  3910                           
  3911                           ; BSR set to: 1
  3912  000B36  0101               	movlb	1	; () banked
  3913  000B38  0518               	decf	_curr_state& (0+255),w,b
  3914  000B3A  A4D8               	btfss	status,2,c
  3915  000B3C  D02A               	goto	l6094
  3916                           
  3917                           ; BSR set to: 1
  3918                           ;main.c: 473: unsigned int i;
  3919                           ;main.c: 474: for(i=0;i<21;i++)
  3920  000B3E  0E00               	movlw	0
  3921  000B40  0101               	movlb	1	; () banked
  3922  000B42  6F50               	movwf	(main@i_784+1)& (0+255),b
  3923  000B44  0E00               	movlw	0
  3924  000B46  6F4F               	movwf	main@i_784& (0+255),b
  3925  000B48                     l6080:
  3926                           
  3927                           ; BSR set to: 1
  3928  000B48  0101               	movlb	1	; () banked
  3929  000B4A  5150               	movf	(main@i_784+1)& (0+255),w,b
  3930  000B4C  E11D               	bnz	l6090
  3931  000B4E  0E15               	movlw	21
  3932  000B50  0101               	movlb	1	; () banked
  3933  000B52  5D4F               	subwf	main@i_784& (0+255),w,b
  3934  000B54  B0D8               	btfsc	status,0,c
  3935  000B56  D018               	goto	l6090
  3936                           
  3937                           ; BSR set to: 1
  3938                           ;main.c: 475: {
  3939                           ;main.c: 477: RC7 = 1;
  3940                           
  3941                           ; BSR set to: 1
  3942  000B58  8E82               	bsf	3970,7,c	;volatile
  3943                           
  3944                           ; BSR set to: 1
  3945                           ;main.c: 478: _delay((unsigned long)((2300)*(8000000/4000000.0)));
  3946  000B5A  0E06               	movlw	6
  3947  000B5C  0101               	movlb	1	; () banked
  3948  000B5E  6F47               	movwf	??_main& (0+255),b
  3949  000B60  0EF8               	movlw	248
  3950  000B62                     u7397:
  3951  000B62  2EE8               	decfsz	wreg,f,c
  3952  000B64  D7FE               	bra	u7397
  3953  000B66  2F47               	decfsz	??_main& (0+255),f,b
  3954  000B68  D7FC               	bra	u7397
  3955  000B6A  F000               	nop	
  3956                           
  3957                           ;main.c: 479: RC7 = 0;
  3958  000B6C  9E82               	bcf	3970,7,c	;volatile
  3959                           
  3960                           ;main.c: 480: _delay((unsigned long)((17700)*(8000000/4000000.0)));
  3961  000B6E  0E2E               	movlw	46
  3962  000B70  0101               	movlb	1	; () banked
  3963  000B72  6F47               	movwf	??_main& (0+255),b
  3964  000B74  0EF8               	movlw	248
  3965  000B76                     u7407:
  3966  000B76  2EE8               	decfsz	wreg,f,c
  3967  000B78  D7FE               	bra	u7407
  3968  000B7A  2F47               	decfsz	??_main& (0+255),f,b
  3969  000B7C  D7FC               	bra	u7407
  3970  000B7E  F000               	nop	
  3971  000B80  0101               	movlb	1	; () banked
  3972  000B82  4B4F               	infsnz	main@i_784& (0+255),f,b
  3973  000B84  2B50               	incf	(main@i_784+1)& (0+255),f,b
  3974  000B86  D7E0               	goto	l6080
  3975  000B88                     l6090:
  3976                           
  3977                           ; BSR set to: 1
  3978                           ;main.c: 481: }
  3979                           ;main.c: 482: openbotlid();
  3980  000B88  ECFA  F018         	call	_openbotlid	;wreg free
  3981                           
  3982                           ;main.c: 485: eska_b++;
  3983  000B8C  0101               	movlb	1	; () banked
  3984  000B8E  4B04               	infsnz	_eska_b& (0+255),f,b
  3985  000B90  2B05               	incf	(_eska_b+1)& (0+255),f,b
  3986  000B92                     l6094:
  3987                           
  3988                           ; BSR set to: 1
  3989                           ;main.c: 486: }
  3990                           ;main.c: 489: totalbot++;
  3991  000B92  0101               	movlb	1	; () banked
  3992  000B94  4B02               	infsnz	_totalbot& (0+255),f,b
  3993  000B96  2B03               	incf	(_totalbot+1)& (0+255),f,b
  3994                           
  3995                           ; BSR set to: 1
  3996                           ;main.c: 490: if (totalbot == 10){
  3997  000B98  0E0A               	movlw	10
  3998  000B9A  0101               	movlb	1	; () banked
  3999  000B9C  1902               	xorwf	_totalbot& (0+255),w,b
  4000  000B9E  0101               	movlb	1	; () banked
  4001  000BA0  1103               	iorwf	(_totalbot+1)& (0+255),w,b
  4002  000BA2  A4D8               	btfss	status,2,c
  4003  000BA4  D00A               	goto	l6102
  4004                           
  4005                           ; BSR set to: 1
  4006                           ;main.c: 491: update_time(end_time);
  4007  000BA6  0E1C               	movlw	low _end_time
  4008  000BA8  6E38               	movwf	update_time@time,c
  4009  000BAA  0E01               	movlw	high _end_time
  4010  000BAC  6E39               	movwf	update_time@time+1,c
  4011  000BAE  EC7E  F016         	call	_update_time	;wreg free
  4012                           
  4013                           ;main.c: 492: curr_state = END;
  4014  000BB2  0E02               	movlw	2
  4015  000BB4  0101               	movlb	1	; () banked
  4016  000BB6  6F18               	movwf	_curr_state& (0+255),b
  4017                           
  4018                           ;main.c: 493: break;
  4019  000BB8  D02E               	goto	l6110
  4020  000BBA                     l6102:
  4021                           
  4022                           ; BSR set to: 1
  4023                           ;main.c: 494: }
  4024                           ;main.c: 496: update_time(end_time);
  4025  000BBA  0E1C               	movlw	low _end_time
  4026  000BBC  6E38               	movwf	update_time@time,c
  4027  000BBE  0E01               	movlw	high _end_time
  4028  000BC0  6E39               	movwf	update_time@time+1,c
  4029  000BC2  EC7E  F016         	call	_update_time	;wreg free
  4030  000BC6                     l6104:
  4031  000BC6  0E23               	movlw	low _start_time
  4032  000BC8  0100               	movlb	0	; () banked
  4033  000BCA  6FDE               	movwf	time_diff@time1& (0+255),b
  4034  000BCC  0E01               	movlw	high _start_time
  4035  000BCE  0100               	movlb	0	; () banked
  4036  000BD0  6FDF               	movwf	(time_diff@time1+1)& (0+255),b
  4037  000BD2  0E1C               	movlw	low _end_time
  4038  000BD4  0100               	movlb	0	; () banked
  4039  000BD6  6FE0               	movwf	time_diff@time2& (0+255),b
  4040  000BD8  0E01               	movlw	high _end_time
  4041  000BDA  0100               	movlb	0	; () banked
  4042  000BDC  6FE1               	movwf	(time_diff@time2+1)& (0+255),b
  4043  000BDE  ECD3  F00D         	call	_time_diff	;wreg free
  4044  000BE2  0100               	movlb	0	; () banked
  4045  000BE4  BFDF               	btfsc	(?_time_diff+1)& (0+255),7,b
  4046  000BE6  D013               	goto	l6108
  4047  000BE8  0100               	movlb	0	; () banked
  4048  000BEA  51DF               	movf	(?_time_diff+1)& (0+255),w,b
  4049  000BEC  E105               	bnz	u7160
  4050  000BEE  0EB4               	movlw	180
  4051  000BF0  0100               	movlb	0	; () banked
  4052  000BF2  5DDE               	subwf	?_time_diff& (0+255),w,b
  4053  000BF4  A0D8               	btfss	status,0,c
  4054  000BF6  D00B               	goto	l6108
  4055  000BF8                     u7160:
  4056                           
  4057                           ; BSR set to: 0
  4058  000BF8  0101               	movlb	1	; () banked
  4059  000BFA  BF03               	btfsc	(_totalbot+1)& (0+255),7,b
  4060  000BFC  D008               	goto	l6108
  4061  000BFE  0101               	movlb	1	; () banked
  4062  000C00  5103               	movf	(_totalbot+1)& (0+255),w,b
  4063  000C02  E109               	bnz	l6110
  4064  000C04  0E0A               	movlw	10
  4065  000C06  0101               	movlb	1	; () banked
  4066  000C08  5D02               	subwf	_totalbot& (0+255),w,b
  4067  000C0A  B0D8               	btfsc	status,0,c
  4068  000C0C  D004               	goto	l6110
  4069  000C0E                     l6108:
  4070  000C0E  0101               	movlb	1	; () banked
  4071  000C10  0518               	decf	_curr_state& (0+255),w,b
  4072  000C12  B4D8               	btfsc	status,2,c
  4073  000C14  D60D               	goto	l5936
  4074  000C16                     l6110:
  4075                           
  4076                           ; BSR set to: 1
  4077                           ;main.c: 497: }
  4078                           ;main.c: 499: if (curr_state != OPERATION){
  4079  000C16  0101               	movlb	1	; () banked
  4080  000C18  0518               	decf	_curr_state& (0+255),w,b
  4081  000C1A  B4D8               	btfsc	status,2,c
  4082  000C1C  D007               	goto	l6114
  4083                           
  4084                           ; BSR set to: 1
  4085                           ;main.c: 500: update_time(end_time);
  4086  000C1E  0E1C               	movlw	low _end_time
  4087  000C20  6E38               	movwf	update_time@time,c
  4088  000C22  0E01               	movlw	high _end_time
  4089  000C24  6E39               	movwf	update_time@time+1,c
  4090  000C26  EC7E  F016         	call	_update_time	;wreg free
  4091                           
  4092                           ;main.c: 501: break;
  4093  000C2A  D18F               	goto	l6196
  4094  000C2C                     l6114:
  4095                           
  4096                           ;main.c: 502: }
  4097                           ;main.c: 503: update_time(end_time);
  4098  000C2C  0E1C               	movlw	low _end_time
  4099  000C2E  6E38               	movwf	update_time@time,c
  4100  000C30  0E01               	movlw	high _end_time
  4101  000C32  6E39               	movwf	update_time@time+1,c
  4102  000C34  EC7E  F016         	call	_update_time	;wreg free
  4103                           
  4104                           ;main.c: 504: curr_state = END;
  4105  000C38  0E02               	movlw	2
  4106  000C3A  D01E               	goto	L10
  4107  000C3C                     l370:
  4108                           
  4109                           ; BSR set to: 1
  4110                           ;main.c: 509: RB0=1;
  4111  000C3C  8081               	bsf	3969,0,c	;volatile
  4112                           
  4113                           ;main.c: 510: RC7=0;
  4114  000C3E  9E82               	bcf	3970,7,c	;volatile
  4115                           
  4116                           ; BSR set to: 1
  4117                           ;main.c: 511: opentoplid();
  4118  000C40  ECDB  F018         	call	_opentoplid	;wreg free
  4119                           
  4120                           ;main.c: 512: closebotlid();
  4121  000C44  EC38  F019         	call	_closebotlid	;wreg free
  4122                           
  4123                           ;main.c: 514: lcdclear();
  4124  000C48  EC93  F01A         	call	_lcdclear	;wreg free
  4125                           
  4126                           ;main.c: 515: print(" Operation has  ","   terminated   ");
  4127  000C4C  0EBD               	movlw	low STR_31
  4128  000C4E  0101               	movlb	1	; () banked
  4129  000C50  6F43               	movwf	print@line1& (0+255),b
  4130  000C52  0EFE               	movlw	high STR_31
  4131  000C54  0101               	movlb	1	; () banked
  4132  000C56  6F44               	movwf	(print@line1+1)& (0+255),b
  4133  000C58  0E9B               	movlw	low STR_32
  4134  000C5A  0101               	movlb	1	; () banked
  4135  000C5C  6F45               	movwf	print@line2& (0+255),b
  4136  000C5E  0EFE               	movlw	high STR_32
  4137  000C60  0101               	movlb	1	; () banked
  4138  000C62  6F46               	movwf	(print@line2+1)& (0+255),b
  4139  000C64  ECBB  F018         	call	_print	;wreg free
  4140                           
  4141                           ;main.c: 516: delay(2);
  4142  000C68  0E00               	movlw	0
  4143  000C6A  6E36               	movwf	delay@seconds+1,c
  4144  000C6C  0E02               	movlw	2
  4145  000C6E  6E35               	movwf	delay@seconds,c
  4146  000C70  EC35  F018         	call	_delay	;wreg free
  4147                           
  4148                           ;main.c: 517: RA0 = 1;
  4149  000C74  8080               	bsf	3968,0,c	;volatile
  4150                           
  4151                           ;main.c: 518: curr_state = LOG;
  4152  000C76  0E03               	movlw	3
  4153  000C78                     L10:
  4154  000C78  0101               	movlb	1	; () banked
  4155  000C7A  6F18               	movwf	_curr_state& (0+255),b
  4156                           
  4157                           ;main.c: 519: break;
  4158  000C7C  D166               	goto	l6196
  4159  000C7E                     l6128:
  4160                           
  4161                           ; BSR set to: 1
  4162                           ;main.c: 522: flag = 0, flag2 = 0;
  4163  000C7E  0E00               	movlw	0
  4164  000C80  0101               	movlb	1	; () banked
  4165  000C82  6F17               	movwf	(_flag+1)& (0+255),b
  4166  000C84  0E00               	movlw	0
  4167  000C86  6F16               	movwf	_flag& (0+255),b
  4168  000C88  0E00               	movlw	0
  4169  000C8A  0101               	movlb	1	; () banked
  4170  000C8C  6F13               	movwf	(_flag2+1)& (0+255),b
  4171  000C8E  0E00               	movlw	0
  4172  000C90  6F12               	movwf	_flag2& (0+255),b
  4173                           
  4174                           ; BSR set to: 1
  4175                           ;main.c: 525: if (run == 1){
  4176  000C92  0101               	movlb	1	; () banked
  4177  000C94  0500               	decf	_run& (0+255),w,b
  4178  000C96  0101               	movlb	1	; () banked
  4179  000C98  1101               	iorwf	(_run+1)& (0+255),w,b
  4180  000C9A  A4D8               	btfss	status,2,c
  4181  000C9C  D021               	goto	l6134
  4182                           
  4183                           ; BSR set to: 1
  4184                           ;main.c: 526: write_eeprom(0x30,(uint8_t)yop_a);
  4185  000C9E  0E00               	movlw	0
  4186  000CA0  6E36               	movwf	write_eeprom@address+1,c
  4187  000CA2  0E30               	movlw	48
  4188  000CA4  6E35               	movwf	write_eeprom@address,c
  4189  000CA6  C10A  F037         	movff	_yop_a,write_eeprom@data
  4190  000CAA  ECE3  F019         	call	_write_eeprom	;wreg free
  4191                           
  4192                           ;main.c: 527: write_eeprom(0x31,(uint8_t)yop_b);
  4193  000CAE  0E00               	movlw	0
  4194  000CB0  6E36               	movwf	write_eeprom@address+1,c
  4195  000CB2  0E31               	movlw	49
  4196  000CB4  6E35               	movwf	write_eeprom@address,c
  4197  000CB6  C108  F037         	movff	_yop_b,write_eeprom@data
  4198  000CBA  ECE3  F019         	call	_write_eeprom	;wreg free
  4199                           
  4200                           ;main.c: 528: write_eeprom(0x32,(uint8_t)eska_a);
  4201  000CBE  0E00               	movlw	0
  4202  000CC0  6E36               	movwf	write_eeprom@address+1,c
  4203  000CC2  0E32               	movlw	50
  4204  000CC4  6E35               	movwf	write_eeprom@address,c
  4205  000CC6  C106  F037         	movff	_eska_a,write_eeprom@data
  4206  000CCA  ECE3  F019         	call	_write_eeprom	;wreg free
  4207                           
  4208                           ;main.c: 529: write_eeprom(0x33,(uint8_t)eska_b);
  4209  000CCE  0E00               	movlw	0
  4210  000CD0  6E36               	movwf	write_eeprom@address+1,c
  4211  000CD2  0E33               	movlw	51
  4212  000CD4  6E35               	movwf	write_eeprom@address,c
  4213  000CD6  C104  F037         	movff	_eska_b,write_eeprom@data
  4214  000CDA  ECE3  F019         	call	_write_eeprom	;wreg free
  4215                           
  4216                           ;main.c: 530: }
  4217  000CDE  D12A               	goto	l6190
  4218  000CE0                     l6134:
  4219                           
  4220                           ;main.c: 531: else if (run == 2){
  4221  000CE0  0E02               	movlw	2
  4222  000CE2  0101               	movlb	1	; () banked
  4223  000CE4  1900               	xorwf	_run& (0+255),w,b
  4224  000CE6  0101               	movlb	1	; () banked
  4225  000CE8  1101               	iorwf	(_run+1)& (0+255),w,b
  4226  000CEA  A4D8               	btfss	status,2,c
  4227  000CEC  D021               	goto	l6138
  4228                           
  4229                           ; BSR set to: 1
  4230                           ;main.c: 532: write_eeprom(0x20,(uint8_t)yop_a);
  4231  000CEE  0E00               	movlw	0
  4232  000CF0  6E36               	movwf	write_eeprom@address+1,c
  4233  000CF2  0E20               	movlw	32
  4234  000CF4  6E35               	movwf	write_eeprom@address,c
  4235  000CF6  C10A  F037         	movff	_yop_a,write_eeprom@data
  4236  000CFA  ECE3  F019         	call	_write_eeprom	;wreg free
  4237                           
  4238                           ;main.c: 533: write_eeprom(0x21,(uint8_t)yop_b);
  4239  000CFE  0E00               	movlw	0
  4240  000D00  6E36               	movwf	write_eeprom@address+1,c
  4241  000D02  0E21               	movlw	33
  4242  000D04  6E35               	movwf	write_eeprom@address,c
  4243  000D06  C108  F037         	movff	_yop_b,write_eeprom@data
  4244  000D0A  ECE3  F019         	call	_write_eeprom	;wreg free
  4245                           
  4246                           ;main.c: 534: write_eeprom(0x22,(uint8_t)eska_a);
  4247  000D0E  0E00               	movlw	0
  4248  000D10  6E36               	movwf	write_eeprom@address+1,c
  4249  000D12  0E22               	movlw	34
  4250  000D14  6E35               	movwf	write_eeprom@address,c
  4251  000D16  C106  F037         	movff	_eska_a,write_eeprom@data
  4252  000D1A  ECE3  F019         	call	_write_eeprom	;wreg free
  4253                           
  4254                           ;main.c: 535: write_eeprom(0x23,(uint8_t)eska_b);
  4255  000D1E  0E00               	movlw	0
  4256  000D20  6E36               	movwf	write_eeprom@address+1,c
  4257  000D22  0E23               	movlw	35
  4258  000D24  6E35               	movwf	write_eeprom@address,c
  4259  000D26  C104  F037         	movff	_eska_b,write_eeprom@data
  4260  000D2A  ECE3  F019         	call	_write_eeprom	;wreg free
  4261                           
  4262                           ;main.c: 536: }
  4263  000D2E  D102               	goto	l6190
  4264  000D30                     l6138:
  4265                           
  4266                           ;main.c: 537: else if (run == 3){
  4267  000D30  0E03               	movlw	3
  4268  000D32  0101               	movlb	1	; () banked
  4269  000D34  1900               	xorwf	_run& (0+255),w,b
  4270  000D36  0101               	movlb	1	; () banked
  4271  000D38  1101               	iorwf	(_run+1)& (0+255),w,b
  4272  000D3A  A4D8               	btfss	status,2,c
  4273  000D3C  D021               	goto	l6142
  4274                           
  4275                           ; BSR set to: 1
  4276                           ;main.c: 538: write_eeprom(0x10,(uint8_t)yop_a);
  4277  000D3E  0E00               	movlw	0
  4278  000D40  6E36               	movwf	write_eeprom@address+1,c
  4279  000D42  0E10               	movlw	16
  4280  000D44  6E35               	movwf	write_eeprom@address,c
  4281  000D46  C10A  F037         	movff	_yop_a,write_eeprom@data
  4282  000D4A  ECE3  F019         	call	_write_eeprom	;wreg free
  4283                           
  4284                           ;main.c: 539: write_eeprom(0x11,(uint8_t)yop_b);
  4285  000D4E  0E00               	movlw	0
  4286  000D50  6E36               	movwf	write_eeprom@address+1,c
  4287  000D52  0E11               	movlw	17
  4288  000D54  6E35               	movwf	write_eeprom@address,c
  4289  000D56  C108  F037         	movff	_yop_b,write_eeprom@data
  4290  000D5A  ECE3  F019         	call	_write_eeprom	;wreg free
  4291                           
  4292                           ;main.c: 540: write_eeprom(0x12,(uint8_t)eska_a);
  4293  000D5E  0E00               	movlw	0
  4294  000D60  6E36               	movwf	write_eeprom@address+1,c
  4295  000D62  0E12               	movlw	18
  4296  000D64  6E35               	movwf	write_eeprom@address,c
  4297  000D66  C106  F037         	movff	_eska_a,write_eeprom@data
  4298  000D6A  ECE3  F019         	call	_write_eeprom	;wreg free
  4299                           
  4300                           ;main.c: 541: write_eeprom(0x13,(uint8_t)eska_b);
  4301  000D6E  0E00               	movlw	0
  4302  000D70  6E36               	movwf	write_eeprom@address+1,c
  4303  000D72  0E13               	movlw	19
  4304  000D74  6E35               	movwf	write_eeprom@address,c
  4305  000D76  C104  F037         	movff	_eska_b,write_eeprom@data
  4306  000D7A  ECE3  F019         	call	_write_eeprom	;wreg free
  4307                           
  4308                           ;main.c: 542: }
  4309  000D7E  D0DA               	goto	l6190
  4310  000D80                     l6142:
  4311                           
  4312                           ;main.c: 543: else if (run == 4) {
  4313  000D80  0E04               	movlw	4
  4314  000D82  0101               	movlb	1	; () banked
  4315  000D84  1900               	xorwf	_run& (0+255),w,b
  4316  000D86  0101               	movlb	1	; () banked
  4317  000D88  1101               	iorwf	(_run+1)& (0+255),w,b
  4318  000D8A  A4D8               	btfss	status,2,c
  4319  000D8C  D0D3               	goto	l6190
  4320                           
  4321                           ; BSR set to: 1
  4322                           ;main.c: 544: write_eeprom(0x00,(uint8_t)yop_a);
  4323  000D8E  0E00               	movlw	0
  4324  000D90  6E36               	movwf	write_eeprom@address+1,c
  4325  000D92  0E00               	movlw	0
  4326  000D94  6E35               	movwf	write_eeprom@address,c
  4327  000D96  C10A  F037         	movff	_yop_a,write_eeprom@data
  4328  000D9A  ECE3  F019         	call	_write_eeprom	;wreg free
  4329                           
  4330                           ;main.c: 545: write_eeprom(0x01,(uint8_t)yop_b);
  4331  000D9E  0E00               	movlw	0
  4332  000DA0  6E36               	movwf	write_eeprom@address+1,c
  4333  000DA2  0E01               	movlw	1
  4334  000DA4  6E35               	movwf	write_eeprom@address,c
  4335  000DA6  C108  F037         	movff	_yop_b,write_eeprom@data
  4336  000DAA  ECE3  F019         	call	_write_eeprom	;wreg free
  4337                           
  4338                           ;main.c: 546: write_eeprom(0x02,(uint8_t)eska_a);
  4339  000DAE  0E00               	movlw	0
  4340  000DB0  6E36               	movwf	write_eeprom@address+1,c
  4341  000DB2  0E02               	movlw	2
  4342  000DB4  6E35               	movwf	write_eeprom@address,c
  4343  000DB6  C106  F037         	movff	_eska_a,write_eeprom@data
  4344  000DBA  ECE3  F019         	call	_write_eeprom	;wreg free
  4345                           
  4346                           ;main.c: 547: write_eeprom(0x03,(uint8_t)eska_b);
  4347  000DBE  0E00               	movlw	0
  4348  000DC0  6E36               	movwf	write_eeprom@address+1,c
  4349  000DC2  0E03               	movlw	3
  4350  000DC4  6E35               	movwf	write_eeprom@address,c
  4351  000DC6  C104  F037         	movff	_eska_b,write_eeprom@data
  4352  000DCA  ECE3  F019         	call	_write_eeprom	;wreg free
  4353                           
  4354                           ;main.c: 548: }
  4355                           ;main.c: 551: while(!flag && curr_state == LOG){
  4356  000DCE  D0B2               	goto	l6190
  4357  000DD0                     l6146:
  4358                           
  4359                           ;main.c: 552: lcdclear();
  4360  000DD0  EC93  F01A         	call	_lcdclear	;wreg free
  4361                           
  4362                           ;main.c: 553: print("  Collect Log?  ", "< B Home|Yes A >");
  4363  000DD4  0EAC               	movlw	low STR_33
  4364  000DD6  0101               	movlb	1	; () banked
  4365  000DD8  6F43               	movwf	print@line1& (0+255),b
  4366  000DDA  0EFE               	movlw	high STR_33
  4367  000DDC  0101               	movlb	1	; () banked
  4368  000DDE  6F44               	movwf	(print@line1+1)& (0+255),b
  4369  000DE0  0EDF               	movlw	low STR_34
  4370  000DE2  0101               	movlb	1	; () banked
  4371  000DE4  6F45               	movwf	print@line2& (0+255),b
  4372  000DE6  0EFE               	movlw	high STR_34
  4373  000DE8  0101               	movlb	1	; () banked
  4374  000DEA  6F46               	movwf	(print@line2+1)& (0+255),b
  4375  000DEC  ECBB  F018         	call	_print	;wreg free
  4376                           
  4377                           ;main.c: 555: wait();
  4378  000DF0  ECFA  F01A         	call	_wait	;wreg free
  4379                           
  4380                           ;main.c: 556: key_release();
  4381  000DF4  ECCF  F019         	call	_key_release	;wreg free
  4382                           
  4383                           ;main.c: 557: if (pressed == 'A'){
  4384  000DF8  0E41               	movlw	65
  4385  000DFA  0101               	movlb	1	; () banked
  4386  000DFC  191B               	xorwf	_pressed& (0+255),w,b
  4387  000DFE  A4D8               	btfss	status,2,c
  4388  000E00  D099               	goto	l6190
  4389                           
  4390                           ; BSR set to: 1
  4391                           ;main.c: 558: flag2=0;
  4392  000E02  0E00               	movlw	0
  4393  000E04  0101               	movlb	1	; () banked
  4394  000E06  6F13               	movwf	(_flag2+1)& (0+255),b
  4395  000E08  0E00               	movlw	0
  4396  000E0A  D08D               	goto	L11
  4397  000E0C                     l6158:
  4398                           
  4399                           ; BSR set to: 1
  4400                           ;main.c: 560: lcdclear();
  4401  000E0C  EC93  F01A         	call	_lcdclear	;wreg free
  4402                           
  4403                           ;main.c: 561: printf("YOP A: %i B: %i|<C",yop_a,yop_b);
  4404  000E10  0E32               	movlw	low STR_9
  4405  000E12  0100               	movlb	0	; () banked
  4406  000E14  6FF6               	movwf	printf@f& (0+255),b
  4407  000E16  0EFE               	movlw	high STR_9
  4408  000E18  0100               	movlb	0	; () banked
  4409  000E1A  6FF7               	movwf	(printf@f+1)& (0+255),b
  4410  000E1C  C10A  F0F8         	movff	_yop_a,?_printf+2
  4411  000E20  C10B  F0F9         	movff	_yop_a+1,?_printf+3
  4412  000E24  C108  F0FA         	movff	_yop_b,?_printf+4
  4413  000E28  C109  F0FB         	movff	_yop_b+1,?_printf+5
  4414  000E2C  ECB5  F007         	call	_printf	;wreg free
  4415                           
  4416                           ;main.c: 562: lcdInst(0b11000000);;
  4417  000E30  0EC0               	movlw	192
  4418  000E32  ECCE  F01A         	call	_lcdInst
  4419                           
  4420                           ;main.c: 563: printf("ESK A: %i B: %i|D>",eska_a, eska_b);
  4421  000E36  0E1F               	movlw	low STR_36
  4422  000E38  0100               	movlb	0	; () banked
  4423  000E3A  6FF6               	movwf	printf@f& (0+255),b
  4424  000E3C  0EFE               	movlw	high STR_36
  4425  000E3E  0100               	movlb	0	; () banked
  4426  000E40  6FF7               	movwf	(printf@f+1)& (0+255),b
  4427  000E42  C106  F0F8         	movff	_eska_a,?_printf+2
  4428  000E46  C107  F0F9         	movff	_eska_a+1,?_printf+3
  4429  000E4A  C104  F0FA         	movff	_eska_b,?_printf+4
  4430  000E4E  C105  F0FB         	movff	_eska_b+1,?_printf+5
  4431  000E52  ECB5  F007         	call	_printf	;wreg free
  4432                           
  4433                           ;main.c: 564: wait();
  4434  000E56  ECFA  F01A         	call	_wait	;wreg free
  4435                           
  4436                           ;main.c: 565: key_release();
  4437  000E5A  ECCF  F019         	call	_key_release	;wreg free
  4438                           
  4439                           ;main.c: 566: if (pressed == 'D'){
  4440  000E5E  0E44               	movlw	68
  4441  000E60  0101               	movlb	1	; () banked
  4442  000E62  191B               	xorwf	_pressed& (0+255),w,b
  4443  000E64  A4D8               	btfss	status,2,c
  4444  000E66  D056               	goto	l6184
  4445                           
  4446                           ; BSR set to: 1
  4447                           ;main.c: 567: totalbot = eska_a + eska_b + yop_a + yop_b;
  4448  000E68  0101               	movlb	1	; () banked
  4449  000E6A  5104               	movf	_eska_b& (0+255),w,b
  4450  000E6C  0101               	movlb	1	; () banked
  4451  000E6E  2506               	addwf	_eska_a& (0+255),w,b
  4452  000E70  0101               	movlb	1	; () banked
  4453  000E72  6F47               	movwf	??_main& (0+255),b
  4454  000E74  0101               	movlb	1	; () banked
  4455  000E76  5105               	movf	(_eska_b+1)& (0+255),w,b
  4456  000E78  0101               	movlb	1	; () banked
  4457  000E7A  2107               	addwfc	(_eska_a+1)& (0+255),w,b
  4458  000E7C  0101               	movlb	1	; () banked
  4459  000E7E  6F48               	movwf	(??_main+1)& (0+255),b
  4460  000E80  0101               	movlb	1	; () banked
  4461  000E82  510A               	movf	_yop_a& (0+255),w,b
  4462  000E84  0101               	movlb	1	; () banked
  4463  000E86  2747               	addwf	??_main& (0+255),f,b
  4464  000E88  0101               	movlb	1	; () banked
  4465  000E8A  510B               	movf	(_yop_a+1)& (0+255),w,b
  4466  000E8C  0101               	movlb	1	; () banked
  4467  000E8E  2348               	addwfc	(??_main+1)& (0+255),f,b
  4468  000E90  0101               	movlb	1	; () banked
  4469  000E92  5108               	movf	_yop_b& (0+255),w,b
  4470  000E94  0101               	movlb	1	; () banked
  4471  000E96  2547               	addwf	??_main& (0+255),w,b
  4472  000E98  0101               	movlb	1	; () banked
  4473  000E9A  6F02               	movwf	_totalbot& (0+255),b
  4474  000E9C  0101               	movlb	1	; () banked
  4475  000E9E  5109               	movf	(_yop_b+1)& (0+255),w,b
  4476  000EA0  0101               	movlb	1	; () banked
  4477  000EA2  2148               	addwfc	(??_main+1)& (0+255),w,b
  4478  000EA4  0101               	movlb	1	; () banked
  4479  000EA6  6F03               	movwf	(_totalbot+1)& (0+255),b
  4480                           
  4481                           ; BSR set to: 1
  4482                           ;main.c: 568: lcdclear();
  4483  000EA8  EC93  F01A         	call	_lcdclear	;wreg free
  4484                           
  4485                           ;main.c: 569: printf("Total: %i    |<C",totalbot);
  4486  000EAC  0E9A               	movlw	low STR_37
  4487  000EAE  0100               	movlb	0	; () banked
  4488  000EB0  6FF6               	movwf	printf@f& (0+255),b
  4489  000EB2  0EFF               	movlw	high STR_37
  4490  000EB4  0100               	movlb	0	; () banked
  4491  000EB6  6FF7               	movwf	(printf@f+1)& (0+255),b
  4492  000EB8  C102  F0F8         	movff	_totalbot,?_printf+2
  4493  000EBC  C103  F0F9         	movff	_totalbot+1,?_printf+3
  4494  000EC0  ECB5  F007         	call	_printf	;wreg free
  4495                           
  4496                           ;main.c: 570: lcdInst(0b11000000);;
  4497  000EC4  0EC0               	movlw	192
  4498  000EC6  ECCE  F01A         	call	_lcdInst
  4499                           
  4500                           ;main.c: 571: printf("Time: %is       ",time_diff(start_time,end_time)-2);
  4501  000ECA  0E79               	movlw	low STR_38
  4502  000ECC  0100               	movlb	0	; () banked
  4503  000ECE  6FF6               	movwf	printf@f& (0+255),b
  4504  000ED0  0EFE               	movlw	high STR_38
  4505  000ED2  0100               	movlb	0	; () banked
  4506  000ED4  6FF7               	movwf	(printf@f+1)& (0+255),b
  4507  000ED6  0E23               	movlw	low _start_time
  4508  000ED8  0100               	movlb	0	; () banked
  4509  000EDA  6FDE               	movwf	time_diff@time1& (0+255),b
  4510  000EDC  0E01               	movlw	high _start_time
  4511  000EDE  0100               	movlb	0	; () banked
  4512  000EE0  6FDF               	movwf	(time_diff@time1+1)& (0+255),b
  4513  000EE2  0E1C               	movlw	low _end_time
  4514  000EE4  0100               	movlb	0	; () banked
  4515  000EE6  6FE0               	movwf	time_diff@time2& (0+255),b
  4516  000EE8  0E01               	movlw	high _end_time
  4517  000EEA  0100               	movlb	0	; () banked
  4518  000EEC  6FE1               	movwf	(time_diff@time2+1)& (0+255),b
  4519  000EEE  ECD3  F00D         	call	_time_diff	;wreg free
  4520  000EF2  0EFE               	movlw	254
  4521  000EF4  0100               	movlb	0	; () banked
  4522  000EF6  25DE               	addwf	?_time_diff& (0+255),w,b
  4523  000EF8  0100               	movlb	0	; () banked
  4524  000EFA  6FF8               	movwf	(?_printf+2)& (0+255),b
  4525  000EFC  0EFF               	movlw	255
  4526  000EFE  0100               	movlb	0	; () banked
  4527  000F00  21DF               	addwfc	(?_time_diff+1)& (0+255),w,b
  4528  000F02  0100               	movlb	0	; () banked
  4529  000F04  6FF9               	movwf	(?_printf+3)& (0+255),b
  4530  000F06  ECB5  F007         	call	_printf	;wreg free
  4531                           
  4532                           ;main.c: 572: wait();
  4533  000F0A  ECFA  F01A         	call	_wait	;wreg free
  4534                           
  4535                           ;main.c: 573: key_release();
  4536  000F0E  ECCF  F019         	call	_key_release	;wreg free
  4537                           
  4538                           ;main.c: 574: }
  4539  000F12  D00A               	goto	l6188
  4540  000F14                     l6184:
  4541                           
  4542                           ;main.c: 575: else if (pressed == 'C'){
  4543  000F14  0E43               	movlw	67
  4544  000F16  0101               	movlb	1	; () banked
  4545  000F18  191B               	xorwf	_pressed& (0+255),w,b
  4546  000F1A  A4D8               	btfss	status,2,c
  4547  000F1C  D005               	goto	l6188
  4548                           
  4549                           ; BSR set to: 1
  4550                           ;main.c: 576: flag2 = 1;
  4551  000F1E  0E00               	movlw	0
  4552  000F20  0101               	movlb	1	; () banked
  4553  000F22  6F13               	movwf	(_flag2+1)& (0+255),b
  4554  000F24  0E01               	movlw	1
  4555  000F26                     L11:
  4556  000F26  6F12               	movwf	_flag2& (0+255),b
  4557  000F28                     l6188:
  4558  000F28  0101               	movlb	1	; () banked
  4559  000F2A  5112               	movf	_flag2& (0+255),w,b
  4560  000F2C  0101               	movlb	1	; () banked
  4561  000F2E  1113               	iorwf	(_flag2+1)& (0+255),w,b
  4562  000F30  B4D8               	btfsc	status,2,c
  4563  000F32  D76C               	goto	l6158
  4564  000F34                     l6190:
  4565  000F34  0101               	movlb	1	; () banked
  4566  000F36  5116               	movf	_flag& (0+255),w,b
  4567  000F38  0101               	movlb	1	; () banked
  4568  000F3A  1117               	iorwf	(_flag+1)& (0+255),w,b
  4569  000F3C  A4D8               	btfss	status,2,c
  4570  000F3E  D005               	goto	l6196
  4571                           
  4572                           ; BSR set to: 1
  4573  000F40  0E03               	movlw	3
  4574  000F42  0101               	movlb	1	; () banked
  4575  000F44  1918               	xorwf	_curr_state& (0+255),w,b
  4576  000F46  B4D8               	btfsc	status,2,c
  4577  000F48  D743               	goto	l6146
  4578  000F4A                     l6196:
  4579  000F4A  0101               	movlb	1	; () banked
  4580  000F4C  5118               	movf	_curr_state& (0+255),w,b
  4581                           
  4582                           ; Switch size 1, requested type "space"
  4583                           ; Number of cases is 4, Range of values is 0 to 3
  4584                           ; switch strategies available:
  4585                           ; Name         Instructions Cycles
  4586                           ; simple_byte           13     7 (average)
  4587                           ;	Chosen strategy is simple_byte
  4588  000F4E  0A00               	xorlw	0	; case 0
  4589  000F50  B4D8               	btfsc	status,2,c
  4590  000F52  EFB8  F000         	goto	l5704
  4591  000F56  0A01               	xorlw	1	; case 1
  4592  000F58  B4D8               	btfsc	status,2,c
  4593  000F5A  D635               	goto	l6104
  4594  000F5C  0A03               	xorlw	3	; case 2
  4595  000F5E  B4D8               	btfsc	status,2,c
  4596  000F60  D66D               	goto	l370
  4597  000F62  0A01               	xorlw	1	; case 3
  4598  000F64  B4D8               	btfsc	status,2,c
  4599  000F66  D68B               	goto	l6128
  4600                           
  4601                           ; BSR set to: 1
  4602                           
  4603                           ; BSR set to: 1
  4604  000F68  D7F0               	goto	l6196
  4605  000F6A                     __end_of_main:
  4606                           	opt stack 0
  4607                           tblptru	equ	0xFF8
  4608                           tblptrh	equ	0xFF7
  4609                           tblptrl	equ	0xFF6
  4610                           tablat	equ	0xFF5
  4611                           intcon	equ	0xFF2
  4612                           intcon2	equ	0xFF1
  4613                           intcon3	equ	0xFF0
  4614                           postinc0	equ	0xFEE
  4615                           wreg	equ	0xFE8
  4616                           status	equ	0xFD8
  4617                           
  4618 ;; *************** function _write_eeprom *****************
  4619 ;; Defined at:
  4620 ;;		line 820 in file "main.c"
  4621 ;; Parameters:    Size  Location     Type
  4622 ;;  address         2   52[COMRAM] unsigned int 
  4623 ;;  data            1   54[COMRAM] unsigned char 
  4624 ;; Auto vars:     Size  Location     Type
  4625 ;;		None
  4626 ;; Return value:  Size  Location     Type
  4627 ;;                  1    wreg      void 
  4628 ;; Registers used:
  4629 ;;		wreg, status,2
  4630 ;; Tracked objects:
  4631 ;;		On entry : 0/0
  4632 ;;		On exit  : 0/0
  4633 ;;		Unchanged: 0/0
  4634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4635 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4638 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4639 ;;Total ram usage:        3 bytes
  4640 ;; Hardware stack levels used:    1
  4641 ;; Hardware stack levels required when called:    5
  4642 ;; This function calls:
  4643 ;;		Nothing
  4644 ;; This function is called by:
  4645 ;;		_main
  4646 ;; This function uses a non-reentrant model
  4647 ;;
  4648                           
  4649                           	psect	text1
  4650  0033C6                     __ptext1:
  4651                           	opt stack 0
  4652  0033C6                     _write_eeprom:
  4653                           	opt stack 25
  4654                           
  4655                           ;main.c: 823: EEADRH = (uint8_t)(address >> 8);
  4656                           
  4657                           ; BSR set to: 1
  4658                           ;incstack = 0
  4659  0033C6  5036               	movf	write_eeprom@address+1,w,c
  4660  0033C8  6EAA               	movwf	4010,c	;volatile
  4661                           
  4662                           ;main.c: 824: EEADR = (uint8_t)address;
  4663  0033CA  C035  FFA9         	movff	write_eeprom@address,4009	;volatile
  4664                           
  4665                           ;main.c: 826: EEDATA = data;
  4666  0033CE  C037  FFA8         	movff	write_eeprom@data,4008	;volatile
  4667                           
  4668                           ;main.c: 827: EECON1bits.EEPGD = 0;
  4669  0033D2  9EA6               	bcf	4006,7,c	;volatile
  4670                           
  4671                           ;main.c: 828: EECON1bits.CFGS = 0;
  4672  0033D4  9CA6               	bcf	4006,6,c	;volatile
  4673                           
  4674                           ;main.c: 829: EECON1bits.WREN = 1;
  4675  0033D6  84A6               	bsf	4006,2,c	;volatile
  4676                           
  4677                           ;main.c: 833: EECON2 = 0x55;
  4678  0033D8  0E55               	movlw	85
  4679  0033DA  6EA7               	movwf	4007,c	;volatile
  4680                           
  4681                           ;main.c: 834: EECON2 = 0xAA;
  4682  0033DC  0EAA               	movlw	170
  4683  0033DE  6EA7               	movwf	4007,c	;volatile
  4684                           
  4685                           ;main.c: 835: EECON1bits.WR = 1;
  4686  0033E0  82A6               	bsf	4006,1,c	;volatile
  4687  0033E2                     l487:
  4688  0033E2  A8A1               	btfss	4001,4,c	;volatile
  4689  0033E4  D7FE               	goto	l487
  4690                           
  4691                           ;main.c: 841: }
  4692                           ;main.c: 843: PIR2bits.EEIF = 0;
  4693  0033E6  98A1               	bcf	4001,4,c	;volatile
  4694                           
  4695                           ;main.c: 844: EECON1bits.WREN = 0;
  4696  0033E8  94A6               	bcf	4006,2,c	;volatile
  4697  0033EA  0012               	return		;funcret
  4698  0033EC                     __end_of_write_eeprom:
  4699                           	opt stack 0
  4700                           tblptru	equ	0xFF8
  4701                           tblptrh	equ	0xFF7
  4702                           tblptrl	equ	0xFF6
  4703                           tablat	equ	0xFF5
  4704                           intcon	equ	0xFF2
  4705                           intcon2	equ	0xFF1
  4706                           intcon3	equ	0xFF0
  4707                           postinc0	equ	0xFEE
  4708                           wreg	equ	0xFE8
  4709                           status	equ	0xFD8
  4710                           
  4711 ;; *************** function _wait *****************
  4712 ;; Defined at:
  4713 ;;		line 679 in file "main.c"
  4714 ;; Parameters:    Size  Location     Type
  4715 ;;		None
  4716 ;; Auto vars:     Size  Location     Type
  4717 ;;		None
  4718 ;; Return value:  Size  Location     Type
  4719 ;;                  1    wreg      void 
  4720 ;; Registers used:
  4721 ;;		None
  4722 ;; Tracked objects:
  4723 ;;		On entry : 0/0
  4724 ;;		On exit  : 0/0
  4725 ;;		Unchanged: 0/0
  4726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4731 ;;Total ram usage:        0 bytes
  4732 ;; Hardware stack levels used:    1
  4733 ;; Hardware stack levels required when called:    5
  4734 ;; This function calls:
  4735 ;;		Nothing
  4736 ;; This function is called by:
  4737 ;;		_main
  4738 ;; This function uses a non-reentrant model
  4739 ;;
  4740                           
  4741                           	psect	text2
  4742  0035F4                     __ptext2:
  4743                           	opt stack 0
  4744  0035F4                     _wait:
  4745                           	opt stack 25
  4746  0035F4                     l429:
  4747  0035F4  B281               	btfsc	3969,1,c	;volatile
  4748  0035F6  0012               	return	
  4749  0035F8  D7FD               	goto	l429
  4750  0035FA                     __end_of_wait:
  4751                           	opt stack 0
  4752                           tblptru	equ	0xFF8
  4753                           tblptrh	equ	0xFF7
  4754                           tblptrl	equ	0xFF6
  4755                           tablat	equ	0xFF5
  4756                           intcon	equ	0xFF2
  4757                           intcon2	equ	0xFF1
  4758                           intcon3	equ	0xFF0
  4759                           postinc0	equ	0xFEE
  4760                           wreg	equ	0xFE8
  4761                           status	equ	0xFD8
  4762                           
  4763 ;; *************** function _time_diff *****************
  4764 ;; Defined at:
  4765 ;;		line 639 in file "main.c"
  4766 ;; Parameters:    Size  Location     Type
  4767 ;;  time1           2   94[BANK0 ] PTR unsigned char 
  4768 ;;		 -> start_time(7), 
  4769 ;;  time2           2   96[BANK0 ] PTR unsigned char 
  4770 ;;		 -> end_time(7), 
  4771 ;; Auto vars:     Size  Location     Type
  4772 ;;  d3              2  116[BANK0 ] int 
  4773 ;;  d2              2  114[BANK0 ] int 
  4774 ;;  d1              2  112[BANK0 ] int 
  4775 ;;  s2              2  110[BANK0 ] int 
  4776 ;;  s1              2  108[BANK0 ] int 
  4777 ;;  min2            2  106[BANK0 ] int 
  4778 ;;  min1            2  104[BANK0 ] int 
  4779 ;;  hr2             2  102[BANK0 ] int 
  4780 ;;  hr1             2  100[BANK0 ] int 
  4781 ;; Return value:  Size  Location     Type
  4782 ;;                  2   94[BANK0 ] int 
  4783 ;; Registers used:
  4784 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4785 ;; Tracked objects:
  4786 ;;		On entry : 0/0
  4787 ;;		On exit  : 0/0
  4788 ;;		Unchanged: 0/0
  4789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4790 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4791 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4792 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4793 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4794 ;;Total ram usage:       24 bytes
  4795 ;; Hardware stack levels used:    1
  4796 ;; Hardware stack levels required when called:   11
  4797 ;; This function calls:
  4798 ;;		___wmul
  4799 ;;		_dec2hex
  4800 ;; This function is called by:
  4801 ;;		_main
  4802 ;; This function uses a non-reentrant model
  4803 ;;
  4804                           
  4805                           	psect	text3
  4806  001BA6                     __ptext3:
  4807                           	opt stack 0
  4808  001BA6                     _time_diff:
  4809                           	opt stack 19
  4810                           
  4811                           ;main.c: 640: int hr1, hr2, min1, min2, s1, s2;
  4812                           ;main.c: 641: int d1, d2, d3;
  4813                           ;main.c: 642: hr1 = time1[2]; hr2 = time2[2]; min1 = time1[1]; min2 = time2[1];
  4814                           
  4815                           ;incstack = 0
  4816  001BA6  0100               	movlb	0	; () banked
  4817  001BA8  EE20 F002          	lfsr	2,2
  4818  001BAC  51DE               	movf	time_diff@time1& (0+255),w,b
  4819  001BAE  26D9               	addwf	fsr2l,f,c
  4820  001BB0  51DF               	movf	(time_diff@time1+1)& (0+255),w,b
  4821  001BB2  22DA               	addwfc	fsr2h,f,c
  4822  001BB4  50DF               	movf	indf2,w,c
  4823  001BB6  0100               	movlb	0	; () banked
  4824  001BB8  6FE2               	movwf	??_time_diff& (0+255),b
  4825  001BBA  0100               	movlb	0	; () banked
  4826  001BBC  51E2               	movf	??_time_diff& (0+255),w,b
  4827  001BBE  0100               	movlb	0	; () banked
  4828  001BC0  6FE4               	movwf	time_diff@hr1& (0+255),b
  4829  001BC2  6BE5               	clrf	(time_diff@hr1+1)& (0+255),b
  4830  001BC4  0100               	movlb	0	; () banked
  4831  001BC6  EE20 F002          	lfsr	2,2
  4832  001BCA  51E0               	movf	time_diff@time2& (0+255),w,b
  4833  001BCC  26D9               	addwf	fsr2l,f,c
  4834  001BCE  51E1               	movf	(time_diff@time2+1)& (0+255),w,b
  4835  001BD0  22DA               	addwfc	fsr2h,f,c
  4836  001BD2  50DF               	movf	indf2,w,c
  4837  001BD4  0100               	movlb	0	; () banked
  4838  001BD6  6FE2               	movwf	??_time_diff& (0+255),b
  4839  001BD8  0100               	movlb	0	; () banked
  4840  001BDA  51E2               	movf	??_time_diff& (0+255),w,b
  4841  001BDC  0100               	movlb	0	; () banked
  4842  001BDE  6FE6               	movwf	time_diff@hr2& (0+255),b
  4843  001BE0  6BE7               	clrf	(time_diff@hr2+1)& (0+255),b
  4844  001BE2  0100               	movlb	0	; () banked
  4845  001BE4  EE20 F001          	lfsr	2,1
  4846  001BE8  51DE               	movf	time_diff@time1& (0+255),w,b
  4847  001BEA  26D9               	addwf	fsr2l,f,c
  4848  001BEC  51DF               	movf	(time_diff@time1+1)& (0+255),w,b
  4849  001BEE  22DA               	addwfc	fsr2h,f,c
  4850  001BF0  50DF               	movf	indf2,w,c
  4851  001BF2  0100               	movlb	0	; () banked
  4852  001BF4  6FE2               	movwf	??_time_diff& (0+255),b
  4853  001BF6  0100               	movlb	0	; () banked
  4854  001BF8  51E2               	movf	??_time_diff& (0+255),w,b
  4855  001BFA  0100               	movlb	0	; () banked
  4856  001BFC  6FE8               	movwf	time_diff@min1& (0+255),b
  4857  001BFE  6BE9               	clrf	(time_diff@min1+1)& (0+255),b
  4858  001C00  0100               	movlb	0	; () banked
  4859  001C02  EE20 F001          	lfsr	2,1
  4860  001C06  51E0               	movf	time_diff@time2& (0+255),w,b
  4861  001C08  26D9               	addwf	fsr2l,f,c
  4862  001C0A  51E1               	movf	(time_diff@time2+1)& (0+255),w,b
  4863  001C0C  22DA               	addwfc	fsr2h,f,c
  4864  001C0E  50DF               	movf	indf2,w,c
  4865  001C10  0100               	movlb	0	; () banked
  4866  001C12  6FE2               	movwf	??_time_diff& (0+255),b
  4867  001C14  0100               	movlb	0	; () banked
  4868  001C16  51E2               	movf	??_time_diff& (0+255),w,b
  4869  001C18  0100               	movlb	0	; () banked
  4870  001C1A  6FEA               	movwf	time_diff@min2& (0+255),b
  4871  001C1C  6BEB               	clrf	(time_diff@min2+1)& (0+255),b
  4872                           
  4873                           ;main.c: 643: s1 = time1[0]; s2 = time2[0];
  4874  001C1E  C0DE  FFD9         	movff	time_diff@time1,fsr2l
  4875  001C22  C0DF  FFDA         	movff	time_diff@time1+1,fsr2h
  4876  001C26  50DF               	movf	indf2,w,c
  4877  001C28  0100               	movlb	0	; () banked
  4878  001C2A  6FE2               	movwf	??_time_diff& (0+255),b
  4879  001C2C  0100               	movlb	0	; () banked
  4880  001C2E  51E2               	movf	??_time_diff& (0+255),w,b
  4881  001C30  0100               	movlb	0	; () banked
  4882  001C32  6FEC               	movwf	time_diff@s1& (0+255),b
  4883  001C34  6BED               	clrf	(time_diff@s1+1)& (0+255),b
  4884  001C36  C0E0  FFD9         	movff	time_diff@time2,fsr2l
  4885  001C3A  C0E1  FFDA         	movff	time_diff@time2+1,fsr2h
  4886  001C3E  50DF               	movf	indf2,w,c
  4887  001C40  0100               	movlb	0	; () banked
  4888  001C42  6FE2               	movwf	??_time_diff& (0+255),b
  4889  001C44  0100               	movlb	0	; () banked
  4890  001C46  51E2               	movf	??_time_diff& (0+255),w,b
  4891  001C48  0100               	movlb	0	; () banked
  4892  001C4A  6FEE               	movwf	time_diff@s2& (0+255),b
  4893  001C4C  6BEF               	clrf	(time_diff@s2+1)& (0+255),b
  4894                           
  4895                           ; BSR set to: 0
  4896                           ;main.c: 645: d1 = dec2hex(hr2) - dec2hex(hr1);
  4897  001C4E  C0E6  F0CE         	movff	time_diff@hr2,dec2hex@num
  4898  001C52  C0E7  F0CF         	movff	time_diff@hr2+1,dec2hex@num+1
  4899  001C56  ECEC  F011         	call	_dec2hex	;wreg free
  4900  001C5A  C0CE  F0E2         	movff	?_dec2hex,??_time_diff
  4901  001C5E  C0CF  F0E3         	movff	?_dec2hex+1,??_time_diff+1
  4902  001C62  C0E4  F0CE         	movff	time_diff@hr1,dec2hex@num
  4903  001C66  C0E5  F0CF         	movff	time_diff@hr1+1,dec2hex@num+1
  4904  001C6A  ECEC  F011         	call	_dec2hex	;wreg free
  4905  001C6E  0100               	movlb	0	; () banked
  4906  001C70  1FCE               	comf	?_dec2hex& (0+255),f,b
  4907  001C72  0100               	movlb	0	; () banked
  4908  001C74  1FCF               	comf	(?_dec2hex+1)& (0+255),f,b
  4909  001C76  0100               	movlb	0	; () banked
  4910  001C78  4BCE               	infsnz	?_dec2hex& (0+255),f,b
  4911  001C7A  2BCF               	incf	(?_dec2hex+1)& (0+255),f,b
  4912  001C7C  0100               	movlb	0	; () banked
  4913  001C7E  51CE               	movf	?_dec2hex& (0+255),w,b
  4914  001C80  0100               	movlb	0	; () banked
  4915  001C82  25E2               	addwf	??_time_diff& (0+255),w,b
  4916  001C84  0100               	movlb	0	; () banked
  4917  001C86  6FF0               	movwf	time_diff@d1& (0+255),b
  4918  001C88  0100               	movlb	0	; () banked
  4919  001C8A  51CF               	movf	(?_dec2hex+1)& (0+255),w,b
  4920  001C8C  0100               	movlb	0	; () banked
  4921  001C8E  21E3               	addwfc	(??_time_diff+1)& (0+255),w,b
  4922  001C90  0100               	movlb	0	; () banked
  4923  001C92  6FF1               	movwf	(time_diff@d1+1)& (0+255),b
  4924                           
  4925                           ; BSR set to: 0
  4926                           ;main.c: 646: d2 = dec2hex(min2) - dec2hex(min1);
  4927  001C94  C0EA  F0CE         	movff	time_diff@min2,dec2hex@num
  4928  001C98  C0EB  F0CF         	movff	time_diff@min2+1,dec2hex@num+1
  4929  001C9C  ECEC  F011         	call	_dec2hex	;wreg free
  4930  001CA0  C0CE  F0E2         	movff	?_dec2hex,??_time_diff
  4931  001CA4  C0CF  F0E3         	movff	?_dec2hex+1,??_time_diff+1
  4932  001CA8  C0E8  F0CE         	movff	time_diff@min1,dec2hex@num
  4933  001CAC  C0E9  F0CF         	movff	time_diff@min1+1,dec2hex@num+1
  4934  001CB0  ECEC  F011         	call	_dec2hex	;wreg free
  4935  001CB4  0100               	movlb	0	; () banked
  4936  001CB6  1FCE               	comf	?_dec2hex& (0+255),f,b
  4937  001CB8  0100               	movlb	0	; () banked
  4938  001CBA  1FCF               	comf	(?_dec2hex+1)& (0+255),f,b
  4939  001CBC  0100               	movlb	0	; () banked
  4940  001CBE  4BCE               	infsnz	?_dec2hex& (0+255),f,b
  4941  001CC0  2BCF               	incf	(?_dec2hex+1)& (0+255),f,b
  4942  001CC2  0100               	movlb	0	; () banked
  4943  001CC4  51CE               	movf	?_dec2hex& (0+255),w,b
  4944  001CC6  0100               	movlb	0	; () banked
  4945  001CC8  25E2               	addwf	??_time_diff& (0+255),w,b
  4946  001CCA  0100               	movlb	0	; () banked
  4947  001CCC  6FF2               	movwf	time_diff@d2& (0+255),b
  4948  001CCE  0100               	movlb	0	; () banked
  4949  001CD0  51CF               	movf	(?_dec2hex+1)& (0+255),w,b
  4950  001CD2  0100               	movlb	0	; () banked
  4951  001CD4  21E3               	addwfc	(??_time_diff+1)& (0+255),w,b
  4952  001CD6  0100               	movlb	0	; () banked
  4953  001CD8  6FF3               	movwf	(time_diff@d2+1)& (0+255),b
  4954                           
  4955                           ; BSR set to: 0
  4956                           ;main.c: 647: d3 = dec2hex(s2) - dec2hex(s1);
  4957  001CDA  C0EE  F0CE         	movff	time_diff@s2,dec2hex@num
  4958  001CDE  C0EF  F0CF         	movff	time_diff@s2+1,dec2hex@num+1
  4959  001CE2  ECEC  F011         	call	_dec2hex	;wreg free
  4960  001CE6  C0CE  F0E2         	movff	?_dec2hex,??_time_diff
  4961  001CEA  C0CF  F0E3         	movff	?_dec2hex+1,??_time_diff+1
  4962  001CEE  C0EC  F0CE         	movff	time_diff@s1,dec2hex@num
  4963  001CF2  C0ED  F0CF         	movff	time_diff@s1+1,dec2hex@num+1
  4964  001CF6  ECEC  F011         	call	_dec2hex	;wreg free
  4965  001CFA  0100               	movlb	0	; () banked
  4966  001CFC  1FCE               	comf	?_dec2hex& (0+255),f,b
  4967  001CFE  0100               	movlb	0	; () banked
  4968  001D00  1FCF               	comf	(?_dec2hex+1)& (0+255),f,b
  4969  001D02  0100               	movlb	0	; () banked
  4970  001D04  4BCE               	infsnz	?_dec2hex& (0+255),f,b
  4971  001D06  2BCF               	incf	(?_dec2hex+1)& (0+255),f,b
  4972  001D08  0100               	movlb	0	; () banked
  4973  001D0A  51CE               	movf	?_dec2hex& (0+255),w,b
  4974  001D0C  0100               	movlb	0	; () banked
  4975  001D0E  25E2               	addwf	??_time_diff& (0+255),w,b
  4976  001D10  0100               	movlb	0	; () banked
  4977  001D12  6FF4               	movwf	time_diff@d3& (0+255),b
  4978  001D14  0100               	movlb	0	; () banked
  4979  001D16  51CF               	movf	(?_dec2hex+1)& (0+255),w,b
  4980  001D18  0100               	movlb	0	; () banked
  4981  001D1A  21E3               	addwfc	(??_time_diff+1)& (0+255),w,b
  4982  001D1C  0100               	movlb	0	; () banked
  4983  001D1E  6FF5               	movwf	(time_diff@d3+1)& (0+255),b
  4984                           
  4985                           ; BSR set to: 0
  4986                           ;main.c: 649: return 3600*d1 + 60*d2 + d3;
  4987  001D20  C0F0  F035         	movff	time_diff@d1,___wmul@multiplier
  4988  001D24  C0F1  F036         	movff	time_diff@d1+1,___wmul@multiplier+1
  4989  001D28  0E0E               	movlw	14
  4990  001D2A  6E38               	movwf	___wmul@multiplicand+1,c
  4991  001D2C  0E10               	movlw	16
  4992  001D2E  6E37               	movwf	___wmul@multiplicand,c
  4993  001D30  EC09  F01A         	call	___wmul	;wreg free
  4994  001D34  C035  F0E2         	movff	?___wmul,??_time_diff
  4995  001D38  C036  F0E3         	movff	?___wmul+1,??_time_diff+1
  4996  001D3C  C0F2  F035         	movff	time_diff@d2,___wmul@multiplier
  4997  001D40  C0F3  F036         	movff	time_diff@d2+1,___wmul@multiplier+1
  4998  001D44  0E00               	movlw	0
  4999  001D46  6E38               	movwf	___wmul@multiplicand+1,c
  5000  001D48  0E3C               	movlw	60
  5001  001D4A  6E37               	movwf	___wmul@multiplicand,c
  5002  001D4C  EC09  F01A         	call	___wmul	;wreg free
  5003  001D50  5035               	movf	?___wmul,w,c
  5004  001D52  0100               	movlb	0	; () banked
  5005  001D54  27E2               	addwf	??_time_diff& (0+255),f,b
  5006  001D56  5036               	movf	?___wmul+1,w,c
  5007  001D58  0100               	movlb	0	; () banked
  5008  001D5A  23E3               	addwfc	(??_time_diff+1)& (0+255),f,b
  5009  001D5C  0100               	movlb	0	; () banked
  5010  001D5E  51F4               	movf	time_diff@d3& (0+255),w,b
  5011  001D60  0100               	movlb	0	; () banked
  5012  001D62  25E2               	addwf	??_time_diff& (0+255),w,b
  5013  001D64  0100               	movlb	0	; () banked
  5014  001D66  6FDE               	movwf	?_time_diff& (0+255),b
  5015  001D68  0100               	movlb	0	; () banked
  5016  001D6A  51F5               	movf	(time_diff@d3+1)& (0+255),w,b
  5017  001D6C  0100               	movlb	0	; () banked
  5018  001D6E  21E3               	addwfc	(??_time_diff+1)& (0+255),w,b
  5019  001D70  0100               	movlb	0	; () banked
  5020  001D72  6FDF               	movwf	(?_time_diff+1)& (0+255),b
  5021  001D74  0012               	return	
  5022  001D76                     __end_of_time_diff:
  5023                           	opt stack 0
  5024                           tblptru	equ	0xFF8
  5025                           tblptrh	equ	0xFF7
  5026                           tblptrl	equ	0xFF6
  5027                           tablat	equ	0xFF5
  5028                           intcon	equ	0xFF2
  5029                           intcon2	equ	0xFF1
  5030                           intcon3	equ	0xFF0
  5031                           postinc0	equ	0xFEE
  5032                           wreg	equ	0xFE8
  5033                           indf2	equ	0xFDF
  5034                           fsr2h	equ	0xFDA
  5035                           fsr2l	equ	0xFD9
  5036                           status	equ	0xFD8
  5037                           
  5038 ;; *************** function _dec2hex *****************
  5039 ;; Defined at:
  5040 ;;		line 662 in file "main.c"
  5041 ;; Parameters:    Size  Location     Type
  5042 ;;  num             2   78[BANK0 ] int 
  5043 ;; Auto vars:     Size  Location     Type
  5044 ;;  quotient        2   92[BANK0 ] int 
  5045 ;;  hexnum          2   90[BANK0 ] int 
  5046 ;;  i               2   88[BANK0 ] int 
  5047 ;;  temp            2   86[BANK0 ] int 
  5048 ;; Return value:  Size  Location     Type
  5049 ;;                  2   78[BANK0 ] int 
  5050 ;; Registers used:
  5051 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5052 ;; Tracked objects:
  5053 ;;		On entry : 0/0
  5054 ;;		On exit  : 0/0
  5055 ;;		Unchanged: 0/0
  5056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5057 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5058 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5060 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5061 ;;Total ram usage:       16 bytes
  5062 ;; Hardware stack levels used:    1
  5063 ;; Hardware stack levels required when called:   10
  5064 ;; This function calls:
  5065 ;;		___awdiv
  5066 ;;		___awtoft
  5067 ;;		___ftadd
  5068 ;;		___ftmul
  5069 ;;		___fttol
  5070 ;;		_pow
  5071 ;; This function is called by:
  5072 ;;		_time_diff
  5073 ;; This function uses a non-reentrant model
  5074 ;;
  5075                           
  5076                           	psect	text4
  5077  0023D8                     __ptext4:
  5078                           	opt stack 0
  5079  0023D8                     _dec2hex:
  5080                           	opt stack 19
  5081                           
  5082                           ;main.c: 663: int i = 0, quotient = num, temp, hexnum = 0;
  5083                           
  5084                           ; BSR set to: 0
  5085                           ;incstack = 0
  5086  0023D8  0E00               	movlw	0
  5087  0023DA  0100               	movlb	0	; () banked
  5088  0023DC  6FD9               	movwf	(dec2hex@i+1)& (0+255),b
  5089  0023DE  0E00               	movlw	0
  5090  0023E0  6FD8               	movwf	dec2hex@i& (0+255),b
  5091                           
  5092                           ; BSR set to: 0
  5093  0023E2  C0CE  F0DC         	movff	dec2hex@num,dec2hex@quotient
  5094  0023E6  C0CF  F0DD         	movff	dec2hex@num+1,dec2hex@quotient+1
  5095  0023EA  0E00               	movlw	0
  5096  0023EC  0100               	movlb	0	; () banked
  5097  0023EE  6FDB               	movwf	(dec2hex@hexnum+1)& (0+255),b
  5098  0023F0  0E00               	movlw	0
  5099  0023F2  6FDA               	movwf	dec2hex@hexnum& (0+255),b
  5100                           
  5101                           ;main.c: 666: while (quotient != 0) {
  5102  0023F4  D06F               	goto	l5630
  5103  0023F6                     l5618:
  5104                           
  5105                           ; BSR set to: 0
  5106                           ;main.c: 667: temp = quotient % 16;
  5107  0023F6  0E0F               	movlw	15
  5108  0023F8  0100               	movlb	0	; () banked
  5109  0023FA  15DC               	andwf	dec2hex@quotient& (0+255),w,b
  5110  0023FC  0100               	movlb	0	; () banked
  5111  0023FE  6FD6               	movwf	dec2hex@temp& (0+255),b
  5112  002400  0100               	movlb	0	; () banked
  5113  002402  6BD7               	clrf	(dec2hex@temp+1)& (0+255),b
  5114                           
  5115                           ; BSR set to: 0
  5116                           ;main.c: 669: hexnum += temp*pow(10, i);
  5117  002404  C0D8  F03D         	movff	dec2hex@i,___awtoft@c
  5118  002408  C0D9  F03E         	movff	dec2hex@i+1,___awtoft@c+1
  5119  00240C  ECB3  F019         	call	___awtoft	;wreg free
  5120  002410  C03D  F0D0         	movff	?___awtoft,_dec2hex$1576
  5121  002414  C03E  F0D1         	movff	?___awtoft+1,_dec2hex$1576+1
  5122  002418  C03F  F0D2         	movff	?___awtoft+2,_dec2hex$1576+2
  5123                           
  5124                           ;main.c: 669: hexnum += temp*pow(10, i);
  5125  00241C  C0D0  F0C0         	movff	_dec2hex$1576,pow@y
  5126  002420  C0D1  F0C1         	movff	_dec2hex$1576+1,pow@y+1
  5127  002424  C0D2  F0C2         	movff	_dec2hex$1576+2,pow@y+2
  5128  002428  0E00               	movlw	0
  5129  00242A  0100               	movlb	0	; () banked
  5130  00242C  6FBD               	movwf	pow@x& (0+255),b
  5131  00242E  0E20               	movlw	32
  5132  002430  0100               	movlb	0	; () banked
  5133  002432  6FBE               	movwf	(pow@x+1)& (0+255),b
  5134  002434  0E41               	movlw	65
  5135  002436  0100               	movlb	0	; () banked
  5136  002438  6FBF               	movwf	(pow@x+2)& (0+255),b
  5137  00243A  ECBB  F00E         	call	_pow	;wreg free
  5138  00243E  C0BD  F0D3         	movff	?_pow,_dec2hex$1577
  5139  002442  C0BE  F0D4         	movff	?_pow+1,_dec2hex$1577+1
  5140  002446  C0BF  F0D5         	movff	?_pow+2,_dec2hex$1577+2
  5141                           
  5142                           ;main.c: 669: hexnum += temp*pow(10, i);
  5143  00244A  C0D3  F044         	movff	_dec2hex$1577,___ftmul@f2
  5144  00244E  C0D4  F045         	movff	_dec2hex$1577+1,___ftmul@f2+1
  5145  002452  C0D5  F046         	movff	_dec2hex$1577+2,___ftmul@f2+2
  5146  002456  C0D6  F03D         	movff	dec2hex@temp,___awtoft@c
  5147  00245A  C0D7  F03E         	movff	dec2hex@temp+1,___awtoft@c+1
  5148  00245E  ECB3  F019         	call	___awtoft	;wreg free
  5149  002462  C03D  F041         	movff	?___awtoft,___ftmul@f1
  5150  002466  C03E  F042         	movff	?___awtoft+1,___ftmul@f1+1
  5151  00246A  C03F  F043         	movff	?___awtoft+2,___ftmul@f1+2
  5152  00246E  ECCC  F010         	call	___ftmul	;wreg free
  5153  002472  C041  F08C         	movff	?___ftmul,___ftadd@f2
  5154  002476  C042  F08D         	movff	?___ftmul+1,___ftadd@f2+1
  5155  00247A  C043  F08E         	movff	?___ftmul+2,___ftadd@f2+2
  5156  00247E  C0DA  F03D         	movff	dec2hex@hexnum,___awtoft@c
  5157  002482  C0DB  F03E         	movff	dec2hex@hexnum+1,___awtoft@c+1
  5158  002486  ECB3  F019         	call	___awtoft	;wreg free
  5159  00248A  C03D  F089         	movff	?___awtoft,___ftadd@f1
  5160  00248E  C03E  F08A         	movff	?___awtoft+1,___ftadd@f1+1
  5161  002492  C03F  F08B         	movff	?___awtoft+2,___ftadd@f1+2
  5162  002496  EC92  F00B         	call	___ftadd	;wreg free
  5163  00249A  C089  F095         	movff	?___ftadd,___fttol@f1
  5164  00249E  C08A  F096         	movff	?___ftadd+1,___fttol@f1+1
  5165  0024A2  C08B  F097         	movff	?___ftadd+2,___fttol@f1+2
  5166  0024A6  EC8C  F00F         	call	___fttol	;wreg free
  5167  0024AA  C095  F0DA         	movff	?___fttol,dec2hex@hexnum
  5168  0024AE  C096  F0DB         	movff	?___fttol+1,dec2hex@hexnum+1
  5169                           
  5170                           ;main.c: 671: quotient = quotient / 16;
  5171  0024B2  C0DC  F035         	movff	dec2hex@quotient,___awdiv@dividend
  5172  0024B6  C0DD  F036         	movff	dec2hex@quotient+1,___awdiv@dividend+1
  5173  0024BA  0E00               	movlw	0
  5174  0024BC  6E38               	movwf	___awdiv@divisor+1,c
  5175  0024BE  0E10               	movlw	16
  5176  0024C0  6E37               	movwf	___awdiv@divisor,c
  5177  0024C2  ECFB  F015         	call	___awdiv	;wreg free
  5178  0024C6  C035  F0DC         	movff	?___awdiv,dec2hex@quotient
  5179  0024CA  C036  F0DD         	movff	?___awdiv+1,dec2hex@quotient+1
  5180                           
  5181                           ;main.c: 672: i += 1;
  5182  0024CE  0100               	movlb	0	; () banked
  5183  0024D0  4BD8               	infsnz	dec2hex@i& (0+255),f,b
  5184  0024D2  2BD9               	incf	(dec2hex@i+1)& (0+255),f,b
  5185  0024D4                     l5630:
  5186                           
  5187                           ; BSR set to: 0
  5188  0024D4  0100               	movlb	0	; () banked
  5189  0024D6  51DC               	movf	dec2hex@quotient& (0+255),w,b
  5190  0024D8  0100               	movlb	0	; () banked
  5191  0024DA  11DD               	iorwf	(dec2hex@quotient+1)& (0+255),w,b
  5192  0024DC  A4D8               	btfss	status,2,c
  5193  0024DE  D78B               	goto	l5618
  5194                           
  5195                           ; BSR set to: 0
  5196                           ;main.c: 673: }
  5197                           ;main.c: 674: return hexnum;
  5198  0024E0  C0DA  F0CE         	movff	dec2hex@hexnum,?_dec2hex
  5199  0024E4  C0DB  F0CF         	movff	dec2hex@hexnum+1,?_dec2hex+1
  5200                           
  5201                           ; BSR set to: 0
  5202  0024E8  0012               	return		;funcret
  5203  0024EA                     __end_of_dec2hex:
  5204                           	opt stack 0
  5205                           tblptru	equ	0xFF8
  5206                           tblptrh	equ	0xFF7
  5207                           tblptrl	equ	0xFF6
  5208                           tablat	equ	0xFF5
  5209                           intcon	equ	0xFF2
  5210                           intcon2	equ	0xFF1
  5211                           intcon3	equ	0xFF0
  5212                           postinc0	equ	0xFEE
  5213                           wreg	equ	0xFE8
  5214                           indf2	equ	0xFDF
  5215                           fsr2h	equ	0xFDA
  5216                           fsr2l	equ	0xFD9
  5217                           status	equ	0xFD8
  5218                           
  5219 ;; *************** function _pow *****************
  5220 ;; Defined at:
  5221 ;;		line 5 in file "/Applications/microchip/xc8/v1.41/sources/common/pow.c"
  5222 ;; Parameters:    Size  Location     Type
  5223 ;;  x               3   61[BANK0 ] int 
  5224 ;;  y               3   64[BANK0 ] int 
  5225 ;; Auto vars:     Size  Location     Type
  5226 ;;  yi              4   74[BANK0 ] unsigned long 
  5227 ;;  sign            1   73[BANK0 ] unsigned char 
  5228 ;; Return value:  Size  Location     Type
  5229 ;;                  3   61[BANK0 ] unsigned char 
  5230 ;; Registers used:
  5231 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5232 ;; Tracked objects:
  5233 ;;		On entry : 0/0
  5234 ;;		On exit  : 0/0
  5235 ;;		Unchanged: 0/0
  5236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5237 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5238 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5240 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5241 ;;Total ram usage:       17 bytes
  5242 ;; Hardware stack levels used:    1
  5243 ;; Hardware stack levels required when called:    9
  5244 ;; This function calls:
  5245 ;;		___ftge
  5246 ;;		___ftmul
  5247 ;;		___ftneg
  5248 ;;		___fttol
  5249 ;;		___lltoft
  5250 ;;		_exp
  5251 ;;		_log
  5252 ;; This function is called by:
  5253 ;;		_dec2hex
  5254 ;; This function uses a non-reentrant model
  5255 ;;
  5256                           
  5257                           	psect	text5
  5258  001D76                     __ptext5:
  5259                           	opt stack 0
  5260  001D76                     _pow:
  5261                           	opt stack 19
  5262                           
  5263                           ; BSR set to: 0
  5264                           ;incstack = 0
  5265  001D76  0E00               	movlw	0
  5266  001D78  0100               	movlb	0	; () banked
  5267  001D7A  6FC9               	movwf	pow@sign& (0+255),b
  5268                           
  5269                           ; BSR set to: 0
  5270  001D7C  0100               	movlb	0	; () banked
  5271  001D7E  51BD               	movf	pow@x& (0+255),w,b
  5272  001D80  0100               	movlb	0	; () banked
  5273  001D82  11BE               	iorwf	(pow@x+1)& (0+255),w,b
  5274  001D84  0100               	movlb	0	; () banked
  5275  001D86  11BF               	iorwf	(pow@x+2)& (0+255),w,b
  5276  001D88  A4D8               	btfss	status,2,c
  5277  001D8A  D01E               	goto	l5584
  5278                           
  5279                           ; BSR set to: 0
  5280  001D8C  0E00               	movlw	0
  5281  001D8E  6E35               	movwf	___ftge@ff1,c
  5282  001D90  0E00               	movlw	0
  5283  001D92  6E36               	movwf	___ftge@ff1+1,c
  5284  001D94  0E00               	movlw	0
  5285  001D96  6E37               	movwf	___ftge@ff1+2,c
  5286  001D98  C0C0  F038         	movff	pow@y,___ftge@ff2
  5287  001D9C  C0C1  F039         	movff	pow@y+1,___ftge@ff2+1
  5288  001DA0  C0C2  F03A         	movff	pow@y+2,___ftge@ff2+2
  5289  001DA4  ECB3  F015         	call	___ftge	;wreg free
  5290  001DA8  A0D8               	btfss	status,0,c
  5291  001DAA  D004               	goto	l1008
  5292  001DAC  0E00               	movlw	0
  5293  001DAE  6E4A               	movwf	_errno+1,c
  5294  001DB0  0E21               	movlw	33
  5295  001DB2  6E49               	movwf	_errno,c
  5296  001DB4                     l1008:
  5297  001DB4  0E00               	movlw	0
  5298  001DB6  0100               	movlb	0	; () banked
  5299  001DB8  6FBD               	movwf	?_pow& (0+255),b
  5300  001DBA  0E00               	movlw	0
  5301  001DBC  0100               	movlb	0	; () banked
  5302  001DBE  6FBE               	movwf	(?_pow+1)& (0+255),b
  5303  001DC0  0E00               	movlw	0
  5304  001DC2  0100               	movlb	0	; () banked
  5305  001DC4  6FBF               	movwf	(?_pow+2)& (0+255),b
  5306                           
  5307                           ; BSR set to: 0
  5308  001DC6  0012               	return	
  5309  001DC8                     l5584:
  5310                           
  5311                           ; BSR set to: 0
  5312  001DC8  0100               	movlb	0	; () banked
  5313  001DCA  51C0               	movf	pow@y& (0+255),w,b
  5314  001DCC  0100               	movlb	0	; () banked
  5315  001DCE  11C1               	iorwf	(pow@y+1)& (0+255),w,b
  5316  001DD0  0100               	movlb	0	; () banked
  5317  001DD2  11C2               	iorwf	(pow@y+2)& (0+255),w,b
  5318  001DD4  A4D8               	btfss	status,2,c
  5319  001DD6  D00A               	goto	l5590
  5320                           
  5321                           ; BSR set to: 0
  5322  001DD8  0E00               	movlw	0
  5323  001DDA  0100               	movlb	0	; () banked
  5324  001DDC  6FBD               	movwf	?_pow& (0+255),b
  5325  001DDE  0E80               	movlw	128
  5326  001DE0  0100               	movlb	0	; () banked
  5327  001DE2  6FBE               	movwf	(?_pow+1)& (0+255),b
  5328  001DE4  0E3F               	movlw	63
  5329  001DE6  0100               	movlb	0	; () banked
  5330  001DE8  6FBF               	movwf	(?_pow+2)& (0+255),b
  5331                           
  5332                           ; BSR set to: 0
  5333  001DEA  0012               	return	
  5334  001DEC                     l5590:
  5335                           
  5336                           ; BSR set to: 0
  5337  001DEC  0100               	movlb	0	; () banked
  5338  001DEE  AFBF               	btfss	(pow@x+2)& (0+255),7,b
  5339  001DF0  D048               	goto	l5602
  5340                           
  5341                           ; BSR set to: 0
  5342  001DF2  C0C0  F095         	movff	pow@y,___fttol@f1
  5343  001DF6  C0C1  F096         	movff	pow@y+1,___fttol@f1+1
  5344  001DFA  C0C2  F097         	movff	pow@y+2,___fttol@f1+2
  5345  001DFE  EC8C  F00F         	call	___fttol	;wreg free
  5346  001E02  C095  F0CA         	movff	?___fttol,pow@yi
  5347  001E06  C096  F0CB         	movff	?___fttol+1,pow@yi+1
  5348  001E0A  C097  F0CC         	movff	?___fttol+2,pow@yi+2
  5349  001E0E  C098  F0CD         	movff	?___fttol+3,pow@yi+3
  5350  001E12  C0CA  F03D         	movff	pow@yi,___lltoft@c
  5351  001E16  C0CB  F03E         	movff	pow@yi+1,___lltoft@c+1
  5352  001E1A  C0CC  F03F         	movff	pow@yi+2,___lltoft@c+2
  5353  001E1E  C0CD  F040         	movff	pow@yi+3,___lltoft@c+3
  5354  001E22  ECF0  F016         	call	___lltoft	;wreg free
  5355  001E26  0100               	movlb	0	; () banked
  5356  001E28  51C0               	movf	pow@y& (0+255),w,b
  5357  001E2A  183D               	xorwf	?___lltoft,w,c
  5358  001E2C  E109               	bnz	u6420
  5359  001E2E  0100               	movlb	0	; () banked
  5360  001E30  51C1               	movf	(pow@y+1)& (0+255),w,b
  5361  001E32  183E               	xorwf	?___lltoft+1,w,c
  5362  001E34  E105               	bnz	u6420
  5363  001E36  0100               	movlb	0	; () banked
  5364  001E38  51C2               	movf	(pow@y+2)& (0+255),w,b
  5365  001E3A  183F               	xorwf	?___lltoft+2,w,c
  5366  001E3C  B4D8               	btfsc	status,2,c
  5367  001E3E  D00E               	goto	l5598
  5368  001E40                     u6420:
  5369                           
  5370                           ; BSR set to: 0
  5371  001E40  0E00               	movlw	0
  5372  001E42  6E4A               	movwf	_errno+1,c
  5373  001E44  0E21               	movlw	33
  5374  001E46  6E49               	movwf	_errno,c
  5375  001E48  0E00               	movlw	0
  5376  001E4A  0100               	movlb	0	; () banked
  5377  001E4C  6FBD               	movwf	?_pow& (0+255),b
  5378  001E4E  0E00               	movlw	0
  5379  001E50  0100               	movlb	0	; () banked
  5380  001E52  6FBE               	movwf	(?_pow+1)& (0+255),b
  5381  001E54  0E00               	movlw	0
  5382  001E56  0100               	movlb	0	; () banked
  5383  001E58  6FBF               	movwf	(?_pow+2)& (0+255),b
  5384                           
  5385                           ; BSR set to: 0
  5386  001E5A  0012               	return	
  5387  001E5C                     l5598:
  5388                           
  5389                           ; BSR set to: 0
  5390  001E5C  0100               	movlb	0	; () banked
  5391  001E5E  51CA               	movf	pow@yi& (0+255),w,b
  5392  001E60  0B01               	andlw	1
  5393  001E62  0100               	movlb	0	; () banked
  5394  001E64  6FC9               	movwf	pow@sign& (0+255),b
  5395                           
  5396                           ; BSR set to: 0
  5397  001E66  C0BD  F035         	movff	pow@x,___ftneg@f1
  5398  001E6A  C0BE  F036         	movff	pow@x+1,___ftneg@f1+1
  5399  001E6E  C0BF  F037         	movff	pow@x+2,___ftneg@f1+2
  5400  001E72  EC42  F01A         	call	___ftneg	;wreg free
  5401  001E76  C035  F0BD         	movff	?___ftneg,pow@x
  5402  001E7A  C036  F0BE         	movff	?___ftneg+1,pow@x+1
  5403  001E7E  C037  F0BF         	movff	?___ftneg+2,pow@x+2
  5404  001E82                     l5602:
  5405  001E82  C0BD  F09F         	movff	pow@x,log@x
  5406  001E86  C0BE  F0A0         	movff	pow@x+1,log@x+1
  5407  001E8A  C0BF  F0A1         	movff	pow@x+2,log@x+2
  5408  001E8E  EC2E  F010         	call	_log	;wreg free
  5409  001E92  C09F  F0C3         	movff	?_log,_pow$1578
  5410  001E96  C0A0  F0C4         	movff	?_log+1,_pow$1578+1
  5411  001E9A  C0A1  F0C5         	movff	?_log+2,_pow$1578+2
  5412  001E9E  C0C3  F041         	movff	_pow$1578,___ftmul@f1
  5413  001EA2  C0C4  F042         	movff	_pow$1578+1,___ftmul@f1+1
  5414  001EA6  C0C5  F043         	movff	_pow$1578+2,___ftmul@f1+2
  5415  001EAA  C0C0  F044         	movff	pow@y,___ftmul@f2
  5416  001EAE  C0C1  F045         	movff	pow@y+1,___ftmul@f2+1
  5417  001EB2  C0C2  F046         	movff	pow@y+2,___ftmul@f2+2
  5418  001EB6  ECCC  F010         	call	___ftmul	;wreg free
  5419  001EBA  C041  F0C6         	movff	?___ftmul,_pow$1579
  5420  001EBE  C042  F0C7         	movff	?___ftmul+1,_pow$1579+1
  5421  001EC2  C043  F0C8         	movff	?___ftmul+2,_pow$1579+2
  5422  001EC6  C0C6  F0B4         	movff	_pow$1579,exp@x
  5423  001ECA  C0C7  F0B5         	movff	_pow$1579+1,exp@x+1
  5424  001ECE  C0C8  F0B6         	movff	_pow$1579+2,exp@x+2
  5425  001ED2  ECC6  F00C         	call	_exp	;wreg free
  5426  001ED6  C0B4  F0BD         	movff	?_exp,pow@x
  5427  001EDA  C0B5  F0BE         	movff	?_exp+1,pow@x+1
  5428  001EDE  C0B6  F0BF         	movff	?_exp+2,pow@x+2
  5429  001EE2  0100               	movlb	0	; () banked
  5430  001EE4  51C9               	movf	pow@sign& (0+255),w,b
  5431  001EE6  0100               	movlb	0	; () banked
  5432  001EE8  B4D8               	btfsc	status,2,c
  5433  001EEA  D00F               	goto	l1013
  5434                           
  5435                           ; BSR set to: 0
  5436  001EEC  C0BD  F035         	movff	pow@x,___ftneg@f1
  5437  001EF0  C0BE  F036         	movff	pow@x+1,___ftneg@f1+1
  5438  001EF4  C0BF  F037         	movff	pow@x+2,___ftneg@f1+2
  5439  001EF8  EC42  F01A         	call	___ftneg	;wreg free
  5440  001EFC  C035  F0BD         	movff	?___ftneg,?_pow
  5441  001F00  C036  F0BE         	movff	?___ftneg+1,?_pow+1
  5442  001F04  C037  F0BF         	movff	?___ftneg+2,?_pow+2
  5443  001F08  0012               	return	
  5444  001F0A                     l1013:
  5445                           
  5446                           ; BSR set to: 0
  5447  001F0A  C0BD  F0BD         	movff	pow@x,?_pow
  5448  001F0E  C0BE  F0BE         	movff	pow@x+1,?_pow+1
  5449  001F12  C0BF  F0BF         	movff	pow@x+2,?_pow+2
  5450  001F16  0012               	return		;funcret
  5451  001F18                     __end_of_pow:
  5452                           	opt stack 0
  5453                           tblptru	equ	0xFF8
  5454                           tblptrh	equ	0xFF7
  5455                           tblptrl	equ	0xFF6
  5456                           tablat	equ	0xFF5
  5457                           intcon	equ	0xFF2
  5458                           intcon2	equ	0xFF1
  5459                           intcon3	equ	0xFF0
  5460                           postinc0	equ	0xFEE
  5461                           wreg	equ	0xFE8
  5462                           indf2	equ	0xFDF
  5463                           fsr2h	equ	0xFDA
  5464                           fsr2l	equ	0xFD9
  5465                           status	equ	0xFD8
  5466                           
  5467 ;; *************** function _log *****************
  5468 ;; Defined at:
  5469 ;;		line 5 in file "/Applications/microchip/xc8/v1.41/sources/common/log.c"
  5470 ;; Parameters:    Size  Location     Type
  5471 ;;  x               3   31[BANK0 ] unsigned char 
  5472 ;; Auto vars:     Size  Location     Type
  5473 ;;  exponent        2   34[BANK0 ] int 
  5474 ;; Return value:  Size  Location     Type
  5475 ;;                  3   31[BANK0 ] int 
  5476 ;; Registers used:
  5477 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5478 ;; Tracked objects:
  5479 ;;		On entry : 0/0
  5480 ;;		On exit  : 0/0
  5481 ;;		Unchanged: 0/0
  5482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5483 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5484 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5486 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5487 ;;Total ram usage:        5 bytes
  5488 ;; Hardware stack levels used:    1
  5489 ;; Hardware stack levels required when called:    8
  5490 ;; This function calls:
  5491 ;;		___awtoft
  5492 ;;		___ftadd
  5493 ;;		___ftmul
  5494 ;;		_eval_poly
  5495 ;;		_frexp
  5496 ;; This function is called by:
  5497 ;;		_pow
  5498 ;; This function uses a non-reentrant model
  5499 ;;
  5500                           
  5501                           	psect	text6
  5502  00205C                     __ptext6:
  5503                           	opt stack 0
  5504  00205C                     _log:
  5505                           	opt stack 19
  5506                           
  5507                           ;incstack = 0
  5508  00205C  0100               	movlb	0	; () banked
  5509  00205E  AFA1               	btfss	(log@x+2)& (0+255),7,b
  5510  002060  D00E               	goto	l5514
  5511                           
  5512                           ; BSR set to: 0
  5513  002062  0E00               	movlw	0
  5514  002064  6E4A               	movwf	_errno+1,c
  5515  002066  0E21               	movlw	33
  5516  002068  6E49               	movwf	_errno,c
  5517  00206A  0E00               	movlw	0
  5518  00206C  0100               	movlb	0	; () banked
  5519  00206E  6F9F               	movwf	?_log& (0+255),b
  5520  002070  0E00               	movlw	0
  5521  002072  0100               	movlb	0	; () banked
  5522  002074  6FA0               	movwf	(?_log+1)& (0+255),b
  5523  002076  0E00               	movlw	0
  5524  002078  0100               	movlb	0	; () banked
  5525  00207A  6FA1               	movwf	(?_log+2)& (0+255),b
  5526                           
  5527                           ; BSR set to: 0
  5528  00207C  0012               	return	
  5529  00207E                     l5514:
  5530                           
  5531                           ; BSR set to: 0
  5532  00207E  0100               	movlb	0	; () banked
  5533  002080  519F               	movf	log@x& (0+255),w,b
  5534  002082  0100               	movlb	0	; () banked
  5535  002084  11A0               	iorwf	(log@x+1)& (0+255),w,b
  5536  002086  0100               	movlb	0	; () banked
  5537  002088  11A1               	iorwf	(log@x+2)& (0+255),w,b
  5538  00208A  A4D8               	btfss	status,2,c
  5539  00208C  D00E               	goto	l5520
  5540                           
  5541                           ; BSR set to: 0
  5542  00208E  0E00               	movlw	0
  5543  002090  6E4A               	movwf	_errno+1,c
  5544  002092  0E22               	movlw	34
  5545  002094  6E49               	movwf	_errno,c
  5546  002096  0E00               	movlw	0
  5547  002098  0100               	movlb	0	; () banked
  5548  00209A  6F9F               	movwf	?_log& (0+255),b
  5549  00209C  0E00               	movlw	0
  5550  00209E  0100               	movlb	0	; () banked
  5551  0020A0  6FA0               	movwf	(?_log+1)& (0+255),b
  5552  0020A2  0E00               	movlw	0
  5553  0020A4  0100               	movlb	0	; () banked
  5554  0020A6  6FA1               	movwf	(?_log+2)& (0+255),b
  5555                           
  5556                           ; BSR set to: 0
  5557  0020A8  0012               	return	
  5558  0020AA                     l5520:
  5559                           
  5560                           ; BSR set to: 0
  5561  0020AA  0E00               	movlw	0
  5562  0020AC  6E44               	movwf	___ftmul@f2,c
  5563  0020AE  0E00               	movlw	0
  5564  0020B0  6E45               	movwf	___ftmul@f2+1,c
  5565  0020B2  0E40               	movlw	64
  5566  0020B4  6E46               	movwf	___ftmul@f2+2,c
  5567  0020B6  0EA2               	movlw	low log@exponent
  5568  0020B8  6E38               	movwf	frexp@eptr,c
  5569  0020BA  0E00               	movlw	high log@exponent
  5570  0020BC  6E39               	movwf	frexp@eptr+1,c
  5571  0020BE  C09F  F035         	movff	log@x,frexp@value
  5572  0020C2  C0A0  F036         	movff	log@x+1,frexp@value+1
  5573  0020C6  C0A1  F037         	movff	log@x+2,frexp@value+2
  5574  0020CA  EC6B  F015         	call	_frexp	;wreg free
  5575  0020CE  C035  F041         	movff	?_frexp,___ftmul@f1
  5576  0020D2  C036  F042         	movff	?_frexp+1,___ftmul@f1+1
  5577  0020D6  C037  F043         	movff	?_frexp+2,___ftmul@f1+2
  5578  0020DA  ECCC  F010         	call	___ftmul	;wreg free
  5579  0020DE  C041  F089         	movff	?___ftmul,___ftadd@f1
  5580  0020E2  C042  F08A         	movff	?___ftmul+1,___ftadd@f1+1
  5581  0020E6  C043  F08B         	movff	?___ftmul+2,___ftadd@f1+2
  5582  0020EA  0E00               	movlw	0
  5583  0020EC  0100               	movlb	0	; () banked
  5584  0020EE  6F8C               	movwf	___ftadd@f2& (0+255),b
  5585  0020F0  0E80               	movlw	128
  5586  0020F2  0100               	movlb	0	; () banked
  5587  0020F4  6F8D               	movwf	(___ftadd@f2+1)& (0+255),b
  5588  0020F6  0EBF               	movlw	191
  5589  0020F8  0100               	movlb	0	; () banked
  5590  0020FA  6F8E               	movwf	(___ftadd@f2+2)& (0+255),b
  5591  0020FC  EC92  F00B         	call	___ftadd	;wreg free
  5592  002100  C089  F09F         	movff	?___ftadd,log@x
  5593  002104  C08A  F0A0         	movff	?___ftadd+1,log@x+1
  5594  002108  C08B  F0A1         	movff	?___ftadd+2,log@x+2
  5595  00210C  0100               	movlb	0	; () banked
  5596  00210E  07A2               	decf	log@exponent& (0+255),f,b
  5597  002110  A0D8               	btfss	status,0,c
  5598  002112  07A3               	decf	(log@exponent+1)& (0+255),f,b
  5599                           
  5600                           ; BSR set to: 0
  5601  002114  C09F  F095         	movff	log@x,eval_poly@x
  5602  002118  C0A0  F096         	movff	log@x+1,eval_poly@x+1
  5603  00211C  C0A1  F097         	movff	log@x+2,eval_poly@x+2
  5604  002120  0E8B               	movlw	low log@coeff
  5605  002122  0100               	movlb	0	; () banked
  5606  002124  6F98               	movwf	eval_poly@d& (0+255),b
  5607  002126  0EFD               	movlw	high log@coeff
  5608  002128  0100               	movlb	0	; () banked
  5609  00212A  6F99               	movwf	(eval_poly@d+1)& (0+255),b
  5610  00212C  0E00               	movlw	0
  5611  00212E  0100               	movlb	0	; () banked
  5612  002130  6F9B               	movwf	(eval_poly@n+1)& (0+255),b
  5613  002132  0E08               	movlw	8
  5614  002134  6F9A               	movwf	eval_poly@n& (0+255),b
  5615  002136  EC5D  F014         	call	_eval_poly	;wreg free
  5616  00213A  C095  F09F         	movff	?_eval_poly,log@x
  5617  00213E  C096  F0A0         	movff	?_eval_poly+1,log@x+1
  5618  002142  C097  F0A1         	movff	?_eval_poly+2,log@x+2
  5619  002146  0E72               	movlw	114
  5620  002148  6E44               	movwf	___ftmul@f2,c
  5621  00214A  0E31               	movlw	49
  5622  00214C  6E45               	movwf	___ftmul@f2+1,c
  5623  00214E  0E3F               	movlw	63
  5624  002150  6E46               	movwf	___ftmul@f2+2,c
  5625  002152  C0A2  F03D         	movff	log@exponent,___awtoft@c
  5626  002156  C0A3  F03E         	movff	log@exponent+1,___awtoft@c+1
  5627  00215A  ECB3  F019         	call	___awtoft	;wreg free
  5628  00215E  C03D  F041         	movff	?___awtoft,___ftmul@f1
  5629  002162  C03E  F042         	movff	?___awtoft+1,___ftmul@f1+1
  5630  002166  C03F  F043         	movff	?___awtoft+2,___ftmul@f1+2
  5631  00216A  ECCC  F010         	call	___ftmul	;wreg free
  5632  00216E  C041  F089         	movff	?___ftmul,___ftadd@f1
  5633  002172  C042  F08A         	movff	?___ftmul+1,___ftadd@f1+1
  5634  002176  C043  F08B         	movff	?___ftmul+2,___ftadd@f1+2
  5635  00217A  C09F  F08C         	movff	log@x,___ftadd@f2
  5636  00217E  C0A0  F08D         	movff	log@x+1,___ftadd@f2+1
  5637  002182  C0A1  F08E         	movff	log@x+2,___ftadd@f2+2
  5638  002186  EC92  F00B         	call	___ftadd	;wreg free
  5639  00218A  C089  F09F         	movff	?___ftadd,?_log
  5640  00218E  C08A  F0A0         	movff	?___ftadd+1,?_log+1
  5641  002192  C08B  F0A1         	movff	?___ftadd+2,?_log+2
  5642  002196  0012               	return	
  5643  002198                     __end_of_log:
  5644                           	opt stack 0
  5645                           tblptru	equ	0xFF8
  5646                           tblptrh	equ	0xFF7
  5647                           tblptrl	equ	0xFF6
  5648                           tablat	equ	0xFF5
  5649                           intcon	equ	0xFF2
  5650                           intcon2	equ	0xFF1
  5651                           intcon3	equ	0xFF0
  5652                           postinc0	equ	0xFEE
  5653                           wreg	equ	0xFE8
  5654                           indf2	equ	0xFDF
  5655                           fsr2h	equ	0xFDA
  5656                           fsr2l	equ	0xFD9
  5657                           status	equ	0xFD8
  5658                           
  5659 ;; *************** function _exp *****************
  5660 ;; Defined at:
  5661 ;;		line 12 in file "/Applications/microchip/xc8/v1.41/sources/common/exp.c"
  5662 ;; Parameters:    Size  Location     Type
  5663 ;;  x               3   52[BANK0 ] int 
  5664 ;; Auto vars:     Size  Location     Type
  5665 ;;  exponent        2   58[BANK0 ] int 
  5666 ;;  sign            1   60[BANK0 ] unsigned char 
  5667 ;; Return value:  Size  Location     Type
  5668 ;;                  3   52[BANK0 ] unsigned char 
  5669 ;; Registers used:
  5670 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5671 ;; Tracked objects:
  5672 ;;		On entry : 0/0
  5673 ;;		On exit  : 0/0
  5674 ;;		Unchanged: 0/0
  5675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5676 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5677 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5679 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5680 ;;Total ram usage:        9 bytes
  5681 ;; Hardware stack levels used:    1
  5682 ;; Hardware stack levels required when called:    8
  5683 ;; This function calls:
  5684 ;;		___awtoft
  5685 ;;		___ftdiv
  5686 ;;		___ftge
  5687 ;;		___ftmul
  5688 ;;		___ftneg
  5689 ;;		___ftsub
  5690 ;;		___fttol
  5691 ;;		_eval_poly
  5692 ;;		_floor
  5693 ;;		_ldexp
  5694 ;; This function is called by:
  5695 ;;		_pow
  5696 ;; This function uses a non-reentrant model
  5697 ;;
  5698                           
  5699                           	psect	text7
  5700  00198C                     __ptext7:
  5701                           	opt stack 0
  5702  00198C                     _exp:
  5703                           	opt stack 19
  5704                           
  5705                           ;incstack = 0
  5706  00198C  0100               	movlb	0	; () banked
  5707  00198E  51B4               	movf	exp@x& (0+255),w,b
  5708  001990  0100               	movlb	0	; () banked
  5709  001992  11B5               	iorwf	(exp@x+1)& (0+255),w,b
  5710  001994  0100               	movlb	0	; () banked
  5711  001996  11B6               	iorwf	(exp@x+2)& (0+255),w,b
  5712  001998  A4D8               	btfss	status,2,c
  5713  00199A  D00A               	goto	l5536
  5714                           
  5715                           ; BSR set to: 0
  5716  00199C  0E00               	movlw	0
  5717  00199E  0100               	movlb	0	; () banked
  5718  0019A0  6FB4               	movwf	?_exp& (0+255),b
  5719  0019A2  0E80               	movlw	128
  5720  0019A4  0100               	movlb	0	; () banked
  5721  0019A6  6FB5               	movwf	(?_exp+1)& (0+255),b
  5722  0019A8  0E3F               	movlw	63
  5723  0019AA  0100               	movlb	0	; () banked
  5724  0019AC  6FB6               	movwf	(?_exp+2)& (0+255),b
  5725                           
  5726                           ; BSR set to: 0
  5727  0019AE  0012               	return	
  5728  0019B0                     l5536:
  5729                           
  5730                           ; BSR set to: 0
  5731  0019B0  0E72               	movlw	114
  5732  0019B2  6E35               	movwf	___ftge@ff1,c
  5733  0019B4  0E31               	movlw	49
  5734  0019B6  6E36               	movwf	___ftge@ff1+1,c
  5735  0019B8  0E44               	movlw	68
  5736  0019BA  6E37               	movwf	___ftge@ff1+2,c
  5737  0019BC  C0B4  F038         	movff	exp@x,___ftge@ff2
  5738  0019C0  C0B5  F039         	movff	exp@x+1,___ftge@ff2+1
  5739  0019C4  C0B6  F03A         	movff	exp@x+2,___ftge@ff2+2
  5740  0019C8  ECB3  F015         	call	___ftge	;wreg free
  5741  0019CC  B0D8               	btfsc	status,0,c
  5742  0019CE  D00E               	goto	l5542
  5743  0019D0  0E00               	movlw	0
  5744  0019D2  6E4A               	movwf	_errno+1,c
  5745  0019D4  0E22               	movlw	34
  5746  0019D6  6E49               	movwf	_errno,c
  5747  0019D8  0EFF               	movlw	255
  5748  0019DA  0100               	movlb	0	; () banked
  5749  0019DC  6FB4               	movwf	?_exp& (0+255),b
  5750  0019DE  0E7F               	movlw	127
  5751  0019E0  0100               	movlb	0	; () banked
  5752  0019E2  6FB5               	movwf	(?_exp+1)& (0+255),b
  5753  0019E4  0E7F               	movlw	127
  5754  0019E6  0100               	movlb	0	; () banked
  5755  0019E8  6FB6               	movwf	(?_exp+2)& (0+255),b
  5756                           
  5757                           ; BSR set to: 0
  5758  0019EA  0012               	return	
  5759  0019EC                     l5542:
  5760  0019EC  C0B4  F035         	movff	exp@x,___ftge@ff1
  5761  0019F0  C0B5  F036         	movff	exp@x+1,___ftge@ff1+1
  5762  0019F4  C0B6  F037         	movff	exp@x+2,___ftge@ff1+2
  5763  0019F8  0E49               	movlw	73
  5764  0019FA  6E38               	movwf	___ftge@ff2,c
  5765  0019FC  0E3A               	movlw	58
  5766  0019FE  6E39               	movwf	___ftge@ff2+1,c
  5767  001A00  0EC4               	movlw	196
  5768  001A02  6E3A               	movwf	___ftge@ff2+2,c
  5769  001A04  ECB3  F015         	call	___ftge	;wreg free
  5770  001A08  B0D8               	btfsc	status,0,c
  5771  001A0A  D00E               	goto	l5548
  5772  001A0C  0E00               	movlw	0
  5773  001A0E  6E4A               	movwf	_errno+1,c
  5774  001A10  0E22               	movlw	34
  5775  001A12  6E49               	movwf	_errno,c
  5776  001A14  0E00               	movlw	0
  5777  001A16  0100               	movlb	0	; () banked
  5778  001A18  6FB4               	movwf	?_exp& (0+255),b
  5779  001A1A  0E00               	movlw	0
  5780  001A1C  0100               	movlb	0	; () banked
  5781  001A1E  6FB5               	movwf	(?_exp+1)& (0+255),b
  5782  001A20  0E00               	movlw	0
  5783  001A22  0100               	movlb	0	; () banked
  5784  001A24  6FB6               	movwf	(?_exp+2)& (0+255),b
  5785                           
  5786                           ; BSR set to: 0
  5787  001A26  0012               	return	
  5788  001A28                     l5548:
  5789  001A28  0100               	movlb	0	; () banked
  5790  001A2A  AFB6               	btfss	(exp@x+2)& (0+255),7,b
  5791  001A2C  D002               	goto	u6330
  5792  001A2E  0E01               	movlw	1
  5793  001A30  D001               	goto	u6340
  5794  001A32                     u6330:
  5795  001A32  0E00               	movlw	0
  5796  001A34                     u6340:
  5797  001A34  0100               	movlb	0	; () banked
  5798  001A36  6FBC               	movwf	exp@sign& (0+255),b
  5799                           
  5800                           ; BSR set to: 0
  5801  001A38  0100               	movlb	0	; () banked
  5802  001A3A  51BC               	movf	exp@sign& (0+255),w,b
  5803  001A3C  0100               	movlb	0	; () banked
  5804  001A3E  B4D8               	btfsc	status,2,c
  5805  001A40  D00E               	goto	l1171
  5806                           
  5807                           ; BSR set to: 0
  5808  001A42  C0B4  F035         	movff	exp@x,___ftneg@f1
  5809  001A46  C0B5  F036         	movff	exp@x+1,___ftneg@f1+1
  5810  001A4A  C0B6  F037         	movff	exp@x+2,___ftneg@f1+2
  5811  001A4E  EC42  F01A         	call	___ftneg	;wreg free
  5812  001A52  C035  F0B4         	movff	?___ftneg,exp@x
  5813  001A56  C036  F0B5         	movff	?___ftneg+1,exp@x+1
  5814  001A5A  C037  F0B6         	movff	?___ftneg+2,exp@x+2
  5815  001A5E                     l1171:
  5816  001A5E  C0B4  F041         	movff	exp@x,___ftmul@f1
  5817  001A62  C0B5  F042         	movff	exp@x+1,___ftmul@f1+1
  5818  001A66  C0B6  F043         	movff	exp@x+2,___ftmul@f1+2
  5819  001A6A  0EAA               	movlw	170
  5820  001A6C  6E44               	movwf	___ftmul@f2,c
  5821  001A6E  0EB8               	movlw	184
  5822  001A70  6E45               	movwf	___ftmul@f2+1,c
  5823  001A72  0E3F               	movlw	63
  5824  001A74  6E46               	movwf	___ftmul@f2+2,c
  5825  001A76  ECCC  F010         	call	___ftmul	;wreg free
  5826  001A7A  C041  F0B4         	movff	?___ftmul,exp@x
  5827  001A7E  C042  F0B5         	movff	?___ftmul+1,exp@x+1
  5828  001A82  C043  F0B6         	movff	?___ftmul+2,exp@x+2
  5829  001A86  C0B4  F0AC         	movff	exp@x,floor@x
  5830  001A8A  C0B5  F0AD         	movff	exp@x+1,floor@x+1
  5831  001A8E  C0B6  F0AE         	movff	exp@x+2,floor@x+2
  5832  001A92  ECF7  F012         	call	_floor	;wreg free
  5833  001A96  C0AC  F0B7         	movff	?_floor,_exp$1580
  5834  001A9A  C0AD  F0B8         	movff	?_floor+1,_exp$1580+1
  5835  001A9E  C0AE  F0B9         	movff	?_floor+2,_exp$1580+2
  5836  001AA2  C0B7  F095         	movff	_exp$1580,___fttol@f1
  5837  001AA6  C0B8  F096         	movff	_exp$1580+1,___fttol@f1+1
  5838  001AAA  C0B9  F097         	movff	_exp$1580+2,___fttol@f1+2
  5839  001AAE  EC8C  F00F         	call	___fttol	;wreg free
  5840  001AB2  C095  F0BA         	movff	?___fttol,exp@exponent
  5841  001AB6  C096  F0BB         	movff	?___fttol+1,exp@exponent+1
  5842  001ABA  C0B4  F095         	movff	exp@x,___ftsub@f1
  5843  001ABE  C0B5  F096         	movff	exp@x+1,___ftsub@f1+1
  5844  001AC2  C0B6  F097         	movff	exp@x+2,___ftsub@f1+2
  5845  001AC6  C0BA  F03D         	movff	exp@exponent,___awtoft@c
  5846  001ACA  C0BB  F03E         	movff	exp@exponent+1,___awtoft@c+1
  5847  001ACE  ECB3  F019         	call	___awtoft	;wreg free
  5848  001AD2  C03D  F098         	movff	?___awtoft,___ftsub@f2
  5849  001AD6  C03E  F099         	movff	?___awtoft+1,___ftsub@f2+1
  5850  001ADA  C03F  F09A         	movff	?___awtoft+2,___ftsub@f2+2
  5851  001ADE  ECEC  F017         	call	___ftsub	;wreg free
  5852  001AE2  C095  F0B4         	movff	?___ftsub,exp@x
  5853  001AE6  C096  F0B5         	movff	?___ftsub+1,exp@x+1
  5854  001AEA  C097  F0B6         	movff	?___ftsub+2,exp@x+2
  5855  001AEE  C0B4  F095         	movff	exp@x,eval_poly@x
  5856  001AF2  C0B5  F096         	movff	exp@x+1,eval_poly@x+1
  5857  001AF6  C0B6  F097         	movff	exp@x+2,eval_poly@x+2
  5858  001AFA  0E6D               	movlw	low exp@coeff
  5859  001AFC  0100               	movlb	0	; () banked
  5860  001AFE  6F98               	movwf	eval_poly@d& (0+255),b
  5861  001B00  0EFD               	movlw	high exp@coeff
  5862  001B02  0100               	movlb	0	; () banked
  5863  001B04  6F99               	movwf	(eval_poly@d+1)& (0+255),b
  5864  001B06  0E00               	movlw	0
  5865  001B08  0100               	movlb	0	; () banked
  5866  001B0A  6F9B               	movwf	(eval_poly@n+1)& (0+255),b
  5867  001B0C  0E09               	movlw	9
  5868  001B0E  6F9A               	movwf	eval_poly@n& (0+255),b
  5869  001B10  EC5D  F014         	call	_eval_poly	;wreg free
  5870  001B14  C095  F09F         	movff	?_eval_poly,ldexp@value
  5871  001B18  C096  F0A0         	movff	?_eval_poly+1,ldexp@value+1
  5872  001B1C  C097  F0A1         	movff	?_eval_poly+2,ldexp@value+2
  5873  001B20  C0BA  F0A2         	movff	exp@exponent,ldexp@newexp
  5874  001B24  C0BB  F0A3         	movff	exp@exponent+1,ldexp@newexp+1
  5875  001B28  EC62  F011         	call	_ldexp	;wreg free
  5876  001B2C  C09F  F0B4         	movff	?_ldexp,exp@x
  5877  001B30  C0A0  F0B5         	movff	?_ldexp+1,exp@x+1
  5878  001B34  C0A1  F0B6         	movff	?_ldexp+2,exp@x+2
  5879  001B38  0100               	movlb	0	; () banked
  5880  001B3A  51BC               	movf	exp@sign& (0+255),w,b
  5881  001B3C  0100               	movlb	0	; () banked
  5882  001B3E  B4D8               	btfsc	status,2,c
  5883  001B40  D02B               	goto	l1172
  5884                           
  5885                           ; BSR set to: 0
  5886  001B42  0100               	movlb	0	; () banked
  5887  001B44  29B4               	incf	exp@x& (0+255),w,b
  5888  001B46  E113               	bnz	l5570
  5889  001B48  0E7F               	movlw	127
  5890  001B4A  0100               	movlb	0	; () banked
  5891  001B4C  19B5               	xorwf	(exp@x+1)& (0+255),w,b
  5892  001B4E  E10F               	bnz	l5570
  5893  001B50  0E7F               	movlw	127
  5894  001B52  0100               	movlb	0	; () banked
  5895  001B54  19B6               	xorwf	(exp@x+2)& (0+255),w,b
  5896  001B56  A4D8               	btfss	status,2,c
  5897  001B58  D00A               	goto	l5570
  5898                           
  5899                           ; BSR set to: 0
  5900  001B5A  0E00               	movlw	0
  5901  001B5C  0100               	movlb	0	; () banked
  5902  001B5E  6FB4               	movwf	?_exp& (0+255),b
  5903  001B60  0E00               	movlw	0
  5904  001B62  0100               	movlb	0	; () banked
  5905  001B64  6FB5               	movwf	(?_exp+1)& (0+255),b
  5906  001B66  0E00               	movlw	0
  5907  001B68  0100               	movlb	0	; () banked
  5908  001B6A  6FB6               	movwf	(?_exp+2)& (0+255),b
  5909                           
  5910                           ; BSR set to: 0
  5911  001B6C  0012               	return	
  5912  001B6E                     l5570:
  5913                           
  5914                           ; BSR set to: 0
  5915  001B6E  0E00               	movlw	0
  5916  001B70  6E3D               	movwf	___ftdiv@f1,c
  5917  001B72  0E80               	movlw	128
  5918  001B74  6E3E               	movwf	___ftdiv@f1+1,c
  5919  001B76  0E3F               	movlw	63
  5920  001B78  6E3F               	movwf	___ftdiv@f1+2,c
  5921  001B7A  C0B4  F040         	movff	exp@x,___ftdiv@f2
  5922  001B7E  C0B5  F041         	movff	exp@x+1,___ftdiv@f2+1
  5923  001B82  C0B6  F042         	movff	exp@x+2,___ftdiv@f2+2
  5924  001B86  EC75  F012         	call	___ftdiv	;wreg free
  5925  001B8A  C03D  F0B4         	movff	?___ftdiv,?_exp
  5926  001B8E  C03E  F0B5         	movff	?___ftdiv+1,?_exp+1
  5927  001B92  C03F  F0B6         	movff	?___ftdiv+2,?_exp+2
  5928  001B96  0012               	return	
  5929  001B98                     l1172:
  5930                           
  5931                           ; BSR set to: 0
  5932  001B98  C0B4  F0B4         	movff	exp@x,?_exp
  5933  001B9C  C0B5  F0B5         	movff	exp@x+1,?_exp+1
  5934  001BA0  C0B6  F0B6         	movff	exp@x+2,?_exp+2
  5935  001BA4  0012               	return		;funcret
  5936  001BA6                     __end_of_exp:
  5937                           	opt stack 0
  5938                           tblptru	equ	0xFF8
  5939                           tblptrh	equ	0xFF7
  5940                           tblptrl	equ	0xFF6
  5941                           tablat	equ	0xFF5
  5942                           intcon	equ	0xFF2
  5943                           intcon2	equ	0xFF1
  5944                           intcon3	equ	0xFF0
  5945                           postinc0	equ	0xFEE
  5946                           wreg	equ	0xFE8
  5947                           indf2	equ	0xFDF
  5948                           fsr2h	equ	0xFDA
  5949                           fsr2l	equ	0xFD9
  5950                           status	equ	0xFD8
  5951                           
  5952 ;; *************** function _ldexp *****************
  5953 ;; Defined at:
  5954 ;;		line 277 in file "/Applications/microchip/xc8/v1.41/sources/common/frexp.c"
  5955 ;; Parameters:    Size  Location     Type
  5956 ;;  value           3   31[BANK0 ] unsigned char 
  5957 ;;  newexp          2   34[BANK0 ] int 
  5958 ;; Auto vars:     Size  Location     Type
  5959 ;;		None
  5960 ;; Return value:  Size  Location     Type
  5961 ;;                  3   31[BANK0 ] int 
  5962 ;; Registers used:
  5963 ;;		wreg, status,2, status,0
  5964 ;; Tracked objects:
  5965 ;;		On entry : 0/0
  5966 ;;		On exit  : 0/0
  5967 ;;		Unchanged: 0/0
  5968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5969 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5971 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5972 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5973 ;;Total ram usage:        7 bytes
  5974 ;; Hardware stack levels used:    1
  5975 ;; Hardware stack levels required when called:    5
  5976 ;; This function calls:
  5977 ;;		Nothing
  5978 ;; This function is called by:
  5979 ;;		_exp
  5980 ;; This function uses a non-reentrant model
  5981 ;;
  5982                           
  5983                           	psect	text8
  5984  0022C4                     __ptext8:
  5985                           	opt stack 0
  5986  0022C4                     _ldexp:
  5987                           	opt stack 21
  5988                           
  5989                           ;incstack = 0
  5990  0022C4  0100               	movlb	0	; () banked
  5991  0022C6  519F               	movf	ldexp@value& (0+255),w,b
  5992  0022C8  0100               	movlb	0	; () banked
  5993  0022CA  11A0               	iorwf	(ldexp@value+1)& (0+255),w,b
  5994  0022CC  0100               	movlb	0	; () banked
  5995  0022CE  11A1               	iorwf	(ldexp@value+2)& (0+255),w,b
  5996  0022D0  A4D8               	btfss	status,2,c
  5997  0022D2  D00A               	goto	l3628
  5998                           
  5999                           ; BSR set to: 0
  6000  0022D4  0E00               	movlw	0
  6001  0022D6  0100               	movlb	0	; () banked
  6002  0022D8  6F9F               	movwf	?_ldexp& (0+255),b
  6003  0022DA  0E00               	movlw	0
  6004  0022DC  0100               	movlb	0	; () banked
  6005  0022DE  6FA0               	movwf	(?_ldexp+1)& (0+255),b
  6006  0022E0  0E00               	movlw	0
  6007  0022E2  0100               	movlb	0	; () banked
  6008  0022E4  6FA1               	movwf	(?_ldexp+2)& (0+255),b
  6009                           
  6010                           ; BSR set to: 0
  6011  0022E6  0012               	return	
  6012  0022E8                     l3628:
  6013                           
  6014                           ; BSR set to: 0
  6015  0022E8  0100               	movlb	0	; () banked
  6016  0022EA  51A1               	movf	(ldexp@value+2)& (0+255),w,b
  6017  0022EC  0B7F               	andlw	127
  6018  0022EE  0100               	movlb	0	; () banked
  6019  0022F0  6FA4               	movwf	??_ldexp& (0+255),b
  6020  0022F2  6BA5               	clrf	(??_ldexp+1)& (0+255),b
  6021  0022F4  90D8               	bcf	status,0,c
  6022  0022F6  0100               	movlb	0	; () banked
  6023  0022F8  37A4               	rlcf	??_ldexp& (0+255),f,b
  6024  0022FA  37A5               	rlcf	(??_ldexp+1)& (0+255),f,b
  6025  0022FC  0100               	movlb	0	; () banked
  6026  0022FE  51A4               	movf	??_ldexp& (0+255),w,b
  6027  002300  0100               	movlb	0	; () banked
  6028  002302  27A2               	addwf	ldexp@newexp& (0+255),f,b
  6029  002304  0100               	movlb	0	; () banked
  6030  002306  51A5               	movf	(??_ldexp+1)& (0+255),w,b
  6031  002308  0100               	movlb	0	; () banked
  6032  00230A  23A3               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  6033  00230C  0100               	movlb	0	; () banked
  6034  00230E  AFA0               	btfss	(ldexp@value+1)& (0+255),7,b
  6035  002310  D004               	goto	u3540
  6036  002312  0100               	movlb	0	; () banked
  6037  002314  6BA4               	clrf	??_ldexp& (0+255),b
  6038  002316  2BA4               	incf	??_ldexp& (0+255),f,b
  6039  002318  D002               	goto	u3548
  6040  00231A                     u3540:
  6041  00231A  0100               	movlb	0	; () banked
  6042  00231C  6BA4               	clrf	??_ldexp& (0+255),b
  6043  00231E                     u3548:
  6044  00231E  0100               	movlb	0	; () banked
  6045  002320  51A4               	movf	??_ldexp& (0+255),w,b
  6046  002322  0100               	movlb	0	; () banked
  6047  002324  27A2               	addwf	ldexp@newexp& (0+255),f,b
  6048  002326  0E00               	movlw	0
  6049  002328  23A3               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  6050  00232A  0100               	movlb	0	; () banked
  6051  00232C  AFA3               	btfss	(ldexp@newexp+1)& (0+255),7,b
  6052  00232E  D00E               	goto	l3636
  6053                           
  6054                           ; BSR set to: 0
  6055  002330  0E00               	movlw	0
  6056  002332  6E4A               	movwf	_errno+1,c
  6057  002334  0E22               	movlw	34
  6058  002336  6E49               	movwf	_errno,c
  6059  002338  0E00               	movlw	0
  6060  00233A  0100               	movlb	0	; () banked
  6061  00233C  6F9F               	movwf	?_ldexp& (0+255),b
  6062  00233E  0E00               	movlw	0
  6063  002340  0100               	movlb	0	; () banked
  6064  002342  6FA0               	movwf	(?_ldexp+1)& (0+255),b
  6065  002344  0E00               	movlw	0
  6066  002346                     L12:
  6067  002346  0100               	movlb	0	; () banked
  6068  002348  6FA1               	movwf	(?_ldexp+2)& (0+255),b
  6069                           
  6070                           ; BSR set to: 0
  6071  00234A  0012               	return	
  6072  00234C                     l3636:
  6073                           
  6074                           ; BSR set to: 0
  6075  00234C  0100               	movlb	0	; () banked
  6076  00234E  BFA3               	btfsc	(ldexp@newexp+1)& (0+255),7,b
  6077  002350  D01B               	goto	l3652
  6078  002352  0100               	movlb	0	; () banked
  6079  002354  05A3               	decf	(ldexp@newexp+1)& (0+255),w,b
  6080  002356  A0D8               	btfss	status,0,c
  6081  002358  D017               	goto	l3652
  6082                           
  6083                           ; BSR set to: 0
  6084  00235A  0E00               	movlw	0
  6085  00235C  6E4A               	movwf	_errno+1,c
  6086  00235E  0E22               	movlw	34
  6087  002360  6E49               	movwf	_errno,c
  6088                           
  6089                           ; BSR set to: 0
  6090  002362  0100               	movlb	0	; () banked
  6091  002364  AFA1               	btfss	(ldexp@value+2)& (0+255),7,b
  6092  002366  D008               	goto	l3648
  6093                           
  6094                           ; BSR set to: 0
  6095  002368  0EFF               	movlw	255
  6096  00236A  0100               	movlb	0	; () banked
  6097  00236C  6F9F               	movwf	?_ldexp& (0+255),b
  6098  00236E  0E7F               	movlw	127
  6099  002370  0100               	movlb	0	; () banked
  6100  002372  6FA0               	movwf	(?_ldexp+1)& (0+255),b
  6101  002374  0EFF               	movlw	255
  6102  002376  D7E7               	goto	L12
  6103  002378                     l3648:
  6104                           
  6105                           ; BSR set to: 0
  6106  002378  0EFF               	movlw	255
  6107  00237A  0100               	movlb	0	; () banked
  6108  00237C  6F9F               	movwf	?_ldexp& (0+255),b
  6109  00237E  0E7F               	movlw	127
  6110  002380  0100               	movlb	0	; () banked
  6111  002382  6FA0               	movwf	(?_ldexp+1)& (0+255),b
  6112  002384  0E7F               	movlw	127
  6113  002386  D7DF               	goto	L12
  6114  002388                     l3652:
  6115                           
  6116                           ; BSR set to: 0
  6117  002388  0100               	movlb	0	; () banked
  6118  00238A  35A3               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  6119  00238C  31A3               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  6120  00238E  0100               	movlb	0	; () banked
  6121  002390  6FA5               	movwf	(??_ldexp+1)& (0+255),b
  6122  002392  0100               	movlb	0	; () banked
  6123  002394  31A2               	rrcf	ldexp@newexp& (0+255),w,b
  6124  002396  0100               	movlb	0	; () banked
  6125  002398  6FA4               	movwf	??_ldexp& (0+255),b
  6126  00239A  0100               	movlb	0	; () banked
  6127  00239C  51A1               	movf	(ldexp@value+2)& (0+255),w,b
  6128  00239E  0100               	movlb	0	; () banked
  6129  0023A0  19A4               	xorwf	??_ldexp& (0+255),w,b
  6130  0023A2  0B80               	andlw	-128
  6131  0023A4  19A4               	xorwf	??_ldexp& (0+255),w,b
  6132  0023A6  0100               	movlb	0	; () banked
  6133  0023A8  6FA1               	movwf	(ldexp@value+2)& (0+255),b
  6134  0023AA  C0A2  F0A4         	movff	ldexp@newexp,??_ldexp
  6135  0023AE  0E01               	movlw	1
  6136  0023B0  0100               	movlb	0	; () banked
  6137  0023B2  17A4               	andwf	??_ldexp& (0+255),f,b
  6138  0023B4  0100               	movlb	0	; () banked
  6139  0023B6  33A4               	rrcf	??_ldexp& (0+255),f,b
  6140  0023B8  33A4               	rrcf	??_ldexp& (0+255),f,b
  6141  0023BA  0100               	movlb	0	; () banked
  6142  0023BC  51A0               	movf	(ldexp@value+1)& (0+255),w,b
  6143  0023BE  0100               	movlb	0	; () banked
  6144  0023C0  19A4               	xorwf	??_ldexp& (0+255),w,b
  6145  0023C2  0B7F               	andlw	-129
  6146  0023C4  19A4               	xorwf	??_ldexp& (0+255),w,b
  6147  0023C6  0100               	movlb	0	; () banked
  6148  0023C8  6FA0               	movwf	(ldexp@value+1)& (0+255),b
  6149                           
  6150                           ; BSR set to: 0
  6151                           
  6152                           ; BSR set to: 0
  6153                           
  6154                           ; BSR set to: 0
  6155  0023CA  C09F  F09F         	movff	ldexp@value,?_ldexp
  6156  0023CE  C0A0  F0A0         	movff	ldexp@value+1,?_ldexp+1
  6157  0023D2  C0A1  F0A1         	movff	ldexp@value+2,?_ldexp+2
  6158  0023D6  0012               	return	
  6159  0023D8                     __end_of_ldexp:
  6160                           	opt stack 0
  6161                           tblptru	equ	0xFF8
  6162                           tblptrh	equ	0xFF7
  6163                           tblptrl	equ	0xFF6
  6164                           tablat	equ	0xFF5
  6165                           intcon	equ	0xFF2
  6166                           intcon2	equ	0xFF1
  6167                           intcon3	equ	0xFF0
  6168                           postinc0	equ	0xFEE
  6169                           wreg	equ	0xFE8
  6170                           indf2	equ	0xFDF
  6171                           fsr2h	equ	0xFDA
  6172                           fsr2l	equ	0xFD9
  6173                           status	equ	0xFD8
  6174                           
  6175 ;; *************** function _floor *****************
  6176 ;; Defined at:
  6177 ;;		line 13 in file "/Applications/microchip/xc8/v1.41/sources/common/floor.c"
  6178 ;; Parameters:    Size  Location     Type
  6179 ;;  x               3   44[BANK0 ] int 
  6180 ;; Auto vars:     Size  Location     Type
  6181 ;;  i               3   47[BANK0 ] int 
  6182 ;;  expon           2   50[BANK0 ] int 
  6183 ;; Return value:  Size  Location     Type
  6184 ;;                  3   44[BANK0 ] int 
  6185 ;; Registers used:
  6186 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6187 ;; Tracked objects:
  6188 ;;		On entry : 0/0
  6189 ;;		On exit  : 0/0
  6190 ;;		Unchanged: 0/0
  6191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6192 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6193 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6195 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6196 ;;Total ram usage:        8 bytes
  6197 ;; Hardware stack levels used:    1
  6198 ;; Hardware stack levels required when called:    7
  6199 ;; This function calls:
  6200 ;;		___altoft
  6201 ;;		___ftadd
  6202 ;;		___ftge
  6203 ;;		___fttol
  6204 ;;		_frexp
  6205 ;; This function is called by:
  6206 ;;		_exp
  6207 ;; This function uses a non-reentrant model
  6208 ;;
  6209                           
  6210                           	psect	text9
  6211  0025EE                     __ptext9:
  6212                           	opt stack 0
  6213  0025EE                     _floor:
  6214                           	opt stack 19
  6215                           
  6216                           ; BSR set to: 0
  6217                           ;incstack = 0
  6218  0025EE  C0AC  F035         	movff	floor@x,frexp@value
  6219  0025F2  C0AD  F036         	movff	floor@x+1,frexp@value+1
  6220  0025F6  C0AE  F037         	movff	floor@x+2,frexp@value+2
  6221  0025FA  0EB2               	movlw	low floor@expon
  6222  0025FC  6E38               	movwf	frexp@eptr,c
  6223  0025FE  0E00               	movlw	high floor@expon
  6224  002600  6E39               	movwf	frexp@eptr+1,c
  6225  002602  EC6B  F015         	call	_frexp	;wreg free
  6226  002606  0100               	movlb	0	; () banked
  6227  002608  AFB3               	btfss	(floor@expon+1)& (0+255),7,b
  6228  00260A  D017               	goto	l5482
  6229                           
  6230                           ; BSR set to: 0
  6231  00260C  0100               	movlb	0	; () banked
  6232  00260E  AFAE               	btfss	(floor@x+2)& (0+255),7,b
  6233  002610  D00A               	goto	l5478
  6234                           
  6235                           ; BSR set to: 0
  6236  002612  0E00               	movlw	0
  6237  002614  0100               	movlb	0	; () banked
  6238  002616  6FAC               	movwf	?_floor& (0+255),b
  6239  002618  0E80               	movlw	128
  6240  00261A  0100               	movlb	0	; () banked
  6241  00261C  6FAD               	movwf	(?_floor+1)& (0+255),b
  6242  00261E  0EBF               	movlw	191
  6243  002620  0100               	movlb	0	; () banked
  6244  002622  6FAE               	movwf	(?_floor+2)& (0+255),b
  6245                           
  6246                           ; BSR set to: 0
  6247  002624  0012               	return	
  6248  002626                     l5478:
  6249                           
  6250                           ; BSR set to: 0
  6251  002626  0E00               	movlw	0
  6252  002628  0100               	movlb	0	; () banked
  6253  00262A  6FAC               	movwf	?_floor& (0+255),b
  6254  00262C  0E00               	movlw	0
  6255  00262E  0100               	movlb	0	; () banked
  6256  002630  6FAD               	movwf	(?_floor+1)& (0+255),b
  6257  002632  0E00               	movlw	0
  6258  002634  0100               	movlb	0	; () banked
  6259  002636  6FAE               	movwf	(?_floor+2)& (0+255),b
  6260                           
  6261                           ; BSR set to: 0
  6262  002638  0012               	return	
  6263  00263A                     l5482:
  6264                           
  6265                           ; BSR set to: 0
  6266  00263A  0100               	movlb	0	; () banked
  6267  00263C  51B3               	movf	(floor@expon+1)& (0+255),w,b
  6268  00263E  E105               	bnz	u6240
  6269  002640  0E15               	movlw	21
  6270  002642  0100               	movlb	0	; () banked
  6271  002644  5DB2               	subwf	floor@expon& (0+255),w,b
  6272  002646  A0D8               	btfss	status,0,c
  6273  002648  D007               	goto	l5486
  6274  00264A                     u6240:
  6275                           
  6276                           ; BSR set to: 0
  6277  00264A  C0AC  F0AC         	movff	floor@x,?_floor
  6278  00264E  C0AD  F0AD         	movff	floor@x+1,?_floor+1
  6279  002652  C0AE  F0AE         	movff	floor@x+2,?_floor+2
  6280  002656  0012               	return	
  6281  002658                     l5486:
  6282                           
  6283                           ; BSR set to: 0
  6284  002658  C0AC  F095         	movff	floor@x,___fttol@f1
  6285  00265C  C0AD  F096         	movff	floor@x+1,___fttol@f1+1
  6286  002660  C0AE  F097         	movff	floor@x+2,___fttol@f1+2
  6287  002664  EC8C  F00F         	call	___fttol	;wreg free
  6288  002668  C095  F0A4         	movff	?___fttol,___altoft@c
  6289  00266C  C096  F0A5         	movff	?___fttol+1,___altoft@c+1
  6290  002670  C097  F0A6         	movff	?___fttol+2,___altoft@c+2
  6291  002674  C098  F0A7         	movff	?___fttol+3,___altoft@c+3
  6292  002678  EC20  F015         	call	___altoft	;wreg free
  6293  00267C  C0A4  F0AF         	movff	?___altoft,floor@i
  6294  002680  C0A5  F0B0         	movff	?___altoft+1,floor@i+1
  6295  002684  C0A6  F0B1         	movff	?___altoft+2,floor@i+2
  6296  002688  C0AC  F035         	movff	floor@x,___ftge@ff1
  6297  00268C  C0AD  F036         	movff	floor@x+1,___ftge@ff1+1
  6298  002690  C0AE  F037         	movff	floor@x+2,___ftge@ff1+2
  6299  002694  C0AF  F038         	movff	floor@i,___ftge@ff2
  6300  002698  C0B0  F039         	movff	floor@i+1,___ftge@ff2+1
  6301  00269C  C0B1  F03A         	movff	floor@i+2,___ftge@ff2+2
  6302  0026A0  ECB3  F015         	call	___ftge	;wreg free
  6303  0026A4  B0D8               	btfsc	status,0,c
  6304  0026A6  D018               	goto	l1182
  6305  0026A8  C0AF  F089         	movff	floor@i,___ftadd@f1
  6306  0026AC  C0B0  F08A         	movff	floor@i+1,___ftadd@f1+1
  6307  0026B0  C0B1  F08B         	movff	floor@i+2,___ftadd@f1+2
  6308  0026B4  0E00               	movlw	0
  6309  0026B6  0100               	movlb	0	; () banked
  6310  0026B8  6F8C               	movwf	___ftadd@f2& (0+255),b
  6311  0026BA  0E80               	movlw	128
  6312  0026BC  0100               	movlb	0	; () banked
  6313  0026BE  6F8D               	movwf	(___ftadd@f2+1)& (0+255),b
  6314  0026C0  0EBF               	movlw	191
  6315  0026C2  0100               	movlb	0	; () banked
  6316  0026C4  6F8E               	movwf	(___ftadd@f2+2)& (0+255),b
  6317  0026C6  EC92  F00B         	call	___ftadd	;wreg free
  6318  0026CA  C089  F0AC         	movff	?___ftadd,?_floor
  6319  0026CE  C08A  F0AD         	movff	?___ftadd+1,?_floor+1
  6320  0026D2  C08B  F0AE         	movff	?___ftadd+2,?_floor+2
  6321  0026D6  0012               	return	
  6322  0026D8                     l1182:
  6323  0026D8  C0AF  F0AC         	movff	floor@i,?_floor
  6324  0026DC  C0B0  F0AD         	movff	floor@i+1,?_floor+1
  6325  0026E0  C0B1  F0AE         	movff	floor@i+2,?_floor+2
  6326  0026E4  0012               	return		;funcret
  6327  0026E6                     __end_of_floor:
  6328                           	opt stack 0
  6329                           tblptru	equ	0xFF8
  6330                           tblptrh	equ	0xFF7
  6331                           tblptrl	equ	0xFF6
  6332                           tablat	equ	0xFF5
  6333                           intcon	equ	0xFF2
  6334                           intcon2	equ	0xFF1
  6335                           intcon3	equ	0xFF0
  6336                           postinc0	equ	0xFEE
  6337                           wreg	equ	0xFE8
  6338                           indf2	equ	0xFDF
  6339                           fsr2h	equ	0xFDA
  6340                           fsr2l	equ	0xFD9
  6341                           status	equ	0xFD8
  6342                           
  6343 ;; *************** function _frexp *****************
  6344 ;; Defined at:
  6345 ;;		line 254 in file "/Applications/microchip/xc8/v1.41/sources/common/frexp.c"
  6346 ;; Parameters:    Size  Location     Type
  6347 ;;  value           3   52[COMRAM] int 
  6348 ;;  eptr            2   55[COMRAM] PTR int 
  6349 ;;		 -> log@exponent(2), floor@expon(2), 
  6350 ;; Auto vars:     Size  Location     Type
  6351 ;;		None
  6352 ;; Return value:  Size  Location     Type
  6353 ;;                  3   52[COMRAM] PTR int 
  6354 ;; Registers used:
  6355 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6356 ;; Tracked objects:
  6357 ;;		On entry : 0/0
  6358 ;;		On exit  : 0/0
  6359 ;;		Unchanged: 0/0
  6360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6361 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6363 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6364 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6365 ;;Total ram usage:        7 bytes
  6366 ;; Hardware stack levels used:    1
  6367 ;; Hardware stack levels required when called:    5
  6368 ;; This function calls:
  6369 ;;		Nothing
  6370 ;; This function is called by:
  6371 ;;		_floor
  6372 ;;		_log
  6373 ;; This function uses a non-reentrant model
  6374 ;;
  6375                           
  6376                           	psect	text10
  6377  002AD6                     __ptext10:
  6378                           	opt stack 0
  6379  002AD6                     _frexp:
  6380                           	opt stack 21
  6381                           
  6382                           ;incstack = 0
  6383  002AD6  5035               	movf	frexp@value,w,c
  6384  002AD8  1036               	iorwf	frexp@value+1,w,c
  6385  002ADA  1037               	iorwf	frexp@value+2,w,c
  6386  002ADC  A4D8               	btfss	status,2,c
  6387  002ADE  D00F               	goto	l3510
  6388  002AE0  C038  FFD9         	movff	frexp@eptr,fsr2l
  6389  002AE4  C039  FFDA         	movff	frexp@eptr+1,fsr2h
  6390  002AE8  0E00               	movlw	0
  6391  002AEA  6EDE               	movwf	postinc2,c
  6392  002AEC  0E00               	movlw	0
  6393  002AEE  6EDD               	movwf	postdec2,c
  6394  002AF0  0E00               	movlw	0
  6395  002AF2  6E35               	movwf	?_frexp,c
  6396  002AF4  0E00               	movlw	0
  6397  002AF6  6E36               	movwf	?_frexp+1,c
  6398  002AF8  0E00               	movlw	0
  6399  002AFA  6E37               	movwf	?_frexp+2,c
  6400  002AFC  0012               	return	
  6401  002AFE                     l3510:
  6402  002AFE  5037               	movf	frexp@value+2,w,c
  6403  002B00  0B7F               	andlw	127
  6404  002B02  6E3A               	movwf	??_frexp& (0+255),c
  6405  002B04  6A3B               	clrf	(??_frexp+1)& (0+255),c
  6406  002B06  90D8               	bcf	status,0,c
  6407  002B08  363A               	rlcf	??_frexp,f,c
  6408  002B0A  363B               	rlcf	??_frexp+1,f,c
  6409  002B0C  C038  FFD9         	movff	frexp@eptr,fsr2l
  6410  002B10  C039  FFDA         	movff	frexp@eptr+1,fsr2h
  6411  002B14  C03A  FFDE         	movff	??_frexp,postinc2
  6412  002B18  C03B  FFDD         	movff	??_frexp+1,postdec2
  6413  002B1C  AE36               	btfss	frexp@value+1,7,c
  6414  002B1E  D003               	goto	u3390
  6415  002B20  6A3A               	clrf	??_frexp& (0+255),c
  6416  002B22  2A3A               	incf	??_frexp& (0+255),f,c
  6417  002B24  D001               	goto	u3398
  6418  002B26                     u3390:
  6419  002B26  6A3A               	clrf	??_frexp& (0+255),c
  6420  002B28                     u3398:
  6421  002B28  503A               	movf	??_frexp,w,c
  6422  002B2A  C038  FFD9         	movff	frexp@eptr,fsr2l
  6423  002B2E  C039  FFDA         	movff	frexp@eptr+1,fsr2h
  6424  002B32  12DE               	iorwf	postinc2,f,c
  6425  002B34  0E00               	movlw	0
  6426  002B36  12DD               	iorwf	postdec2,f,c
  6427  002B38  C038  FFD9         	movff	frexp@eptr,fsr2l
  6428  002B3C  C039  FFDA         	movff	frexp@eptr+1,fsr2h
  6429  002B40  0E82               	movlw	130
  6430  002B42  26DE               	addwf	postinc2,f,c
  6431  002B44  0EFF               	movlw	255
  6432  002B46  22DD               	addwfc	postdec2,f,c
  6433  002B48  8037               	bsf	frexp@value+2,0,c
  6434  002B4A  8237               	bsf	frexp@value+2,1,c
  6435  002B4C  8437               	bsf	frexp@value+2,2,c
  6436  002B4E  8637               	bsf	frexp@value+2,3,c
  6437  002B50  8837               	bsf	frexp@value+2,4,c
  6438  002B52  8A37               	bsf	frexp@value+2,5,c
  6439  002B54  9C37               	bcf	frexp@value+2,6,c
  6440  002B56  9E36               	bcf	frexp@value+1,7,c
  6441  002B58  C035  F035         	movff	frexp@value,?_frexp
  6442  002B5C  C036  F036         	movff	frexp@value+1,?_frexp+1
  6443  002B60  C037  F037         	movff	frexp@value+2,?_frexp+2
  6444  002B64  0012               	return	
  6445  002B66                     __end_of_frexp:
  6446                           	opt stack 0
  6447                           tblptru	equ	0xFF8
  6448                           tblptrh	equ	0xFF7
  6449                           tblptrl	equ	0xFF6
  6450                           tablat	equ	0xFF5
  6451                           intcon	equ	0xFF2
  6452                           intcon2	equ	0xFF1
  6453                           intcon3	equ	0xFF0
  6454                           postinc0	equ	0xFEE
  6455                           wreg	equ	0xFE8
  6456                           indf2	equ	0xFDF
  6457                           postinc2	equ	0xFDE
  6458                           postdec2	equ	0xFDD
  6459                           fsr2h	equ	0xFDA
  6460                           fsr2l	equ	0xFD9
  6461                           status	equ	0xFD8
  6462                           
  6463 ;; *************** function ___fttol *****************
  6464 ;; Defined at:
  6465 ;;		line 44 in file "/Applications/microchip/xc8/v1.41/sources/common/fttol.c"
  6466 ;; Parameters:    Size  Location     Type
  6467 ;;  f1              3   21[BANK0 ] float 
  6468 ;; Auto vars:     Size  Location     Type
  6469 ;;  lval            4   31[BANK0 ] unsigned long 
  6470 ;;  exp1            1   35[BANK0 ] unsigned char 
  6471 ;;  sign1           1   30[BANK0 ] unsigned char 
  6472 ;; Return value:  Size  Location     Type
  6473 ;;                  4   21[BANK0 ] long 
  6474 ;; Registers used:
  6475 ;;		wreg, status,2, status,0
  6476 ;; Tracked objects:
  6477 ;;		On entry : 0/0
  6478 ;;		On exit  : 0/0
  6479 ;;		Unchanged: 0/0
  6480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6481 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6482 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6483 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6484 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6485 ;;Total ram usage:       15 bytes
  6486 ;; Hardware stack levels used:    1
  6487 ;; Hardware stack levels required when called:    5
  6488 ;; This function calls:
  6489 ;;		Nothing
  6490 ;; This function is called by:
  6491 ;;		_dec2hex
  6492 ;;		_pow
  6493 ;;		_exp
  6494 ;;		_floor
  6495 ;; This function uses a non-reentrant model
  6496 ;;
  6497                           
  6498                           	psect	text11
  6499  001F18                     __ptext11:
  6500                           	opt stack 0
  6501  001F18                     ___fttol:
  6502                           	opt stack 20
  6503                           
  6504                           ;incstack = 0
  6505  001F18  C097  F099         	movff	___fttol@f1+2,??___fttol
  6506  001F1C  0100               	movlb	0	; () banked
  6507  001F1E  6B9A               	clrf	(??___fttol+1)& (0+255),b
  6508  001F20  6B9B               	clrf	(??___fttol+2)& (0+255),b
  6509  001F22  0100               	movlb	0	; () banked
  6510  001F24  3596               	rlcf	(___fttol@f1+1)& (0+255),w,b
  6511  001F26  0100               	movlb	0	; () banked
  6512  001F28  3799               	rlcf	??___fttol& (0+255),f,b
  6513  001F2A  E301               	bnc	u3301
  6514  001F2C  819A               	bsf	(??___fttol+1)& (0+255),0,b
  6515  001F2E                     u3301:
  6516  001F2E  0100               	movlb	0	; () banked
  6517  001F30  5199               	movf	??___fttol& (0+255),w,b
  6518  001F32  0100               	movlb	0	; () banked
  6519  001F34  6FA3               	movwf	___fttol@exp1& (0+255),b
  6520  001F36  0100               	movlb	0	; () banked
  6521  001F38  51A3               	movf	___fttol@exp1& (0+255),w,b
  6522  001F3A  A4D8               	btfss	status,2,c
  6523  001F3C  D00A               	goto	l3462
  6524                           
  6525                           ; BSR set to: 0
  6526  001F3E  0E00               	movlw	0
  6527  001F40  0100               	movlb	0	; () banked
  6528  001F42  6F95               	movwf	?___fttol& (0+255),b
  6529  001F44  0E00               	movlw	0
  6530  001F46  6F96               	movwf	(?___fttol+1)& (0+255),b
  6531  001F48  0E00               	movlw	0
  6532  001F4A  6F97               	movwf	(?___fttol+2)& (0+255),b
  6533  001F4C  0E00               	movlw	0
  6534  001F4E  6F98               	movwf	(?___fttol+3)& (0+255),b
  6535                           
  6536                           ; BSR set to: 0
  6537  001F50  0012               	return	
  6538  001F52                     l3462:
  6539                           
  6540                           ; BSR set to: 0
  6541  001F52  0E17               	movlw	23
  6542  001F54  0100               	movlb	0	; () banked
  6543  001F56  6F99               	movwf	??___fttol& (0+255),b
  6544  001F58  C095  F09A         	movff	___fttol@f1,??___fttol+1
  6545  001F5C  C096  F09B         	movff	___fttol@f1+1,??___fttol+2
  6546  001F60  C097  F09C         	movff	___fttol@f1+2,??___fttol+3
  6547  001F64  0100               	movlb	0	; () banked
  6548  001F66  2999               	incf	??___fttol& (0+255),w,b
  6549  001F68  0100               	movlb	0	; () banked
  6550  001F6A  6F9D               	movwf	(??___fttol+4)& (0+255),b
  6551  001F6C  D005               	goto	u3320
  6552  001F6E                     u3325:
  6553  001F6E  0100               	movlb	0	; () banked
  6554  001F70  90D8               	bcf	status,0,c
  6555  001F72  339C               	rrcf	(??___fttol+3)& (0+255),f,b
  6556  001F74  339B               	rrcf	(??___fttol+2)& (0+255),f,b
  6557  001F76  339A               	rrcf	(??___fttol+1)& (0+255),f,b
  6558  001F78                     u3320:
  6559  001F78  0100               	movlb	0	; () banked
  6560  001F7A  2F9D               	decfsz	(??___fttol+4)& (0+255),f,b
  6561  001F7C  D7F8               	goto	u3325
  6562  001F7E  0100               	movlb	0	; () banked
  6563  001F80  519A               	movf	(??___fttol+1)& (0+255),w,b
  6564  001F82  0100               	movlb	0	; () banked
  6565  001F84  6F9E               	movwf	___fttol@sign1& (0+255),b
  6566                           
  6567                           ; BSR set to: 0
  6568  001F86  0100               	movlb	0	; () banked
  6569  001F88  8F96               	bsf	(___fttol@f1+1)& (0+255),7,b
  6570                           
  6571                           ; BSR set to: 0
  6572  001F8A  0EFF               	movlw	255
  6573  001F8C  0100               	movlb	0	; () banked
  6574  001F8E  1795               	andwf	___fttol@f1& (0+255),f,b
  6575  001F90  0EFF               	movlw	255
  6576  001F92  0100               	movlb	0	; () banked
  6577  001F94  1796               	andwf	(___fttol@f1+1)& (0+255),f,b
  6578  001F96  0E00               	movlw	0
  6579  001F98  0100               	movlb	0	; () banked
  6580  001F9A  1797               	andwf	(___fttol@f1+2)& (0+255),f,b
  6581                           
  6582                           ; BSR set to: 0
  6583  001F9C  0100               	movlb	0	; () banked
  6584  001F9E  5195               	movf	___fttol@f1& (0+255),w,b
  6585  001FA0  0100               	movlb	0	; () banked
  6586  001FA2  6F9F               	movwf	___fttol@lval& (0+255),b
  6587  001FA4  0100               	movlb	0	; () banked
  6588  001FA6  5196               	movf	(___fttol@f1+1)& (0+255),w,b
  6589  001FA8  0100               	movlb	0	; () banked
  6590  001FAA  6FA0               	movwf	(___fttol@lval+1)& (0+255),b
  6591  001FAC  0100               	movlb	0	; () banked
  6592  001FAE  5197               	movf	(___fttol@f1+2)& (0+255),w,b
  6593  001FB0  0100               	movlb	0	; () banked
  6594  001FB2  6FA1               	movwf	(___fttol@lval+2)& (0+255),b
  6595  001FB4  0100               	movlb	0	; () banked
  6596  001FB6  6BA2               	clrf	(___fttol@lval+3)& (0+255),b
  6597                           
  6598                           ; BSR set to: 0
  6599  001FB8  0E8E               	movlw	142
  6600  001FBA  0100               	movlb	0	; () banked
  6601  001FBC  5FA3               	subwf	___fttol@exp1& (0+255),f,b
  6602                           
  6603                           ; BSR set to: 0
  6604  001FBE  0100               	movlb	0	; () banked
  6605  001FC0  AFA3               	btfss	___fttol@exp1& (0+255),7,b
  6606  001FC2  D01A               	goto	l3484
  6607                           
  6608                           ; BSR set to: 0
  6609  001FC4  0100               	movlb	0	; () banked
  6610  001FC6  51A3               	movf	___fttol@exp1& (0+255),w,b
  6611  001FC8  0A80               	xorlw	128
  6612  001FCA  0F8F               	addlw	143
  6613  001FCC  B0D8               	btfsc	status,0,c
  6614  001FCE  D00A               	goto	l3480
  6615                           
  6616                           ; BSR set to: 0
  6617  001FD0  0E00               	movlw	0
  6618  001FD2  0100               	movlb	0	; () banked
  6619  001FD4  6F95               	movwf	?___fttol& (0+255),b
  6620  001FD6  0E00               	movlw	0
  6621  001FD8  6F96               	movwf	(?___fttol+1)& (0+255),b
  6622  001FDA  0E00               	movlw	0
  6623  001FDC  6F97               	movwf	(?___fttol+2)& (0+255),b
  6624  001FDE  0E00               	movlw	0
  6625  001FE0  6F98               	movwf	(?___fttol+3)& (0+255),b
  6626                           
  6627                           ; BSR set to: 0
  6628  001FE2  0012               	return	
  6629  001FE4                     l3480:
  6630                           
  6631                           ; BSR set to: 0
  6632  001FE4  0100               	movlb	0	; () banked
  6633  001FE6  90D8               	bcf	status,0,c
  6634  001FE8  33A2               	rrcf	(___fttol@lval+3)& (0+255),f,b
  6635  001FEA  33A1               	rrcf	(___fttol@lval+2)& (0+255),f,b
  6636  001FEC  33A0               	rrcf	(___fttol@lval+1)& (0+255),f,b
  6637  001FEE  339F               	rrcf	___fttol@lval& (0+255),f,b
  6638                           
  6639                           ; BSR set to: 0
  6640  001FF0  0100               	movlb	0	; () banked
  6641  001FF2  3FA3               	incfsz	___fttol@exp1& (0+255),f,b
  6642  001FF4  D7F7               	goto	l3480
  6643                           
  6644                           ; BSR set to: 0
  6645  001FF6  D01B               	goto	l3494
  6646  001FF8                     l3484:
  6647                           
  6648                           ; BSR set to: 0
  6649  001FF8  0E17               	movlw	23
  6650  001FFA  0100               	movlb	0	; () banked
  6651  001FFC  65A3               	cpfsgt	___fttol@exp1& (0+255),b
  6652  001FFE  D012               	goto	l3492
  6653                           
  6654                           ; BSR set to: 0
  6655  002000  0E00               	movlw	0
  6656  002002  0100               	movlb	0	; () banked
  6657  002004  6F95               	movwf	?___fttol& (0+255),b
  6658  002006  0E00               	movlw	0
  6659  002008  6F96               	movwf	(?___fttol+1)& (0+255),b
  6660  00200A  0E00               	movlw	0
  6661  00200C  6F97               	movwf	(?___fttol+2)& (0+255),b
  6662  00200E  0E00               	movlw	0
  6663  002010  6F98               	movwf	(?___fttol+3)& (0+255),b
  6664                           
  6665                           ; BSR set to: 0
  6666  002012  0012               	return	
  6667  002014                     l3490:
  6668                           
  6669                           ; BSR set to: 0
  6670  002014  0100               	movlb	0	; () banked
  6671  002016  90D8               	bcf	status,0,c
  6672  002018  379F               	rlcf	___fttol@lval& (0+255),f,b
  6673  00201A  37A0               	rlcf	(___fttol@lval+1)& (0+255),f,b
  6674  00201C  37A1               	rlcf	(___fttol@lval+2)& (0+255),f,b
  6675  00201E  37A2               	rlcf	(___fttol@lval+3)& (0+255),f,b
  6676  002020  0100               	movlb	0	; () banked
  6677  002022  07A3               	decf	___fttol@exp1& (0+255),f,b
  6678  002024                     l3492:
  6679                           
  6680                           ; BSR set to: 0
  6681  002024  0100               	movlb	0	; () banked
  6682  002026  51A3               	movf	___fttol@exp1& (0+255),w,b
  6683  002028  0100               	movlb	0	; () banked
  6684  00202A  A4D8               	btfss	status,2,c
  6685  00202C  D7F3               	goto	l3490
  6686  00202E                     l3494:
  6687                           
  6688                           ; BSR set to: 0
  6689  00202E  0100               	movlb	0	; () banked
  6690  002030  519E               	movf	___fttol@sign1& (0+255),w,b
  6691  002032  0100               	movlb	0	; () banked
  6692  002034  B4D8               	btfsc	status,2,c
  6693  002036  D009               	goto	l3498
  6694                           
  6695                           ; BSR set to: 0
  6696  002038  0100               	movlb	0	; () banked
  6697  00203A  1FA2               	comf	(___fttol@lval+3)& (0+255),f,b
  6698  00203C  1FA1               	comf	(___fttol@lval+2)& (0+255),f,b
  6699  00203E  1FA0               	comf	(___fttol@lval+1)& (0+255),f,b
  6700  002040  6D9F               	negf	___fttol@lval& (0+255),b
  6701  002042  0E00               	movlw	0
  6702  002044  23A0               	addwfc	(___fttol@lval+1)& (0+255),f,b
  6703  002046  23A1               	addwfc	(___fttol@lval+2)& (0+255),f,b
  6704  002048  23A2               	addwfc	(___fttol@lval+3)& (0+255),f,b
  6705  00204A                     l3498:
  6706                           
  6707                           ; BSR set to: 0
  6708  00204A  C09F  F095         	movff	___fttol@lval,?___fttol
  6709  00204E  C0A0  F096         	movff	___fttol@lval+1,?___fttol+1
  6710  002052  C0A1  F097         	movff	___fttol@lval+2,?___fttol+2
  6711  002056  C0A2  F098         	movff	___fttol@lval+3,?___fttol+3
  6712  00205A  0012               	return	
  6713  00205C                     __end_of___fttol:
  6714                           	opt stack 0
  6715                           tblptru	equ	0xFF8
  6716                           tblptrh	equ	0xFF7
  6717                           tblptrl	equ	0xFF6
  6718                           tablat	equ	0xFF5
  6719                           intcon	equ	0xFF2
  6720                           intcon2	equ	0xFF1
  6721                           intcon3	equ	0xFF0
  6722                           postinc0	equ	0xFEE
  6723                           wreg	equ	0xFE8
  6724                           indf2	equ	0xFDF
  6725                           postinc2	equ	0xFDE
  6726                           postdec2	equ	0xFDD
  6727                           fsr2h	equ	0xFDA
  6728                           fsr2l	equ	0xFD9
  6729                           status	equ	0xFD8
  6730                           
  6731 ;; *************** function ___ftge *****************
  6732 ;; Defined at:
  6733 ;;		line 4 in file "/Applications/microchip/xc8/v1.41/sources/common/ftge.c"
  6734 ;; Parameters:    Size  Location     Type
  6735 ;;  ff1             3   52[COMRAM] float 
  6736 ;;  ff2             3   55[COMRAM] float 
  6737 ;; Auto vars:     Size  Location     Type
  6738 ;;		None
  6739 ;; Return value:  Size  Location     Type
  6740 ;;		None               void
  6741 ;; Registers used:
  6742 ;;		wreg, status,2, status,0
  6743 ;; Tracked objects:
  6744 ;;		On entry : 0/0
  6745 ;;		On exit  : 0/0
  6746 ;;		Unchanged: 0/0
  6747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6748 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6750 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6751 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6752 ;;Total ram usage:        9 bytes
  6753 ;; Hardware stack levels used:    1
  6754 ;; Hardware stack levels required when called:    5
  6755 ;; This function calls:
  6756 ;;		Nothing
  6757 ;; This function is called by:
  6758 ;;		_pow
  6759 ;;		_exp
  6760 ;;		_floor
  6761 ;; This function uses a non-reentrant model
  6762 ;;
  6763                           
  6764                           	psect	text12
  6765  002B66                     __ptext12:
  6766                           	opt stack 0
  6767  002B66                     ___ftge:
  6768                           	opt stack 20
  6769                           
  6770                           ; BSR set to: 0
  6771                           ;incstack = 0
  6772  002B66  AE37               	btfss	___ftge@ff1+2,7,c
  6773  002B68  D016               	goto	l3442
  6774  002B6A  C035  F03B         	movff	___ftge@ff1,??___ftge
  6775  002B6E  C036  F03C         	movff	___ftge@ff1+1,??___ftge+1
  6776  002B72  C037  F03D         	movff	___ftge@ff1+2,??___ftge+2
  6777  002B76  1E3B               	comf	??___ftge,f,c
  6778  002B78  1E3C               	comf	??___ftge+1,f,c
  6779  002B7A  1E3D               	comf	??___ftge+2,f,c
  6780  002B7C  2A3B               	incf	??___ftge,f,c
  6781  002B7E  0E00               	movlw	0
  6782  002B80  223C               	addwfc	??___ftge+1,f,c
  6783  002B82  223D               	addwfc	??___ftge+2,f,c
  6784  002B84  0E00               	movlw	0
  6785  002B86  243B               	addwf	??___ftge,w,c
  6786  002B88  6E35               	movwf	___ftge@ff1,c
  6787  002B8A  0E00               	movlw	0
  6788  002B8C  203C               	addwfc	??___ftge+1,w,c
  6789  002B8E  6E36               	movwf	___ftge@ff1+1,c
  6790  002B90  0E80               	movlw	128
  6791  002B92  203D               	addwfc	??___ftge+2,w,c
  6792  002B94  6E37               	movwf	___ftge@ff1+2,c
  6793  002B96                     l3442:
  6794  002B96  AE3A               	btfss	___ftge@ff2+2,7,c
  6795  002B98  D016               	goto	l3446
  6796  002B9A  C038  F03B         	movff	___ftge@ff2,??___ftge
  6797  002B9E  C039  F03C         	movff	___ftge@ff2+1,??___ftge+1
  6798  002BA2  C03A  F03D         	movff	___ftge@ff2+2,??___ftge+2
  6799  002BA6  1E3B               	comf	??___ftge,f,c
  6800  002BA8  1E3C               	comf	??___ftge+1,f,c
  6801  002BAA  1E3D               	comf	??___ftge+2,f,c
  6802  002BAC  2A3B               	incf	??___ftge,f,c
  6803  002BAE  0E00               	movlw	0
  6804  002BB0  223C               	addwfc	??___ftge+1,f,c
  6805  002BB2  223D               	addwfc	??___ftge+2,f,c
  6806  002BB4  0E00               	movlw	0
  6807  002BB6  243B               	addwf	??___ftge,w,c
  6808  002BB8  6E38               	movwf	___ftge@ff2,c
  6809  002BBA  0E00               	movlw	0
  6810  002BBC  203C               	addwfc	??___ftge+1,w,c
  6811  002BBE  6E39               	movwf	___ftge@ff2+1,c
  6812  002BC0  0E80               	movlw	128
  6813  002BC2  203D               	addwfc	??___ftge+2,w,c
  6814  002BC4  6E3A               	movwf	___ftge@ff2+2,c
  6815  002BC6                     l3446:
  6816  002BC6  0E00               	movlw	0
  6817  002BC8  1A35               	xorwf	___ftge@ff1,f,c
  6818  002BCA  0E00               	movlw	0
  6819  002BCC  1A36               	xorwf	___ftge@ff1+1,f,c
  6820  002BCE  0E80               	movlw	128
  6821  002BD0  1A37               	xorwf	___ftge@ff1+2,f,c
  6822  002BD2  0E00               	movlw	0
  6823  002BD4  1A38               	xorwf	___ftge@ff2,f,c
  6824  002BD6  0E00               	movlw	0
  6825  002BD8  1A39               	xorwf	___ftge@ff2+1,f,c
  6826  002BDA  0E80               	movlw	128
  6827  002BDC  1A3A               	xorwf	___ftge@ff2+2,f,c
  6828  002BDE  5038               	movf	___ftge@ff2,w,c
  6829  002BE0  5C35               	subwf	___ftge@ff1,w,c
  6830  002BE2  5039               	movf	___ftge@ff2+1,w,c
  6831  002BE4  5836               	subwfb	___ftge@ff1+1,w,c
  6832  002BE6  503A               	movf	___ftge@ff2+2,w,c
  6833  002BE8  5837               	subwfb	___ftge@ff1+2,w,c
  6834  002BEA  B0D8               	btfsc	status,0,c
  6835  002BEC  D002               	goto	l3452
  6836  002BEE  90D8               	bcf	status,0,c
  6837  002BF0  0012               	return	
  6838  002BF2                     l3452:
  6839  002BF2  80D8               	bsf	status,0,c
  6840  002BF4  0012               	return	
  6841  002BF6                     __end_of___ftge:
  6842                           	opt stack 0
  6843                           tblptru	equ	0xFF8
  6844                           tblptrh	equ	0xFF7
  6845                           tblptrl	equ	0xFF6
  6846                           tablat	equ	0xFF5
  6847                           intcon	equ	0xFF2
  6848                           intcon2	equ	0xFF1
  6849                           intcon3	equ	0xFF0
  6850                           postinc0	equ	0xFEE
  6851                           wreg	equ	0xFE8
  6852                           indf2	equ	0xFDF
  6853                           postinc2	equ	0xFDE
  6854                           postdec2	equ	0xFDD
  6855                           fsr2h	equ	0xFDA
  6856                           fsr2l	equ	0xFD9
  6857                           status	equ	0xFD8
  6858                           
  6859 ;; *************** function ___altoft *****************
  6860 ;; Defined at:
  6861 ;;		line 42 in file "/Applications/microchip/xc8/v1.41/sources/common/altoft.c"
  6862 ;; Parameters:    Size  Location     Type
  6863 ;;  c               4   36[BANK0 ] long 
  6864 ;; Auto vars:     Size  Location     Type
  6865 ;;  sign            1   71[COMRAM] unsigned char 
  6866 ;;  exp             1   70[COMRAM] unsigned char 
  6867 ;; Return value:  Size  Location     Type
  6868 ;;                  3   36[BANK0 ] float 
  6869 ;; Registers used:
  6870 ;;		wreg, status,2, status,0, cstack
  6871 ;; Tracked objects:
  6872 ;;		On entry : 0/0
  6873 ;;		On exit  : 0/0
  6874 ;;		Unchanged: 0/0
  6875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6876 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6877 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6878 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6879 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6880 ;;Total ram usage:       10 bytes
  6881 ;; Hardware stack levels used:    1
  6882 ;; Hardware stack levels required when called:    6
  6883 ;; This function calls:
  6884 ;;		___ftpack
  6885 ;; This function is called by:
  6886 ;;		_floor
  6887 ;; This function uses a non-reentrant model
  6888 ;;
  6889                           
  6890                           	psect	text13
  6891  002A40                     __ptext13:
  6892                           	opt stack 0
  6893  002A40                     ___altoft:
  6894                           	opt stack 19
  6895                           
  6896                           ;incstack = 0
  6897  002A40  0E00               	movlw	0
  6898  002A42  6E48               	movwf	___altoft@sign,c
  6899  002A44  0E8E               	movlw	142
  6900  002A46  6E47               	movwf	___altoft@exp,c
  6901  002A48  0100               	movlb	0	; () banked
  6902  002A4A  AFA7               	btfss	(___altoft@c+3)& (0+255),7,b
  6903  002A4C  D013               	goto	l5278
  6904                           
  6905                           ; BSR set to: 0
  6906  002A4E  0100               	movlb	0	; () banked
  6907  002A50  1FA7               	comf	(___altoft@c+3)& (0+255),f,b
  6908  002A52  1FA6               	comf	(___altoft@c+2)& (0+255),f,b
  6909  002A54  1FA5               	comf	(___altoft@c+1)& (0+255),f,b
  6910  002A56  6DA4               	negf	___altoft@c& (0+255),b
  6911  002A58  0E00               	movlw	0
  6912  002A5A  23A5               	addwfc	(___altoft@c+1)& (0+255),f,b
  6913  002A5C  23A6               	addwfc	(___altoft@c+2)& (0+255),f,b
  6914  002A5E  23A7               	addwfc	(___altoft@c+3)& (0+255),f,b
  6915                           
  6916                           ; BSR set to: 0
  6917  002A60  0E01               	movlw	1
  6918  002A62  6E48               	movwf	___altoft@sign,c
  6919                           
  6920                           ; BSR set to: 0
  6921  002A64  D007               	goto	l5278
  6922  002A66                     l5276:
  6923                           
  6924                           ; BSR set to: 0
  6925  002A66  0100               	movlb	0	; () banked
  6926  002A68  90D8               	bcf	status,0,c
  6927  002A6A  33A7               	rrcf	(___altoft@c+3)& (0+255),f,b
  6928  002A6C  33A6               	rrcf	(___altoft@c+2)& (0+255),f,b
  6929  002A6E  33A5               	rrcf	(___altoft@c+1)& (0+255),f,b
  6930  002A70  33A4               	rrcf	___altoft@c& (0+255),f,b
  6931  002A72  2A47               	incf	___altoft@exp,f,c
  6932  002A74                     l5278:
  6933                           
  6934                           ; BSR set to: 0
  6935  002A74  0E00               	movlw	0
  6936  002A76  0100               	movlb	0	; () banked
  6937  002A78  15A4               	andwf	___altoft@c& (0+255),w,b
  6938  002A7A  0100               	movlb	0	; () banked
  6939  002A7C  6FA8               	movwf	??___altoft& (0+255),b
  6940  002A7E  0E00               	movlw	0
  6941  002A80  0100               	movlb	0	; () banked
  6942  002A82  15A5               	andwf	(___altoft@c+1)& (0+255),w,b
  6943  002A84  0100               	movlb	0	; () banked
  6944  002A86  6FA9               	movwf	(??___altoft+1)& (0+255),b
  6945  002A88  0E00               	movlw	0
  6946  002A8A  0100               	movlb	0	; () banked
  6947  002A8C  15A6               	andwf	(___altoft@c+2)& (0+255),w,b
  6948  002A8E  0100               	movlb	0	; () banked
  6949  002A90  6FAA               	movwf	(??___altoft+2)& (0+255),b
  6950  002A92  0EFF               	movlw	255
  6951  002A94  0100               	movlb	0	; () banked
  6952  002A96  15A7               	andwf	(___altoft@c+3)& (0+255),w,b
  6953  002A98  0100               	movlb	0	; () banked
  6954  002A9A  6FAB               	movwf	(??___altoft+3)& (0+255),b
  6955  002A9C  0100               	movlb	0	; () banked
  6956  002A9E  51A8               	movf	??___altoft& (0+255),w,b
  6957  002AA0  0100               	movlb	0	; () banked
  6958  002AA2  11A9               	iorwf	(??___altoft+1)& (0+255),w,b
  6959  002AA4  0100               	movlb	0	; () banked
  6960  002AA6  11AA               	iorwf	(??___altoft+2)& (0+255),w,b
  6961  002AA8  0100               	movlb	0	; () banked
  6962  002AAA  11AB               	iorwf	(??___altoft+3)& (0+255),w,b
  6963  002AAC  A4D8               	btfss	status,2,c
  6964  002AAE  D7DB               	goto	l5276
  6965                           
  6966                           ; BSR set to: 0
  6967                           
  6968                           ; BSR set to: 0
  6969  002AB0  C0A4  F035         	movff	___altoft@c,___ftpack@arg
  6970  002AB4  C0A5  F036         	movff	___altoft@c+1,___ftpack@arg+1
  6971  002AB8  C0A6  F037         	movff	___altoft@c+2,___ftpack@arg+2
  6972  002ABC  C047  F038         	movff	___altoft@exp,___ftpack@exp
  6973  002AC0  C048  F039         	movff	___altoft@sign,___ftpack@sign
  6974  002AC4  ECC9  F014         	call	___ftpack	;wreg free
  6975  002AC8  C035  F0A4         	movff	?___ftpack,?___altoft
  6976  002ACC  C036  F0A5         	movff	?___ftpack+1,?___altoft+1
  6977  002AD0  C037  F0A6         	movff	?___ftpack+2,?___altoft+2
  6978  002AD4  0012               	return	
  6979  002AD6                     __end_of___altoft:
  6980                           	opt stack 0
  6981                           tblptru	equ	0xFF8
  6982                           tblptrh	equ	0xFF7
  6983                           tblptrl	equ	0xFF6
  6984                           tablat	equ	0xFF5
  6985                           intcon	equ	0xFF2
  6986                           intcon2	equ	0xFF1
  6987                           intcon3	equ	0xFF0
  6988                           postinc0	equ	0xFEE
  6989                           wreg	equ	0xFE8
  6990                           indf2	equ	0xFDF
  6991                           postinc2	equ	0xFDE
  6992                           postdec2	equ	0xFDD
  6993                           fsr2h	equ	0xFDA
  6994                           fsr2l	equ	0xFD9
  6995                           status	equ	0xFD8
  6996                           
  6997 ;; *************** function _eval_poly *****************
  6998 ;; Defined at:
  6999 ;;		line 4 in file "/Applications/microchip/xc8/v1.41/sources/common/evalpoly.c"
  7000 ;; Parameters:    Size  Location     Type
  7001 ;;  x               3   21[BANK0 ] float 
  7002 ;;  d               2   24[BANK0 ] PTR const 
  7003 ;;		 -> log@coeff(27), exp@coeff(30), 
  7004 ;;  n               2   26[BANK0 ] int 
  7005 ;; Auto vars:     Size  Location     Type
  7006 ;;  res             3   28[BANK0 ] int 
  7007 ;; Return value:  Size  Location     Type
  7008 ;;                  3   21[BANK0 ] int 
  7009 ;; Registers used:
  7010 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7011 ;; Tracked objects:
  7012 ;;		On entry : 0/0
  7013 ;;		On exit  : 0/0
  7014 ;;		Unchanged: 0/0
  7015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7016 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7017 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7018 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7019 ;;      Totals:         2      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7020 ;;Total ram usage:       12 bytes
  7021 ;; Hardware stack levels used:    1
  7022 ;; Hardware stack levels required when called:    7
  7023 ;; This function calls:
  7024 ;;		___ftadd
  7025 ;;		___ftmul
  7026 ;;		___wmul
  7027 ;; This function is called by:
  7028 ;;		_exp
  7029 ;;		_log
  7030 ;; This function uses a non-reentrant model
  7031 ;;
  7032                           
  7033                           	psect	text14
  7034  0028BA                     __ptext14:
  7035                           	opt stack 0
  7036  0028BA                     _eval_poly:
  7037                           	opt stack 19
  7038                           
  7039                           ;incstack = 0
  7040  0028BA  C09A  F035         	movff	eval_poly@n,___wmul@multiplier
  7041  0028BE  C09B  F036         	movff	eval_poly@n+1,___wmul@multiplier+1
  7042  0028C2  0E00               	movlw	0
  7043  0028C4  6E38               	movwf	___wmul@multiplicand+1,c
  7044  0028C6  0E03               	movlw	3
  7045  0028C8  6E37               	movwf	___wmul@multiplicand,c
  7046  0028CA  EC09  F01A         	call	___wmul	;wreg free
  7047  0028CE  C098  F047         	movff	eval_poly@d,??_eval_poly
  7048  0028D2  C099  F048         	movff	eval_poly@d+1,??_eval_poly+1
  7049  0028D6  5035               	movf	?___wmul,w,c
  7050  0028D8  2647               	addwf	??_eval_poly,f,c
  7051  0028DA  5036               	movf	?___wmul+1,w,c
  7052  0028DC  2248               	addwfc	??_eval_poly+1,f,c
  7053  0028DE  C047  FFF6         	movff	??_eval_poly,tblptrl
  7054  0028E2  C048  FFF7         	movff	??_eval_poly+1,tblptrh
  7055  0028E6                     	if	0	;tblptru may be non-zero
  7056  0028E6                     	endif
  7057  0028E6                     	if	0	;tblptru may be non-zero
  7058  0028E6                     	endif
  7059  0028E6  0009               	tblrd		*+
  7060  0028E8  CFF5 F09C          	movff	tablat,eval_poly@res
  7061  0028EC  0009               	tblrd		*+
  7062  0028EE  CFF5 F09D          	movff	tablat,eval_poly@res+1
  7063  0028F2  000A               	tblrd		*-
  7064  0028F4  CFF5 F09E          	movff	tablat,eval_poly@res+2
  7065  0028F8  D03F               	goto	l5496
  7066  0028FA                     l5494:
  7067  0028FA  C09C  F044         	movff	eval_poly@res,___ftmul@f2
  7068  0028FE  C09D  F045         	movff	eval_poly@res+1,___ftmul@f2+1
  7069  002902  C09E  F046         	movff	eval_poly@res+2,___ftmul@f2+2
  7070  002906  C095  F041         	movff	eval_poly@x,___ftmul@f1
  7071  00290A  C096  F042         	movff	eval_poly@x+1,___ftmul@f1+1
  7072  00290E  C097  F043         	movff	eval_poly@x+2,___ftmul@f1+2
  7073  002912  ECCC  F010         	call	___ftmul	;wreg free
  7074  002916  C041  F089         	movff	?___ftmul,___ftadd@f1
  7075  00291A  C042  F08A         	movff	?___ftmul+1,___ftadd@f1+1
  7076  00291E  C043  F08B         	movff	?___ftmul+2,___ftadd@f1+2
  7077  002922  0E00               	movlw	0
  7078  002924  6E38               	movwf	___wmul@multiplicand+1,c
  7079  002926  0E03               	movlw	3
  7080  002928  6E37               	movwf	___wmul@multiplicand,c
  7081  00292A  0100               	movlb	0	; () banked
  7082  00292C  079A               	decf	eval_poly@n& (0+255),f,b
  7083  00292E  A0D8               	btfss	status,0,c
  7084  002930  079B               	decf	(eval_poly@n+1)& (0+255),f,b
  7085  002932  C09A  F035         	movff	eval_poly@n,___wmul@multiplier
  7086  002936  C09B  F036         	movff	eval_poly@n+1,___wmul@multiplier+1
  7087  00293A  EC09  F01A         	call	___wmul	;wreg free
  7088  00293E  C098  F047         	movff	eval_poly@d,??_eval_poly
  7089  002942  C099  F048         	movff	eval_poly@d+1,??_eval_poly+1
  7090  002946  5035               	movf	?___wmul,w,c
  7091  002948  2647               	addwf	??_eval_poly,f,c
  7092  00294A  5036               	movf	?___wmul+1,w,c
  7093  00294C  2248               	addwfc	??_eval_poly+1,f,c
  7094  00294E  C047  FFF6         	movff	??_eval_poly,tblptrl
  7095  002952  C048  FFF7         	movff	??_eval_poly+1,tblptrh
  7096  002956                     	if	0	;tblptru may be non-zero
  7097  002956                     	endif
  7098  002956                     	if	0	;tblptru may be non-zero
  7099  002956                     	endif
  7100  002956  0009               	tblrd		*+
  7101  002958  CFF5 F08C          	movff	tablat,___ftadd@f2
  7102  00295C  0009               	tblrd		*+
  7103  00295E  CFF5 F08D          	movff	tablat,___ftadd@f2+1
  7104  002962  000A               	tblrd		*-
  7105  002964  CFF5 F08E          	movff	tablat,___ftadd@f2+2
  7106  002968  EC92  F00B         	call	___ftadd	;wreg free
  7107  00296C  C089  F09C         	movff	?___ftadd,eval_poly@res
  7108  002970  C08A  F09D         	movff	?___ftadd+1,eval_poly@res+1
  7109  002974  C08B  F09E         	movff	?___ftadd+2,eval_poly@res+2
  7110  002978                     l5496:
  7111  002978  0100               	movlb	0	; () banked
  7112  00297A  519A               	movf	eval_poly@n& (0+255),w,b
  7113  00297C  0100               	movlb	0	; () banked
  7114  00297E  119B               	iorwf	(eval_poly@n+1)& (0+255),w,b
  7115  002980  A4D8               	btfss	status,2,c
  7116  002982  D7BB               	goto	l5494
  7117                           
  7118                           ; BSR set to: 0
  7119  002984  C09C  F095         	movff	eval_poly@res,?_eval_poly
  7120  002988  C09D  F096         	movff	eval_poly@res+1,?_eval_poly+1
  7121  00298C  C09E  F097         	movff	eval_poly@res+2,?_eval_poly+2
  7122                           
  7123                           ; BSR set to: 0
  7124  002990  0012               	return		;funcret
  7125  002992                     __end_of_eval_poly:
  7126                           	opt stack 0
  7127                           tblptru	equ	0xFF8
  7128                           tblptrh	equ	0xFF7
  7129                           tblptrl	equ	0xFF6
  7130                           tablat	equ	0xFF5
  7131                           intcon	equ	0xFF2
  7132                           intcon2	equ	0xFF1
  7133                           intcon3	equ	0xFF0
  7134                           postinc0	equ	0xFEE
  7135                           wreg	equ	0xFE8
  7136                           indf2	equ	0xFDF
  7137                           postinc2	equ	0xFDE
  7138                           postdec2	equ	0xFDD
  7139                           fsr2h	equ	0xFDA
  7140                           fsr2l	equ	0xFD9
  7141                           status	equ	0xFD8
  7142                           
  7143 ;; *************** function ___ftmul *****************
  7144 ;; Defined at:
  7145 ;;		line 62 in file "/Applications/microchip/xc8/v1.41/sources/common/ftmul.c"
  7146 ;; Parameters:    Size  Location     Type
  7147 ;;  f1              3   64[COMRAM] float 
  7148 ;;  f2              3   67[COMRAM] float 
  7149 ;; Auto vars:     Size  Location     Type
  7150 ;;  f3_as_produc    3    4[BANK0 ] unsigned um
  7151 ;;  sign            1    8[BANK0 ] unsigned char 
  7152 ;;  cntr            1    7[BANK0 ] unsigned char 
  7153 ;;  exp             1    3[BANK0 ] unsigned char 
  7154 ;; Return value:  Size  Location     Type
  7155 ;;                  3   64[COMRAM] float 
  7156 ;; Registers used:
  7157 ;;		wreg, status,2, status,0, cstack
  7158 ;; Tracked objects:
  7159 ;;		On entry : 0/0
  7160 ;;		On exit  : 0/0
  7161 ;;		Unchanged: 0/0
  7162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7163 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7164 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7165 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7166 ;;      Totals:         6       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7167 ;;Total ram usage:       15 bytes
  7168 ;; Hardware stack levels used:    1
  7169 ;; Hardware stack levels required when called:    6
  7170 ;; This function calls:
  7171 ;;		___ftpack
  7172 ;; This function is called by:
  7173 ;;		_dec2hex
  7174 ;;		_pow
  7175 ;;		_exp
  7176 ;;		_log
  7177 ;;		_eval_poly
  7178 ;; This function uses a non-reentrant model
  7179 ;;
  7180                           
  7181                           	psect	text15
  7182  002198                     __ptext15:
  7183                           	opt stack 0
  7184  002198                     ___ftmul:
  7185                           	opt stack 19
  7186                           
  7187                           ; BSR set to: 0
  7188                           ;incstack = 0
  7189  002198  C043  F080         	movff	___ftmul@f1+2,??___ftmul
  7190  00219C  0100               	movlb	0	; () banked
  7191  00219E  6B81               	clrf	(??___ftmul+1)& (0+255),b
  7192  0021A0  6B82               	clrf	(??___ftmul+2)& (0+255),b
  7193  0021A2  3442               	rlcf	___ftmul@f1+1,w,c
  7194  0021A4  0100               	movlb	0	; () banked
  7195  0021A6  3780               	rlcf	??___ftmul& (0+255),f,b
  7196  0021A8  E301               	bnc	u6091
  7197  0021AA  8181               	bsf	(??___ftmul+1)& (0+255),0,b
  7198  0021AC                     u6091:
  7199  0021AC  0100               	movlb	0	; () banked
  7200  0021AE  5180               	movf	??___ftmul& (0+255),w,b
  7201  0021B0  0100               	movlb	0	; () banked
  7202  0021B2  6F83               	movwf	___ftmul@exp& (0+255),b
  7203  0021B4  0100               	movlb	0	; () banked
  7204  0021B6  5183               	movf	___ftmul@exp& (0+255),w,b
  7205  0021B8  A4D8               	btfss	status,2,c
  7206  0021BA  D007               	goto	l5360
  7207                           
  7208                           ; BSR set to: 0
  7209  0021BC  0E00               	movlw	0
  7210  0021BE  6E41               	movwf	?___ftmul,c
  7211  0021C0  0E00               	movlw	0
  7212  0021C2  6E42               	movwf	?___ftmul+1,c
  7213  0021C4  0E00               	movlw	0
  7214  0021C6  6E43               	movwf	?___ftmul+2,c
  7215                           
  7216                           ; BSR set to: 0
  7217  0021C8  0012               	return	
  7218  0021CA                     l5360:
  7219                           
  7220                           ; BSR set to: 0
  7221  0021CA  C046  F080         	movff	___ftmul@f2+2,??___ftmul
  7222  0021CE  0100               	movlb	0	; () banked
  7223  0021D0  6B81               	clrf	(??___ftmul+1)& (0+255),b
  7224  0021D2  6B82               	clrf	(??___ftmul+2)& (0+255),b
  7225  0021D4  3445               	rlcf	___ftmul@f2+1,w,c
  7226  0021D6  0100               	movlb	0	; () banked
  7227  0021D8  3780               	rlcf	??___ftmul& (0+255),f,b
  7228  0021DA  E301               	bnc	u6111
  7229  0021DC  8181               	bsf	(??___ftmul+1)& (0+255),0,b
  7230  0021DE                     u6111:
  7231  0021DE  0100               	movlb	0	; () banked
  7232  0021E0  5180               	movf	??___ftmul& (0+255),w,b
  7233  0021E2  0100               	movlb	0	; () banked
  7234  0021E4  6F88               	movwf	___ftmul@sign& (0+255),b
  7235  0021E6  0100               	movlb	0	; () banked
  7236  0021E8  5188               	movf	___ftmul@sign& (0+255),w,b
  7237  0021EA  A4D8               	btfss	status,2,c
  7238  0021EC  D007               	goto	l5366
  7239                           
  7240                           ; BSR set to: 0
  7241  0021EE  0E00               	movlw	0
  7242  0021F0  6E41               	movwf	?___ftmul,c
  7243  0021F2  0E00               	movlw	0
  7244  0021F4  6E42               	movwf	?___ftmul+1,c
  7245  0021F6  0E00               	movlw	0
  7246  0021F8  6E43               	movwf	?___ftmul+2,c
  7247                           
  7248                           ; BSR set to: 0
  7249  0021FA  0012               	return	
  7250  0021FC                     l5366:
  7251                           
  7252                           ; BSR set to: 0
  7253  0021FC  0100               	movlb	0	; () banked
  7254  0021FE  5188               	movf	___ftmul@sign& (0+255),w,b
  7255  002200  0F7B               	addlw	123
  7256  002202  0100               	movlb	0	; () banked
  7257  002204  2783               	addwf	___ftmul@exp& (0+255),f,b
  7258                           
  7259                           ; BSR set to: 0
  7260  002206  C043  F088         	movff	___ftmul@f1+2,___ftmul@sign
  7261  00220A  5046               	movf	___ftmul@f2+2,w,c
  7262  00220C  0100               	movlb	0	; () banked
  7263  00220E  1B88               	xorwf	___ftmul@sign& (0+255),f,b
  7264  002210  0E80               	movlw	128
  7265  002212  0100               	movlb	0	; () banked
  7266  002214  1788               	andwf	___ftmul@sign& (0+255),f,b
  7267                           
  7268                           ; BSR set to: 0
  7269  002216  8E42               	bsf	___ftmul@f1+1,7,c
  7270                           
  7271                           ; BSR set to: 0
  7272  002218  8E45               	bsf	___ftmul@f2+1,7,c
  7273                           
  7274                           ; BSR set to: 0
  7275  00221A  0EFF               	movlw	255
  7276  00221C  1644               	andwf	___ftmul@f2,f,c
  7277  00221E  0EFF               	movlw	255
  7278  002220  1645               	andwf	___ftmul@f2+1,f,c
  7279  002222  0E00               	movlw	0
  7280  002224  1646               	andwf	___ftmul@f2+2,f,c
  7281                           
  7282                           ; BSR set to: 0
  7283  002226  0E00               	movlw	0
  7284  002228  0100               	movlb	0	; () banked
  7285  00222A  6F84               	movwf	___ftmul@f3_as_product& (0+255),b
  7286  00222C  0E00               	movlw	0
  7287  00222E  0100               	movlb	0	; () banked
  7288  002230  6F85               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  7289  002232  0E00               	movlw	0
  7290  002234  0100               	movlb	0	; () banked
  7291  002236  6F86               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  7292                           
  7293                           ; BSR set to: 0
  7294  002238  0E07               	movlw	7
  7295  00223A  0100               	movlb	0	; () banked
  7296  00223C  6F87               	movwf	___ftmul@cntr& (0+255),b
  7297  00223E                     l5380:
  7298                           
  7299                           ; BSR set to: 0
  7300  00223E  A041               	btfss	___ftmul@f1,0,c
  7301  002240  D009               	goto	l5384
  7302                           
  7303                           ; BSR set to: 0
  7304  002242  5044               	movf	___ftmul@f2,w,c
  7305  002244  0100               	movlb	0	; () banked
  7306  002246  2784               	addwf	___ftmul@f3_as_product& (0+255),f,b
  7307  002248  5045               	movf	___ftmul@f2+1,w,c
  7308  00224A  0100               	movlb	0	; () banked
  7309  00224C  2385               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  7310  00224E  5046               	movf	___ftmul@f2+2,w,c
  7311  002250  0100               	movlb	0	; () banked
  7312  002252  2386               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  7313  002254                     l5384:
  7314                           
  7315                           ; BSR set to: 0
  7316  002254  90D8               	bcf	status,0,c
  7317  002256  3243               	rrcf	___ftmul@f1+2,f,c
  7318  002258  3242               	rrcf	___ftmul@f1+1,f,c
  7319  00225A  3241               	rrcf	___ftmul@f1,f,c
  7320  00225C  90D8               	bcf	status,0,c
  7321  00225E  3644               	rlcf	___ftmul@f2,f,c
  7322  002260  3645               	rlcf	___ftmul@f2+1,f,c
  7323  002262  3646               	rlcf	___ftmul@f2+2,f,c
  7324                           
  7325                           ; BSR set to: 0
  7326  002264  0100               	movlb	0	; () banked
  7327  002266  2F87               	decfsz	___ftmul@cntr& (0+255),f,b
  7328  002268  D7EA               	goto	l5380
  7329                           
  7330                           ; BSR set to: 0
  7331                           
  7332                           ; BSR set to: 0
  7333  00226A  0E09               	movlw	9
  7334  00226C  0100               	movlb	0	; () banked
  7335  00226E  6F87               	movwf	___ftmul@cntr& (0+255),b
  7336  002270                     l5390:
  7337                           
  7338                           ; BSR set to: 0
  7339  002270  A041               	btfss	___ftmul@f1,0,c
  7340  002272  D009               	goto	l5394
  7341                           
  7342                           ; BSR set to: 0
  7343  002274  5044               	movf	___ftmul@f2,w,c
  7344  002276  0100               	movlb	0	; () banked
  7345  002278  2784               	addwf	___ftmul@f3_as_product& (0+255),f,b
  7346  00227A  5045               	movf	___ftmul@f2+1,w,c
  7347  00227C  0100               	movlb	0	; () banked
  7348  00227E  2385               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  7349  002280  5046               	movf	___ftmul@f2+2,w,c
  7350  002282  0100               	movlb	0	; () banked
  7351  002284  2386               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  7352  002286                     l5394:
  7353                           
  7354                           ; BSR set to: 0
  7355  002286  90D8               	bcf	status,0,c
  7356  002288  3243               	rrcf	___ftmul@f1+2,f,c
  7357  00228A  3242               	rrcf	___ftmul@f1+1,f,c
  7358  00228C  3241               	rrcf	___ftmul@f1,f,c
  7359  00228E  0100               	movlb	0	; () banked
  7360  002290  90D8               	bcf	status,0,c
  7361  002292  3386               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  7362  002294  3385               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  7363  002296  3384               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  7364                           
  7365                           ; BSR set to: 0
  7366  002298  0100               	movlb	0	; () banked
  7367  00229A  2F87               	decfsz	___ftmul@cntr& (0+255),f,b
  7368  00229C  D7E9               	goto	l5390
  7369                           
  7370                           ; BSR set to: 0
  7371                           
  7372                           ; BSR set to: 0
  7373  00229E  C084  F035         	movff	___ftmul@f3_as_product,___ftpack@arg
  7374  0022A2  C085  F036         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  7375  0022A6  C086  F037         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  7376  0022AA  C083  F038         	movff	___ftmul@exp,___ftpack@exp
  7377  0022AE  C088  F039         	movff	___ftmul@sign,___ftpack@sign
  7378  0022B2  ECC9  F014         	call	___ftpack	;wreg free
  7379  0022B6  C035  F041         	movff	?___ftpack,?___ftmul
  7380  0022BA  C036  F042         	movff	?___ftpack+1,?___ftmul+1
  7381  0022BE  C037  F043         	movff	?___ftpack+2,?___ftmul+2
  7382  0022C2  0012               	return	
  7383  0022C4                     __end_of___ftmul:
  7384                           	opt stack 0
  7385                           tblptru	equ	0xFF8
  7386                           tblptrh	equ	0xFF7
  7387                           tblptrl	equ	0xFF6
  7388                           tablat	equ	0xFF5
  7389                           intcon	equ	0xFF2
  7390                           intcon2	equ	0xFF1
  7391                           intcon3	equ	0xFF0
  7392                           postinc0	equ	0xFEE
  7393                           wreg	equ	0xFE8
  7394                           indf2	equ	0xFDF
  7395                           postinc2	equ	0xFDE
  7396                           postdec2	equ	0xFDD
  7397                           fsr2h	equ	0xFDA
  7398                           fsr2l	equ	0xFD9
  7399                           status	equ	0xFD8
  7400                           
  7401 ;; *************** function ___ftsub *****************
  7402 ;; Defined at:
  7403 ;;		line 20 in file "/Applications/microchip/xc8/v1.41/sources/common/ftsub.c"
  7404 ;; Parameters:    Size  Location     Type
  7405 ;;  f1              3   21[BANK0 ] float 
  7406 ;;  f2              3   24[BANK0 ] float 
  7407 ;; Auto vars:     Size  Location     Type
  7408 ;;		None
  7409 ;; Return value:  Size  Location     Type
  7410 ;;                  3   21[BANK0 ] float 
  7411 ;; Registers used:
  7412 ;;		wreg, status,2, status,0, cstack
  7413 ;; Tracked objects:
  7414 ;;		On entry : 0/0
  7415 ;;		On exit  : 0/0
  7416 ;;		Unchanged: 0/0
  7417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7418 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7421 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7422 ;;Total ram usage:        6 bytes
  7423 ;; Hardware stack levels used:    1
  7424 ;; Hardware stack levels required when called:    7
  7425 ;; This function calls:
  7426 ;;		___ftadd
  7427 ;; This function is called by:
  7428 ;;		_exp
  7429 ;; This function uses a non-reentrant model
  7430 ;;
  7431                           
  7432                           	psect	text16
  7433  002FD8                     __ptext16:
  7434                           	opt stack 0
  7435  002FD8                     ___ftsub:
  7436                           	opt stack 19
  7437                           
  7438                           ;incstack = 0
  7439  002FD8  0100               	movlb	0	; () banked
  7440  002FDA  5198               	movf	___ftsub@f2& (0+255),w,b
  7441  002FDC  0100               	movlb	0	; () banked
  7442  002FDE  1199               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  7443  002FE0  0100               	movlb	0	; () banked
  7444  002FE2  119A               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  7445  002FE4  B4D8               	btfsc	status,2,c
  7446  002FE6  D009               	goto	l5452
  7447                           
  7448                           ; BSR set to: 0
  7449  002FE8  0E00               	movlw	0
  7450  002FEA  0100               	movlb	0	; () banked
  7451  002FEC  1B98               	xorwf	___ftsub@f2& (0+255),f,b
  7452  002FEE  0E00               	movlw	0
  7453  002FF0  0100               	movlb	0	; () banked
  7454  002FF2  1B99               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  7455  002FF4  0E80               	movlw	128
  7456  002FF6  0100               	movlb	0	; () banked
  7457  002FF8  1B9A               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  7458  002FFA                     l5452:
  7459                           
  7460                           ; BSR set to: 0
  7461  002FFA  C095  F089         	movff	___ftsub@f1,___ftadd@f1
  7462  002FFE  C096  F08A         	movff	___ftsub@f1+1,___ftadd@f1+1
  7463  003002  C097  F08B         	movff	___ftsub@f1+2,___ftadd@f1+2
  7464  003006  C098  F08C         	movff	___ftsub@f2,___ftadd@f2
  7465  00300A  C099  F08D         	movff	___ftsub@f2+1,___ftadd@f2+1
  7466  00300E  C09A  F08E         	movff	___ftsub@f2+2,___ftadd@f2+2
  7467  003012  EC92  F00B         	call	___ftadd	;wreg free
  7468  003016  C089  F095         	movff	?___ftadd,?___ftsub
  7469  00301A  C08A  F096         	movff	?___ftadd+1,?___ftsub+1
  7470  00301E  C08B  F097         	movff	?___ftadd+2,?___ftsub+2
  7471  003022  0012               	return	
  7472  003024                     __end_of___ftsub:
  7473                           	opt stack 0
  7474                           tblptru	equ	0xFF8
  7475                           tblptrh	equ	0xFF7
  7476                           tblptrl	equ	0xFF6
  7477                           tablat	equ	0xFF5
  7478                           intcon	equ	0xFF2
  7479                           intcon2	equ	0xFF1
  7480                           intcon3	equ	0xFF0
  7481                           postinc0	equ	0xFEE
  7482                           wreg	equ	0xFE8
  7483                           indf2	equ	0xFDF
  7484                           postinc2	equ	0xFDE
  7485                           postdec2	equ	0xFDD
  7486                           fsr2h	equ	0xFDA
  7487                           fsr2l	equ	0xFD9
  7488                           status	equ	0xFD8
  7489                           
  7490 ;; *************** function ___ftadd *****************
  7491 ;; Defined at:
  7492 ;;		line 86 in file "/Applications/microchip/xc8/v1.41/sources/common/ftadd.c"
  7493 ;; Parameters:    Size  Location     Type
  7494 ;;  f1              3    9[BANK0 ] float 
  7495 ;;  f2              3   12[BANK0 ] float 
  7496 ;; Auto vars:     Size  Location     Type
  7497 ;;  exp1            1   20[BANK0 ] unsigned char 
  7498 ;;  exp2            1   19[BANK0 ] unsigned char 
  7499 ;;  sign            1   18[BANK0 ] unsigned char 
  7500 ;; Return value:  Size  Location     Type
  7501 ;;                  3    9[BANK0 ] float 
  7502 ;; Registers used:
  7503 ;;		wreg, status,2, status,0, cstack
  7504 ;; Tracked objects:
  7505 ;;		On entry : 0/0
  7506 ;;		On exit  : 0/0
  7507 ;;		Unchanged: 0/0
  7508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7509 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7510 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7511 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7512 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7513 ;;Total ram usage:       12 bytes
  7514 ;; Hardware stack levels used:    1
  7515 ;; Hardware stack levels required when called:    6
  7516 ;; This function calls:
  7517 ;;		___ftpack
  7518 ;; This function is called by:
  7519 ;;		_dec2hex
  7520 ;;		___ftsub
  7521 ;;		_floor
  7522 ;;		_log
  7523 ;;		_eval_poly
  7524 ;; This function uses a non-reentrant model
  7525 ;;
  7526                           
  7527                           	psect	text17
  7528  001724                     __ptext17:
  7529                           	opt stack 0
  7530  001724                     ___ftadd:
  7531                           	opt stack 19
  7532                           
  7533                           ;incstack = 0
  7534  001724  C08B  F08F         	movff	___ftadd@f1+2,??___ftadd
  7535  001728  0100               	movlb	0	; () banked
  7536  00172A  6B90               	clrf	(??___ftadd+1)& (0+255),b
  7537  00172C  6B91               	clrf	(??___ftadd+2)& (0+255),b
  7538  00172E  0100               	movlb	0	; () banked
  7539  001730  358A               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  7540  001732  0100               	movlb	0	; () banked
  7541  001734  378F               	rlcf	??___ftadd& (0+255),f,b
  7542  001736  E301               	bnc	u5881
  7543  001738  8190               	bsf	(??___ftadd+1)& (0+255),0,b
  7544  00173A                     u5881:
  7545  00173A  0100               	movlb	0	; () banked
  7546  00173C  518F               	movf	??___ftadd& (0+255),w,b
  7547  00173E  0100               	movlb	0	; () banked
  7548  001740  6F94               	movwf	___ftadd@exp1& (0+255),b
  7549  001742  C08E  F08F         	movff	___ftadd@f2+2,??___ftadd
  7550  001746  0100               	movlb	0	; () banked
  7551  001748  6B90               	clrf	(??___ftadd+1)& (0+255),b
  7552  00174A  6B91               	clrf	(??___ftadd+2)& (0+255),b
  7553  00174C  0100               	movlb	0	; () banked
  7554  00174E  358D               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  7555  001750  0100               	movlb	0	; () banked
  7556  001752  378F               	rlcf	??___ftadd& (0+255),f,b
  7557  001754  E301               	bnc	u5891
  7558  001756  8190               	bsf	(??___ftadd+1)& (0+255),0,b
  7559  001758                     u5891:
  7560  001758  0100               	movlb	0	; () banked
  7561  00175A  518F               	movf	??___ftadd& (0+255),w,b
  7562  00175C  0100               	movlb	0	; () banked
  7563  00175E  6F93               	movwf	___ftadd@exp2& (0+255),b
  7564                           
  7565                           ; BSR set to: 0
  7566  001760  0100               	movlb	0	; () banked
  7567  001762  5194               	movf	___ftadd@exp1& (0+255),w,b
  7568  001764  0100               	movlb	0	; () banked
  7569  001766  B4D8               	btfsc	status,2,c
  7570  001768  D011               	goto	l816
  7571                           
  7572                           ; BSR set to: 0
  7573  00176A  0100               	movlb	0	; () banked
  7574  00176C  5193               	movf	___ftadd@exp2& (0+255),w,b
  7575  00176E  0100               	movlb	0	; () banked
  7576  001770  5D94               	subwf	___ftadd@exp1& (0+255),w,b
  7577  001772  B0D8               	btfsc	status,0,c
  7578  001774  D012               	goto	l5292
  7579                           
  7580                           ; BSR set to: 0
  7581  001776  0100               	movlb	0	; () banked
  7582  001778  5194               	movf	___ftadd@exp1& (0+255),w,b
  7583  00177A  0800               	sublw	0
  7584  00177C  0100               	movlb	0	; () banked
  7585  00177E  2593               	addwf	___ftadd@exp2& (0+255),w,b
  7586  001780  0100               	movlb	0	; () banked
  7587  001782  6F8F               	movwf	??___ftadd& (0+255),b
  7588  001784  0E18               	movlw	24
  7589  001786  0100               	movlb	0	; () banked
  7590  001788  658F               	cpfsgt	??___ftadd& (0+255),b
  7591  00178A  D007               	goto	l5292
  7592  00178C                     l816:
  7593                           
  7594                           ; BSR set to: 0
  7595  00178C  C08C  F089         	movff	___ftadd@f2,?___ftadd
  7596  001790  C08D  F08A         	movff	___ftadd@f2+1,?___ftadd+1
  7597  001794  C08E  F08B         	movff	___ftadd@f2+2,?___ftadd+2
  7598  001798  0012               	return	
  7599  00179A                     l5292:
  7600                           
  7601                           ; BSR set to: 0
  7602  00179A  0100               	movlb	0	; () banked
  7603  00179C  5193               	movf	___ftadd@exp2& (0+255),w,b
  7604  00179E  0100               	movlb	0	; () banked
  7605  0017A0  B4D8               	btfsc	status,2,c
  7606  0017A2  D011               	goto	l820
  7607                           
  7608                           ; BSR set to: 0
  7609  0017A4  0100               	movlb	0	; () banked
  7610  0017A6  5194               	movf	___ftadd@exp1& (0+255),w,b
  7611  0017A8  0100               	movlb	0	; () banked
  7612  0017AA  5D93               	subwf	___ftadd@exp2& (0+255),w,b
  7613  0017AC  B0D8               	btfsc	status,0,c
  7614  0017AE  D012               	goto	l5298
  7615                           
  7616                           ; BSR set to: 0
  7617  0017B0  0100               	movlb	0	; () banked
  7618  0017B2  5193               	movf	___ftadd@exp2& (0+255),w,b
  7619  0017B4  0800               	sublw	0
  7620  0017B6  0100               	movlb	0	; () banked
  7621  0017B8  2594               	addwf	___ftadd@exp1& (0+255),w,b
  7622  0017BA  0100               	movlb	0	; () banked
  7623  0017BC  6F8F               	movwf	??___ftadd& (0+255),b
  7624  0017BE  0E18               	movlw	24
  7625  0017C0  0100               	movlb	0	; () banked
  7626  0017C2  658F               	cpfsgt	??___ftadd& (0+255),b
  7627  0017C4  D007               	goto	l5298
  7628  0017C6                     l820:
  7629                           
  7630                           ; BSR set to: 0
  7631  0017C6  C089  F089         	movff	___ftadd@f1,?___ftadd
  7632  0017CA  C08A  F08A         	movff	___ftadd@f1+1,?___ftadd+1
  7633  0017CE  C08B  F08B         	movff	___ftadd@f1+2,?___ftadd+2
  7634  0017D2  0012               	return	
  7635  0017D4                     l5298:
  7636                           
  7637                           ; BSR set to: 0
  7638  0017D4  0E06               	movlw	6
  7639  0017D6  0100               	movlb	0	; () banked
  7640  0017D8  6F92               	movwf	___ftadd@sign& (0+255),b
  7641                           
  7642                           ; BSR set to: 0
  7643  0017DA  0100               	movlb	0	; () banked
  7644  0017DC  AF8B               	btfss	(___ftadd@f1+2)& (0+255),7,b
  7645  0017DE  D002               	goto	l5304
  7646                           
  7647                           ; BSR set to: 0
  7648  0017E0  0100               	movlb	0	; () banked
  7649  0017E2  8F92               	bsf	___ftadd@sign& (0+255),7,b
  7650  0017E4                     l5304:
  7651                           
  7652                           ; BSR set to: 0
  7653  0017E4  0100               	movlb	0	; () banked
  7654  0017E6  AF8E               	btfss	(___ftadd@f2+2)& (0+255),7,b
  7655  0017E8  D002               	goto	l822
  7656                           
  7657                           ; BSR set to: 0
  7658  0017EA  0100               	movlb	0	; () banked
  7659  0017EC  8D92               	bsf	___ftadd@sign& (0+255),6,b
  7660  0017EE                     l822:
  7661                           
  7662                           ; BSR set to: 0
  7663  0017EE  0100               	movlb	0	; () banked
  7664  0017F0  8F8A               	bsf	(___ftadd@f1+1)& (0+255),7,b
  7665                           
  7666                           ; BSR set to: 0
  7667  0017F2  0EFF               	movlw	255
  7668  0017F4  0100               	movlb	0	; () banked
  7669  0017F6  1789               	andwf	___ftadd@f1& (0+255),f,b
  7670  0017F8  0EFF               	movlw	255
  7671  0017FA  0100               	movlb	0	; () banked
  7672  0017FC  178A               	andwf	(___ftadd@f1+1)& (0+255),f,b
  7673  0017FE  0E00               	movlw	0
  7674  001800  0100               	movlb	0	; () banked
  7675  001802  178B               	andwf	(___ftadd@f1+2)& (0+255),f,b
  7676  001804  0100               	movlb	0	; () banked
  7677  001806  8F8D               	bsf	(___ftadd@f2+1)& (0+255),7,b
  7678                           
  7679                           ; BSR set to: 0
  7680  001808  0EFF               	movlw	255
  7681  00180A  0100               	movlb	0	; () banked
  7682  00180C  178C               	andwf	___ftadd@f2& (0+255),f,b
  7683  00180E  0EFF               	movlw	255
  7684  001810  0100               	movlb	0	; () banked
  7685  001812  178D               	andwf	(___ftadd@f2+1)& (0+255),f,b
  7686  001814  0E00               	movlw	0
  7687  001816  0100               	movlb	0	; () banked
  7688  001818  178E               	andwf	(___ftadd@f2+2)& (0+255),f,b
  7689                           
  7690                           ; BSR set to: 0
  7691  00181A  0100               	movlb	0	; () banked
  7692  00181C  5193               	movf	___ftadd@exp2& (0+255),w,b
  7693  00181E  0100               	movlb	0	; () banked
  7694  001820  5D94               	subwf	___ftadd@exp1& (0+255),w,b
  7695  001822  B0D8               	btfsc	status,0,c
  7696  001824  D025               	goto	l5324
  7697  001826                     l5314:
  7698                           
  7699                           ; BSR set to: 0
  7700  001826  0100               	movlb	0	; () banked
  7701  001828  90D8               	bcf	status,0,c
  7702  00182A  378C               	rlcf	___ftadd@f2& (0+255),f,b
  7703  00182C  378D               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  7704  00182E  378E               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  7705  001830  0100               	movlb	0	; () banked
  7706  001832  0793               	decf	___ftadd@exp2& (0+255),f,b
  7707                           
  7708                           ; BSR set to: 0
  7709  001834  0100               	movlb	0	; () banked
  7710  001836  5194               	movf	___ftadd@exp1& (0+255),w,b
  7711  001838  0100               	movlb	0	; () banked
  7712  00183A  1993               	xorwf	___ftadd@exp2& (0+255),w,b
  7713  00183C  B4D8               	btfsc	status,2,c
  7714  00183E  D011               	goto	l5322
  7715                           
  7716                           ; BSR set to: 0
  7717  001840  0100               	movlb	0	; () banked
  7718  001842  0792               	decf	___ftadd@sign& (0+255),f,b
  7719  001844  C092  F08F         	movff	___ftadd@sign,??___ftadd
  7720  001848  0E07               	movlw	7
  7721  00184A  0100               	movlb	0	; () banked
  7722  00184C  178F               	andwf	??___ftadd& (0+255),f,b
  7723  00184E  B4D8               	btfsc	status,2,c
  7724  001850  D008               	goto	l5322
  7725  001852  D7E9               	goto	l5314
  7726  001854                     l5320:
  7727                           
  7728                           ; BSR set to: 0
  7729  001854  0100               	movlb	0	; () banked
  7730  001856  90D8               	bcf	status,0,c
  7731  001858  338B               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  7732  00185A  338A               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  7733  00185C  3389               	rrcf	___ftadd@f1& (0+255),f,b
  7734  00185E  0100               	movlb	0	; () banked
  7735  001860  2B94               	incf	___ftadd@exp1& (0+255),f,b
  7736  001862                     l5322:
  7737                           
  7738                           ; BSR set to: 0
  7739  001862  0100               	movlb	0	; () banked
  7740  001864  5193               	movf	___ftadd@exp2& (0+255),w,b
  7741  001866  0100               	movlb	0	; () banked
  7742  001868  1994               	xorwf	___ftadd@exp1& (0+255),w,b
  7743  00186A  B4D8               	btfsc	status,2,c
  7744  00186C  D02B               	goto	l831
  7745  00186E  D7F2               	goto	l5320
  7746  001870                     l5324:
  7747                           
  7748                           ; BSR set to: 0
  7749  001870  0100               	movlb	0	; () banked
  7750  001872  5194               	movf	___ftadd@exp1& (0+255),w,b
  7751  001874  0100               	movlb	0	; () banked
  7752  001876  5D93               	subwf	___ftadd@exp2& (0+255),w,b
  7753  001878  B0D8               	btfsc	status,0,c
  7754  00187A  D024               	goto	l831
  7755  00187C                     l5326:
  7756                           
  7757                           ; BSR set to: 0
  7758  00187C  0100               	movlb	0	; () banked
  7759  00187E  90D8               	bcf	status,0,c
  7760  001880  3789               	rlcf	___ftadd@f1& (0+255),f,b
  7761  001882  378A               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  7762  001884  378B               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  7763  001886  0100               	movlb	0	; () banked
  7764  001888  0794               	decf	___ftadd@exp1& (0+255),f,b
  7765                           
  7766                           ; BSR set to: 0
  7767  00188A  0100               	movlb	0	; () banked
  7768  00188C  5194               	movf	___ftadd@exp1& (0+255),w,b
  7769  00188E  0100               	movlb	0	; () banked
  7770  001890  1993               	xorwf	___ftadd@exp2& (0+255),w,b
  7771  001892  B4D8               	btfsc	status,2,c
  7772  001894  D011               	goto	l5334
  7773                           
  7774                           ; BSR set to: 0
  7775  001896  0100               	movlb	0	; () banked
  7776  001898  0792               	decf	___ftadd@sign& (0+255),f,b
  7777  00189A  C092  F08F         	movff	___ftadd@sign,??___ftadd
  7778  00189E  0E07               	movlw	7
  7779  0018A0  0100               	movlb	0	; () banked
  7780  0018A2  178F               	andwf	??___ftadd& (0+255),f,b
  7781  0018A4  B4D8               	btfsc	status,2,c
  7782  0018A6  D008               	goto	l5334
  7783  0018A8  D7E9               	goto	l5326
  7784  0018AA                     l5332:
  7785                           
  7786                           ; BSR set to: 0
  7787  0018AA  0100               	movlb	0	; () banked
  7788  0018AC  90D8               	bcf	status,0,c
  7789  0018AE  338E               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  7790  0018B0  338D               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  7791  0018B2  338C               	rrcf	___ftadd@f2& (0+255),f,b
  7792  0018B4  0100               	movlb	0	; () banked
  7793  0018B6  2B93               	incf	___ftadd@exp2& (0+255),f,b
  7794  0018B8                     l5334:
  7795                           
  7796                           ; BSR set to: 0
  7797  0018B8  0100               	movlb	0	; () banked
  7798  0018BA  5193               	movf	___ftadd@exp2& (0+255),w,b
  7799  0018BC  0100               	movlb	0	; () banked
  7800  0018BE  1994               	xorwf	___ftadd@exp1& (0+255),w,b
  7801  0018C0  A4D8               	btfss	status,2,c
  7802  0018C2  D7F3               	goto	l5332
  7803  0018C4                     l831:
  7804                           
  7805                           ; BSR set to: 0
  7806  0018C4  0100               	movlb	0	; () banked
  7807  0018C6  AF92               	btfss	___ftadd@sign& (0+255),7,b
  7808  0018C8  D012               	goto	l840
  7809                           
  7810                           ; BSR set to: 0
  7811  0018CA  0EFF               	movlw	255
  7812  0018CC  0100               	movlb	0	; () banked
  7813  0018CE  1B89               	xorwf	___ftadd@f1& (0+255),f,b
  7814  0018D0  0EFF               	movlw	255
  7815  0018D2  0100               	movlb	0	; () banked
  7816  0018D4  1B8A               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  7817  0018D6  0EFF               	movlw	255
  7818  0018D8  0100               	movlb	0	; () banked
  7819  0018DA  1B8B               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  7820  0018DC  0E01               	movlw	1
  7821  0018DE  0100               	movlb	0	; () banked
  7822  0018E0  2789               	addwf	___ftadd@f1& (0+255),f,b
  7823  0018E2  0E00               	movlw	0
  7824  0018E4  0100               	movlb	0	; () banked
  7825  0018E6  238A               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  7826  0018E8  0E00               	movlw	0
  7827  0018EA  0100               	movlb	0	; () banked
  7828  0018EC  238B               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  7829  0018EE                     l840:
  7830                           
  7831                           ; BSR set to: 0
  7832  0018EE  0100               	movlb	0	; () banked
  7833  0018F0  AD92               	btfss	___ftadd@sign& (0+255),6,b
  7834  0018F2  D012               	goto	l5340
  7835                           
  7836                           ; BSR set to: 0
  7837  0018F4  0EFF               	movlw	255
  7838  0018F6  0100               	movlb	0	; () banked
  7839  0018F8  1B8C               	xorwf	___ftadd@f2& (0+255),f,b
  7840  0018FA  0EFF               	movlw	255
  7841  0018FC  0100               	movlb	0	; () banked
  7842  0018FE  1B8D               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  7843  001900  0EFF               	movlw	255
  7844  001902  0100               	movlb	0	; () banked
  7845  001904  1B8E               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  7846  001906  0E01               	movlw	1
  7847  001908  0100               	movlb	0	; () banked
  7848  00190A  278C               	addwf	___ftadd@f2& (0+255),f,b
  7849  00190C  0E00               	movlw	0
  7850  00190E  0100               	movlb	0	; () banked
  7851  001910  238D               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7852  001912  0E00               	movlw	0
  7853  001914  0100               	movlb	0	; () banked
  7854  001916  238E               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7855  001918                     l5340:
  7856                           
  7857                           ; BSR set to: 0
  7858  001918  0E00               	movlw	0
  7859  00191A  0100               	movlb	0	; () banked
  7860  00191C  6F92               	movwf	___ftadd@sign& (0+255),b
  7861                           
  7862                           ; BSR set to: 0
  7863  00191E  0100               	movlb	0	; () banked
  7864  001920  5189               	movf	___ftadd@f1& (0+255),w,b
  7865  001922  0100               	movlb	0	; () banked
  7866  001924  278C               	addwf	___ftadd@f2& (0+255),f,b
  7867  001926  0100               	movlb	0	; () banked
  7868  001928  518A               	movf	(___ftadd@f1+1)& (0+255),w,b
  7869  00192A  0100               	movlb	0	; () banked
  7870  00192C  238D               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7871  00192E  0100               	movlb	0	; () banked
  7872  001930  518B               	movf	(___ftadd@f1+2)& (0+255),w,b
  7873  001932  0100               	movlb	0	; () banked
  7874  001934  238E               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7875                           
  7876                           ; BSR set to: 0
  7877  001936  0100               	movlb	0	; () banked
  7878  001938  AF8E               	btfss	(___ftadd@f2+2)& (0+255),7,b
  7879  00193A  D015               	goto	l5350
  7880                           
  7881                           ; BSR set to: 0
  7882  00193C  0EFF               	movlw	255
  7883  00193E  0100               	movlb	0	; () banked
  7884  001940  1B8C               	xorwf	___ftadd@f2& (0+255),f,b
  7885  001942  0EFF               	movlw	255
  7886  001944  0100               	movlb	0	; () banked
  7887  001946  1B8D               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  7888  001948  0EFF               	movlw	255
  7889  00194A  0100               	movlb	0	; () banked
  7890  00194C  1B8E               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  7891  00194E  0E01               	movlw	1
  7892  001950  0100               	movlb	0	; () banked
  7893  001952  278C               	addwf	___ftadd@f2& (0+255),f,b
  7894  001954  0E00               	movlw	0
  7895  001956  0100               	movlb	0	; () banked
  7896  001958  238D               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7897  00195A  0E00               	movlw	0
  7898  00195C  0100               	movlb	0	; () banked
  7899  00195E  238E               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7900                           
  7901                           ; BSR set to: 0
  7902  001960  0E01               	movlw	1
  7903  001962  0100               	movlb	0	; () banked
  7904  001964  6F92               	movwf	___ftadd@sign& (0+255),b
  7905  001966                     l5350:
  7906                           
  7907                           ; BSR set to: 0
  7908  001966  C08C  F035         	movff	___ftadd@f2,___ftpack@arg
  7909  00196A  C08D  F036         	movff	___ftadd@f2+1,___ftpack@arg+1
  7910  00196E  C08E  F037         	movff	___ftadd@f2+2,___ftpack@arg+2
  7911  001972  C094  F038         	movff	___ftadd@exp1,___ftpack@exp
  7912  001976  C092  F039         	movff	___ftadd@sign,___ftpack@sign
  7913  00197A  ECC9  F014         	call	___ftpack	;wreg free
  7914  00197E  C035  F089         	movff	?___ftpack,?___ftadd
  7915  001982  C036  F08A         	movff	?___ftpack+1,?___ftadd+1
  7916  001986  C037  F08B         	movff	?___ftpack+2,?___ftadd+2
  7917  00198A  0012               	return	
  7918  00198C                     __end_of___ftadd:
  7919                           	opt stack 0
  7920                           tblptru	equ	0xFF8
  7921                           tblptrh	equ	0xFF7
  7922                           tblptrl	equ	0xFF6
  7923                           tablat	equ	0xFF5
  7924                           intcon	equ	0xFF2
  7925                           intcon2	equ	0xFF1
  7926                           intcon3	equ	0xFF0
  7927                           postinc0	equ	0xFEE
  7928                           wreg	equ	0xFE8
  7929                           indf2	equ	0xFDF
  7930                           postinc2	equ	0xFDE
  7931                           postdec2	equ	0xFDD
  7932                           fsr2h	equ	0xFDA
  7933                           fsr2l	equ	0xFD9
  7934                           status	equ	0xFD8
  7935                           
  7936 ;; *************** function ___ftneg *****************
  7937 ;; Defined at:
  7938 ;;		line 15 in file "/Applications/microchip/xc8/v1.41/sources/common/ftneg.c"
  7939 ;; Parameters:    Size  Location     Type
  7940 ;;  f1              3   52[COMRAM] float 
  7941 ;; Auto vars:     Size  Location     Type
  7942 ;;		None
  7943 ;; Return value:  Size  Location     Type
  7944 ;;                  3   52[COMRAM] float 
  7945 ;; Registers used:
  7946 ;;		wreg, status,2, status,0
  7947 ;; Tracked objects:
  7948 ;;		On entry : 0/0
  7949 ;;		On exit  : 0/0
  7950 ;;		Unchanged: 0/0
  7951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7952 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7955 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7956 ;;Total ram usage:        3 bytes
  7957 ;; Hardware stack levels used:    1
  7958 ;; Hardware stack levels required when called:    5
  7959 ;; This function calls:
  7960 ;;		Nothing
  7961 ;; This function is called by:
  7962 ;;		_pow
  7963 ;;		_exp
  7964 ;; This function uses a non-reentrant model
  7965 ;;
  7966                           
  7967                           	psect	text18
  7968  003484                     __ptext18:
  7969                           	opt stack 0
  7970  003484                     ___ftneg:
  7971                           	opt stack 21
  7972                           
  7973                           ;incstack = 0
  7974  003484  5035               	movf	___ftneg@f1,w,c
  7975  003486  1036               	iorwf	___ftneg@f1+1,w,c
  7976  003488  1037               	iorwf	___ftneg@f1+2,w,c
  7977  00348A  B4D8               	btfsc	status,2,c
  7978  00348C  D006               	goto	l873
  7979  00348E  0E00               	movlw	0
  7980  003490  1A35               	xorwf	___ftneg@f1,f,c
  7981  003492  0E00               	movlw	0
  7982  003494  1A36               	xorwf	___ftneg@f1+1,f,c
  7983  003496  0E80               	movlw	128
  7984  003498  1A37               	xorwf	___ftneg@f1+2,f,c
  7985  00349A                     l873:
  7986  00349A  C035  F035         	movff	___ftneg@f1,?___ftneg
  7987  00349E  C036  F036         	movff	___ftneg@f1+1,?___ftneg+1
  7988  0034A2  C037  F037         	movff	___ftneg@f1+2,?___ftneg+2
  7989  0034A6  0012               	return		;funcret
  7990  0034A8                     __end_of___ftneg:
  7991                           	opt stack 0
  7992                           tblptru	equ	0xFF8
  7993                           tblptrh	equ	0xFF7
  7994                           tblptrl	equ	0xFF6
  7995                           tablat	equ	0xFF5
  7996                           intcon	equ	0xFF2
  7997                           intcon2	equ	0xFF1
  7998                           intcon3	equ	0xFF0
  7999                           postinc0	equ	0xFEE
  8000                           wreg	equ	0xFE8
  8001                           indf2	equ	0xFDF
  8002                           postinc2	equ	0xFDE
  8003                           postdec2	equ	0xFDD
  8004                           fsr2h	equ	0xFDA
  8005                           fsr2l	equ	0xFD9
  8006                           status	equ	0xFD8
  8007                           
  8008 ;; *************** function ___ftdiv *****************
  8009 ;; Defined at:
  8010 ;;		line 54 in file "/Applications/microchip/xc8/v1.41/sources/common/ftdiv.c"
  8011 ;; Parameters:    Size  Location     Type
  8012 ;;  f1              3   60[COMRAM] float 
  8013 ;;  f2              3   63[COMRAM] float 
  8014 ;; Auto vars:     Size  Location     Type
  8015 ;;  f3              3    1[BANK0 ] float 
  8016 ;;  sign            1    5[BANK0 ] unsigned char 
  8017 ;;  exp             1    4[BANK0 ] unsigned char 
  8018 ;;  cntr            1    0[BANK0 ] unsigned char 
  8019 ;; Return value:  Size  Location     Type
  8020 ;;                  3   60[COMRAM] float 
  8021 ;; Registers used:
  8022 ;;		wreg, status,2, status,0, cstack
  8023 ;; Tracked objects:
  8024 ;;		On entry : 0/0
  8025 ;;		On exit  : 0/0
  8026 ;;		Unchanged: 0/0
  8027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8028 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8029 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8030 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8031 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8032 ;;Total ram usage:       15 bytes
  8033 ;; Hardware stack levels used:    1
  8034 ;; Hardware stack levels required when called:    6
  8035 ;; This function calls:
  8036 ;;		___ftpack
  8037 ;; This function is called by:
  8038 ;;		_exp
  8039 ;; This function uses a non-reentrant model
  8040 ;;
  8041                           
  8042                           	psect	text19
  8043  0024EA                     __ptext19:
  8044                           	opt stack 0
  8045  0024EA                     ___ftdiv:
  8046                           	opt stack 20
  8047                           
  8048                           ;incstack = 0
  8049  0024EA  C03F  F043         	movff	___ftdiv@f1+2,??___ftdiv
  8050  0024EE  6A44               	clrf	(??___ftdiv+1)& (0+255),c
  8051  0024F0  6A45               	clrf	(??___ftdiv+2)& (0+255),c
  8052  0024F2  343E               	rlcf	___ftdiv@f1+1,w,c
  8053  0024F4  3643               	rlcf	??___ftdiv& (0+255),f,c
  8054  0024F6  E301               	bnc	u6151
  8055  0024F8  8044               	bsf	(??___ftdiv+1)& (0+255),0,c
  8056  0024FA                     u6151:
  8057  0024FA  5043               	movf	??___ftdiv,w,c
  8058  0024FC  0100               	movlb	0	; () banked
  8059  0024FE  6F84               	movwf	___ftdiv@exp& (0+255),b
  8060  002500  0100               	movlb	0	; () banked
  8061  002502  5184               	movf	___ftdiv@exp& (0+255),w,b
  8062  002504  A4D8               	btfss	status,2,c
  8063  002506  D007               	goto	l5408
  8064                           
  8065                           ; BSR set to: 0
  8066  002508  0E00               	movlw	0
  8067  00250A  6E3D               	movwf	?___ftdiv,c
  8068  00250C  0E00               	movlw	0
  8069  00250E  6E3E               	movwf	?___ftdiv+1,c
  8070  002510  0E00               	movlw	0
  8071  002512  6E3F               	movwf	?___ftdiv+2,c
  8072                           
  8073                           ; BSR set to: 0
  8074  002514  0012               	return	
  8075  002516                     l5408:
  8076                           
  8077                           ; BSR set to: 0
  8078  002516  C042  F043         	movff	___ftdiv@f2+2,??___ftdiv
  8079  00251A  6A44               	clrf	(??___ftdiv+1)& (0+255),c
  8080  00251C  6A45               	clrf	(??___ftdiv+2)& (0+255),c
  8081  00251E  3441               	rlcf	___ftdiv@f2+1,w,c
  8082  002520  3643               	rlcf	??___ftdiv& (0+255),f,c
  8083  002522  E301               	bnc	u6171
  8084  002524  8044               	bsf	(??___ftdiv+1)& (0+255),0,c
  8085  002526                     u6171:
  8086  002526  5043               	movf	??___ftdiv,w,c
  8087  002528  0100               	movlb	0	; () banked
  8088  00252A  6F85               	movwf	___ftdiv@sign& (0+255),b
  8089  00252C  0100               	movlb	0	; () banked
  8090  00252E  5185               	movf	___ftdiv@sign& (0+255),w,b
  8091  002530  A4D8               	btfss	status,2,c
  8092  002532  D007               	goto	l5414
  8093                           
  8094                           ; BSR set to: 0
  8095  002534  0E00               	movlw	0
  8096  002536  6E3D               	movwf	?___ftdiv,c
  8097  002538  0E00               	movlw	0
  8098  00253A  6E3E               	movwf	?___ftdiv+1,c
  8099  00253C  0E00               	movlw	0
  8100  00253E  6E3F               	movwf	?___ftdiv+2,c
  8101                           
  8102                           ; BSR set to: 0
  8103  002540  0012               	return	
  8104  002542                     l5414:
  8105                           
  8106                           ; BSR set to: 0
  8107  002542  0E00               	movlw	0
  8108  002544  0100               	movlb	0	; () banked
  8109  002546  6F81               	movwf	___ftdiv@f3& (0+255),b
  8110  002548  0E00               	movlw	0
  8111  00254A  0100               	movlb	0	; () banked
  8112  00254C  6F82               	movwf	(___ftdiv@f3+1)& (0+255),b
  8113  00254E  0E00               	movlw	0
  8114  002550  0100               	movlb	0	; () banked
  8115  002552  6F83               	movwf	(___ftdiv@f3+2)& (0+255),b
  8116                           
  8117                           ; BSR set to: 0
  8118  002554  0100               	movlb	0	; () banked
  8119  002556  5185               	movf	___ftdiv@sign& (0+255),w,b
  8120  002558  0F89               	addlw	137
  8121  00255A  0100               	movlb	0	; () banked
  8122  00255C  5F84               	subwf	___ftdiv@exp& (0+255),f,b
  8123                           
  8124                           ; BSR set to: 0
  8125  00255E  C03F  F085         	movff	___ftdiv@f1+2,___ftdiv@sign
  8126                           
  8127                           ; BSR set to: 0
  8128  002562  5042               	movf	___ftdiv@f2+2,w,c
  8129  002564  0100               	movlb	0	; () banked
  8130  002566  1B85               	xorwf	___ftdiv@sign& (0+255),f,b
  8131                           
  8132                           ; BSR set to: 0
  8133  002568  0E80               	movlw	128
  8134  00256A  0100               	movlb	0	; () banked
  8135  00256C  1785               	andwf	___ftdiv@sign& (0+255),f,b
  8136                           
  8137                           ; BSR set to: 0
  8138  00256E  8E3E               	bsf	___ftdiv@f1+1,7,c
  8139                           
  8140                           ; BSR set to: 0
  8141  002570  0EFF               	movlw	255
  8142  002572  163D               	andwf	___ftdiv@f1,f,c
  8143  002574  0EFF               	movlw	255
  8144  002576  163E               	andwf	___ftdiv@f1+1,f,c
  8145  002578  0E00               	movlw	0
  8146  00257A  163F               	andwf	___ftdiv@f1+2,f,c
  8147                           
  8148                           ; BSR set to: 0
  8149  00257C  8E41               	bsf	___ftdiv@f2+1,7,c
  8150                           
  8151                           ; BSR set to: 0
  8152  00257E  0EFF               	movlw	255
  8153  002580  1640               	andwf	___ftdiv@f2,f,c
  8154  002582  0EFF               	movlw	255
  8155  002584  1641               	andwf	___ftdiv@f2+1,f,c
  8156  002586  0E00               	movlw	0
  8157  002588  1642               	andwf	___ftdiv@f2+2,f,c
  8158                           
  8159                           ; BSR set to: 0
  8160  00258A  0E18               	movlw	24
  8161  00258C  0100               	movlb	0	; () banked
  8162  00258E  6F80               	movwf	___ftdiv@cntr& (0+255),b
  8163  002590                     l5434:
  8164                           
  8165                           ; BSR set to: 0
  8166  002590  0100               	movlb	0	; () banked
  8167  002592  90D8               	bcf	status,0,c
  8168  002594  3781               	rlcf	___ftdiv@f3& (0+255),f,b
  8169  002596  3782               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  8170  002598  3783               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  8171                           
  8172                           ; BSR set to: 0
  8173  00259A  5040               	movf	___ftdiv@f2,w,c
  8174  00259C  5C3D               	subwf	___ftdiv@f1,w,c
  8175  00259E  5041               	movf	___ftdiv@f2+1,w,c
  8176  0025A0  583E               	subwfb	___ftdiv@f1+1,w,c
  8177  0025A2  5042               	movf	___ftdiv@f2+2,w,c
  8178  0025A4  583F               	subwfb	___ftdiv@f1+2,w,c
  8179  0025A6  A0D8               	btfss	status,0,c
  8180  0025A8  D008               	goto	l851
  8181                           
  8182                           ; BSR set to: 0
  8183  0025AA  5040               	movf	___ftdiv@f2,w,c
  8184  0025AC  5E3D               	subwf	___ftdiv@f1,f,c
  8185  0025AE  5041               	movf	___ftdiv@f2+1,w,c
  8186  0025B0  5A3E               	subwfb	___ftdiv@f1+1,f,c
  8187  0025B2  5042               	movf	___ftdiv@f2+2,w,c
  8188  0025B4  5A3F               	subwfb	___ftdiv@f1+2,f,c
  8189                           
  8190                           ; BSR set to: 0
  8191  0025B6  0100               	movlb	0	; () banked
  8192  0025B8  8181               	bsf	___ftdiv@f3& (0+255),0,b
  8193  0025BA                     l851:
  8194                           
  8195                           ; BSR set to: 0
  8196  0025BA  90D8               	bcf	status,0,c
  8197  0025BC  363D               	rlcf	___ftdiv@f1,f,c
  8198  0025BE  363E               	rlcf	___ftdiv@f1+1,f,c
  8199  0025C0  363F               	rlcf	___ftdiv@f1+2,f,c
  8200                           
  8201                           ; BSR set to: 0
  8202  0025C2  0100               	movlb	0	; () banked
  8203  0025C4  2F80               	decfsz	___ftdiv@cntr& (0+255),f,b
  8204  0025C6  D7E4               	goto	l5434
  8205                           
  8206                           ; BSR set to: 0
  8207                           
  8208                           ; BSR set to: 0
  8209  0025C8  C081  F035         	movff	___ftdiv@f3,___ftpack@arg
  8210  0025CC  C082  F036         	movff	___ftdiv@f3+1,___ftpack@arg+1
  8211  0025D0  C083  F037         	movff	___ftdiv@f3+2,___ftpack@arg+2
  8212  0025D4  C084  F038         	movff	___ftdiv@exp,___ftpack@exp
  8213  0025D8  C085  F039         	movff	___ftdiv@sign,___ftpack@sign
  8214  0025DC  ECC9  F014         	call	___ftpack	;wreg free
  8215  0025E0  C035  F03D         	movff	?___ftpack,?___ftdiv
  8216  0025E4  C036  F03E         	movff	?___ftpack+1,?___ftdiv+1
  8217  0025E8  C037  F03F         	movff	?___ftpack+2,?___ftdiv+2
  8218  0025EC  0012               	return	
  8219  0025EE                     __end_of___ftdiv:
  8220                           	opt stack 0
  8221                           tblptru	equ	0xFF8
  8222                           tblptrh	equ	0xFF7
  8223                           tblptrl	equ	0xFF6
  8224                           tablat	equ	0xFF5
  8225                           intcon	equ	0xFF2
  8226                           intcon2	equ	0xFF1
  8227                           intcon3	equ	0xFF0
  8228                           postinc0	equ	0xFEE
  8229                           wreg	equ	0xFE8
  8230                           indf2	equ	0xFDF
  8231                           postinc2	equ	0xFDE
  8232                           postdec2	equ	0xFDD
  8233                           fsr2h	equ	0xFDA
  8234                           fsr2l	equ	0xFD9
  8235                           status	equ	0xFD8
  8236                           
  8237 ;; *************** function ___awtoft *****************
  8238 ;; Defined at:
  8239 ;;		line 32 in file "/Applications/microchip/xc8/v1.41/sources/common/awtoft.c"
  8240 ;; Parameters:    Size  Location     Type
  8241 ;;  c               2   60[COMRAM] int 
  8242 ;; Auto vars:     Size  Location     Type
  8243 ;;  sign            1   63[COMRAM] unsigned char 
  8244 ;; Return value:  Size  Location     Type
  8245 ;;                  3   60[COMRAM] float 
  8246 ;; Registers used:
  8247 ;;		wreg, status,2, status,0, cstack
  8248 ;; Tracked objects:
  8249 ;;		On entry : 0/0
  8250 ;;		On exit  : 0/0
  8251 ;;		Unchanged: 0/0
  8252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8253 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8254 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8256 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8257 ;;Total ram usage:        4 bytes
  8258 ;; Hardware stack levels used:    1
  8259 ;; Hardware stack levels required when called:    6
  8260 ;; This function calls:
  8261 ;;		___ftpack
  8262 ;; This function is called by:
  8263 ;;		_dec2hex
  8264 ;;		_exp
  8265 ;;		_log
  8266 ;; This function uses a non-reentrant model
  8267 ;;
  8268                           
  8269                           	psect	text20
  8270  003366                     __ptext20:
  8271                           	opt stack 0
  8272  003366                     ___awtoft:
  8273                           	opt stack 20
  8274                           
  8275                           ;incstack = 0
  8276  003366  0E00               	movlw	0
  8277  003368  6E40               	movwf	___awtoft@sign,c
  8278  00336A  AE3E               	btfss	___awtoft@c+1,7,c
  8279  00336C  D006               	goto	l5464
  8280  00336E  6C3D               	negf	___awtoft@c,c
  8281  003370  1E3E               	comf	___awtoft@c+1,f,c
  8282  003372  B0D8               	btfsc	status,0,c
  8283  003374  2A3E               	incf	___awtoft@c+1,f,c
  8284  003376  0E01               	movlw	1
  8285  003378  6E40               	movwf	___awtoft@sign,c
  8286  00337A                     l5464:
  8287  00337A  C03D  F035         	movff	___awtoft@c,___ftpack@arg
  8288  00337E  C03E  F036         	movff	___awtoft@c+1,___ftpack@arg+1
  8289  003382  6A37               	clrf	___ftpack@arg+2,c
  8290  003384  0E8E               	movlw	142
  8291  003386  6E38               	movwf	___ftpack@exp,c
  8292  003388  C040  F039         	movff	___awtoft@sign,___ftpack@sign
  8293  00338C  ECC9  F014         	call	___ftpack	;wreg free
  8294  003390  C035  F03D         	movff	?___ftpack,?___awtoft
  8295  003394  C036  F03E         	movff	?___ftpack+1,?___awtoft+1
  8296  003398  C037  F03F         	movff	?___ftpack+2,?___awtoft+2
  8297  00339C  0012               	return	
  8298  00339E                     __end_of___awtoft:
  8299                           	opt stack 0
  8300                           tblptru	equ	0xFF8
  8301                           tblptrh	equ	0xFF7
  8302                           tblptrl	equ	0xFF6
  8303                           tablat	equ	0xFF5
  8304                           intcon	equ	0xFF2
  8305                           intcon2	equ	0xFF1
  8306                           intcon3	equ	0xFF0
  8307                           postinc0	equ	0xFEE
  8308                           wreg	equ	0xFE8
  8309                           indf2	equ	0xFDF
  8310                           postinc2	equ	0xFDE
  8311                           postdec2	equ	0xFDD
  8312                           fsr2h	equ	0xFDA
  8313                           fsr2l	equ	0xFD9
  8314                           status	equ	0xFD8
  8315                           
  8316 ;; *************** function ___lltoft *****************
  8317 ;; Defined at:
  8318 ;;		line 35 in file "/Applications/microchip/xc8/v1.41/sources/common/lltoft.c"
  8319 ;; Parameters:    Size  Location     Type
  8320 ;;  c               4   60[COMRAM] unsigned long 
  8321 ;; Auto vars:     Size  Location     Type
  8322 ;;  exp             1   68[COMRAM] unsigned char 
  8323 ;; Return value:  Size  Location     Type
  8324 ;;                  3   60[COMRAM] float 
  8325 ;; Registers used:
  8326 ;;		wreg, status,2, status,0, cstack
  8327 ;; Tracked objects:
  8328 ;;		On entry : 0/0
  8329 ;;		On exit  : 0/0
  8330 ;;		Unchanged: 0/0
  8331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8332 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8333 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8334 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8335 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8336 ;;Total ram usage:        9 bytes
  8337 ;; Hardware stack levels used:    1
  8338 ;; Hardware stack levels required when called:    6
  8339 ;; This function calls:
  8340 ;;		___ftpack
  8341 ;; This function is called by:
  8342 ;;		_pow
  8343 ;; This function uses a non-reentrant model
  8344 ;;
  8345                           
  8346                           	psect	text21
  8347  002DE0                     __ptext21:
  8348                           	opt stack 0
  8349  002DE0                     ___lltoft:
  8350                           	opt stack 21
  8351                           
  8352                           ;incstack = 0
  8353  002DE0  0E8E               	movlw	142
  8354  002DE2  6E45               	movwf	___lltoft@exp,c
  8355  002DE4  D006               	goto	l5502
  8356  002DE6                     l5500:
  8357  002DE6  90D8               	bcf	status,0,c
  8358  002DE8  3240               	rrcf	___lltoft@c+3,f,c
  8359  002DEA  323F               	rrcf	___lltoft@c+2,f,c
  8360  002DEC  323E               	rrcf	___lltoft@c+1,f,c
  8361  002DEE  323D               	rrcf	___lltoft@c,f,c
  8362  002DF0  2A45               	incf	___lltoft@exp,f,c
  8363  002DF2                     l5502:
  8364  002DF2  0E00               	movlw	0
  8365  002DF4  143D               	andwf	___lltoft@c,w,c
  8366  002DF6  6E41               	movwf	??___lltoft& (0+255),c
  8367  002DF8  0E00               	movlw	0
  8368  002DFA  143E               	andwf	___lltoft@c+1,w,c
  8369  002DFC  6E42               	movwf	(??___lltoft+1)& (0+255),c
  8370  002DFE  0E00               	movlw	0
  8371  002E00  143F               	andwf	___lltoft@c+2,w,c
  8372  002E02  6E43               	movwf	(??___lltoft+2)& (0+255),c
  8373  002E04  0EFF               	movlw	255
  8374  002E06  1440               	andwf	___lltoft@c+3,w,c
  8375  002E08  6E44               	movwf	(??___lltoft+3)& (0+255),c
  8376  002E0A  5041               	movf	??___lltoft,w,c
  8377  002E0C  1042               	iorwf	??___lltoft+1,w,c
  8378  002E0E  1043               	iorwf	??___lltoft+2,w,c
  8379  002E10  1044               	iorwf	??___lltoft+3,w,c
  8380  002E12  A4D8               	btfss	status,2,c
  8381  002E14  D7E8               	goto	l5500
  8382  002E16  C03D  F035         	movff	___lltoft@c,___ftpack@arg
  8383  002E1A  C03E  F036         	movff	___lltoft@c+1,___ftpack@arg+1
  8384  002E1E  C03F  F037         	movff	___lltoft@c+2,___ftpack@arg+2
  8385  002E22  C045  F038         	movff	___lltoft@exp,___ftpack@exp
  8386  002E26  0E00               	movlw	0
  8387  002E28  6E39               	movwf	___ftpack@sign,c
  8388  002E2A  ECC9  F014         	call	___ftpack	;wreg free
  8389  002E2E  C035  F03D         	movff	?___ftpack,?___lltoft
  8390  002E32  C036  F03E         	movff	?___ftpack+1,?___lltoft+1
  8391  002E36  C037  F03F         	movff	?___ftpack+2,?___lltoft+2
  8392  002E3A  0012               	return	
  8393  002E3C                     __end_of___lltoft:
  8394                           	opt stack 0
  8395                           tblptru	equ	0xFF8
  8396                           tblptrh	equ	0xFF7
  8397                           tblptrl	equ	0xFF6
  8398                           tablat	equ	0xFF5
  8399                           intcon	equ	0xFF2
  8400                           intcon2	equ	0xFF1
  8401                           intcon3	equ	0xFF0
  8402                           postinc0	equ	0xFEE
  8403                           wreg	equ	0xFE8
  8404                           indf2	equ	0xFDF
  8405                           postinc2	equ	0xFDE
  8406                           postdec2	equ	0xFDD
  8407                           fsr2h	equ	0xFDA
  8408                           fsr2l	equ	0xFD9
  8409                           status	equ	0xFD8
  8410                           
  8411 ;; *************** function ___ftpack *****************
  8412 ;; Defined at:
  8413 ;;		line 62 in file "/Applications/microchip/xc8/v1.41/sources/common/float.c"
  8414 ;; Parameters:    Size  Location     Type
  8415 ;;  arg             3   52[COMRAM] unsigned um
  8416 ;;  exp             1   55[COMRAM] unsigned char 
  8417 ;;  sign            1   56[COMRAM] unsigned char 
  8418 ;; Auto vars:     Size  Location     Type
  8419 ;;		None
  8420 ;; Return value:  Size  Location     Type
  8421 ;;                  3   52[COMRAM] float 
  8422 ;; Registers used:
  8423 ;;		wreg, status,2, status,0
  8424 ;; Tracked objects:
  8425 ;;		On entry : 0/0
  8426 ;;		On exit  : 0/0
  8427 ;;		Unchanged: 0/0
  8428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8429 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8431 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8432 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8433 ;;Total ram usage:        8 bytes
  8434 ;; Hardware stack levels used:    1
  8435 ;; Hardware stack levels required when called:    5
  8436 ;; This function calls:
  8437 ;;		Nothing
  8438 ;; This function is called by:
  8439 ;;		___altoft
  8440 ;;		___awtoft
  8441 ;;		___ftadd
  8442 ;;		___ftdiv
  8443 ;;		___ftmul
  8444 ;;		___lltoft
  8445 ;; This function uses a non-reentrant model
  8446 ;;
  8447                           
  8448                           	psect	text22
  8449  002992                     __ptext22:
  8450                           	opt stack 0
  8451  002992                     ___ftpack:
  8452                           	opt stack 19
  8453                           
  8454                           ;incstack = 0
  8455  002992  5038               	movf	___ftpack@exp,w,c
  8456  002994  B4D8               	btfsc	status,2,c
  8457  002996  D005               	goto	l5236
  8458  002998  5035               	movf	___ftpack@arg,w,c
  8459  00299A  1036               	iorwf	___ftpack@arg+1,w,c
  8460  00299C  1037               	iorwf	___ftpack@arg+2,w,c
  8461  00299E  A4D8               	btfss	status,2,c
  8462  0029A0  D00C               	goto	l5242
  8463  0029A2                     l5236:
  8464  0029A2  0E00               	movlw	0
  8465  0029A4  6E35               	movwf	?___ftpack,c
  8466  0029A6  0E00               	movlw	0
  8467  0029A8  6E36               	movwf	?___ftpack+1,c
  8468  0029AA  0E00               	movlw	0
  8469  0029AC  6E37               	movwf	?___ftpack+2,c
  8470  0029AE  0012               	return	
  8471  0029B0                     l5240:
  8472  0029B0  2A38               	incf	___ftpack@exp,f,c
  8473  0029B2  90D8               	bcf	status,0,c
  8474  0029B4  3237               	rrcf	___ftpack@arg+2,f,c
  8475  0029B6  3236               	rrcf	___ftpack@arg+1,f,c
  8476  0029B8  3235               	rrcf	___ftpack@arg,f,c
  8477  0029BA                     l5242:
  8478  0029BA  0E00               	movlw	0
  8479  0029BC  1435               	andwf	___ftpack@arg,w,c
  8480  0029BE  6E3A               	movwf	??___ftpack& (0+255),c
  8481  0029C0  0E00               	movlw	0
  8482  0029C2  1436               	andwf	___ftpack@arg+1,w,c
  8483  0029C4  6E3B               	movwf	(??___ftpack+1)& (0+255),c
  8484  0029C6  0EFE               	movlw	254
  8485  0029C8  1437               	andwf	___ftpack@arg+2,w,c
  8486  0029CA  6E3C               	movwf	(??___ftpack+2)& (0+255),c
  8487  0029CC  503A               	movf	??___ftpack,w,c
  8488  0029CE  103B               	iorwf	??___ftpack+1,w,c
  8489  0029D0  103C               	iorwf	??___ftpack+2,w,c
  8490  0029D2  B4D8               	btfsc	status,2,c
  8491  0029D4  D00C               	goto	l5248
  8492  0029D6  D7EC               	goto	l5240
  8493  0029D8                     l5244:
  8494  0029D8  2A38               	incf	___ftpack@exp,f,c
  8495  0029DA  0E01               	movlw	1
  8496  0029DC  2635               	addwf	___ftpack@arg,f,c
  8497  0029DE  0E00               	movlw	0
  8498  0029E0  2236               	addwfc	___ftpack@arg+1,f,c
  8499  0029E2  0E00               	movlw	0
  8500  0029E4  2237               	addwfc	___ftpack@arg+2,f,c
  8501  0029E6  90D8               	bcf	status,0,c
  8502  0029E8  3237               	rrcf	___ftpack@arg+2,f,c
  8503  0029EA  3236               	rrcf	___ftpack@arg+1,f,c
  8504  0029EC  3235               	rrcf	___ftpack@arg,f,c
  8505  0029EE                     l5248:
  8506  0029EE  0E00               	movlw	0
  8507  0029F0  1435               	andwf	___ftpack@arg,w,c
  8508  0029F2  6E3A               	movwf	??___ftpack& (0+255),c
  8509  0029F4  0E00               	movlw	0
  8510  0029F6  1436               	andwf	___ftpack@arg+1,w,c
  8511  0029F8  6E3B               	movwf	(??___ftpack+1)& (0+255),c
  8512  0029FA  0EFF               	movlw	255
  8513  0029FC  1437               	andwf	___ftpack@arg+2,w,c
  8514  0029FE  6E3C               	movwf	(??___ftpack+2)& (0+255),c
  8515  002A00  503A               	movf	??___ftpack,w,c
  8516  002A02  103B               	iorwf	??___ftpack+1,w,c
  8517  002A04  103C               	iorwf	??___ftpack+2,w,c
  8518  002A06  B4D8               	btfsc	status,2,c
  8519  002A08  D006               	goto	l5252
  8520  002A0A  D7E6               	goto	l5244
  8521  002A0C                     l5250:
  8522  002A0C  0638               	decf	___ftpack@exp,f,c
  8523  002A0E  90D8               	bcf	status,0,c
  8524  002A10  3635               	rlcf	___ftpack@arg,f,c
  8525  002A12  3636               	rlcf	___ftpack@arg+1,f,c
  8526  002A14  3637               	rlcf	___ftpack@arg+2,f,c
  8527  002A16                     l5252:
  8528  002A16  BE36               	btfsc	___ftpack@arg+1,7,c
  8529  002A18  D003               	goto	l793
  8530  002A1A  0E02               	movlw	2
  8531  002A1C  6038               	cpfslt	___ftpack@exp,c
  8532  002A1E  D7F6               	goto	l5250
  8533  002A20                     l793:
  8534  002A20  A038               	btfss	___ftpack@exp,0,c
  8535  002A22  9E36               	bcf	___ftpack@arg+1,7,c
  8536  002A24  90D8               	bcf	status,0,c
  8537  002A26  3238               	rrcf	___ftpack@exp,f,c
  8538  002A28  5038               	movf	___ftpack@exp,w,c
  8539  002A2A  1237               	iorwf	___ftpack@arg+2,f,c
  8540  002A2C  5039               	movf	___ftpack@sign,w,c
  8541  002A2E  A4D8               	btfss	status,2,c
  8542  002A30  8E37               	bsf	___ftpack@arg+2,7,c
  8543  002A32  C035  F035         	movff	___ftpack@arg,?___ftpack
  8544  002A36  C036  F036         	movff	___ftpack@arg+1,?___ftpack+1
  8545  002A3A  C037  F037         	movff	___ftpack@arg+2,?___ftpack+2
  8546  002A3E  0012               	return	
  8547  002A40                     __end_of___ftpack:
  8548                           	opt stack 0
  8549                           tblptru	equ	0xFF8
  8550                           tblptrh	equ	0xFF7
  8551                           tblptrl	equ	0xFF6
  8552                           tablat	equ	0xFF5
  8553                           intcon	equ	0xFF2
  8554                           intcon2	equ	0xFF1
  8555                           intcon3	equ	0xFF0
  8556                           postinc0	equ	0xFEE
  8557                           wreg	equ	0xFE8
  8558                           indf2	equ	0xFDF
  8559                           postinc2	equ	0xFDE
  8560                           postdec2	equ	0xFDD
  8561                           fsr2h	equ	0xFDA
  8562                           fsr2l	equ	0xFD9
  8563                           status	equ	0xFD8
  8564                           
  8565 ;; *************** function ___awdiv *****************
  8566 ;; Defined at:
  8567 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/awdiv.c"
  8568 ;; Parameters:    Size  Location     Type
  8569 ;;  dividend        2   52[COMRAM] int 
  8570 ;;  divisor         2   54[COMRAM] int 
  8571 ;; Auto vars:     Size  Location     Type
  8572 ;;  quotient        2   58[COMRAM] int 
  8573 ;;  sign            1   57[COMRAM] unsigned char 
  8574 ;;  counter         1   56[COMRAM] unsigned char 
  8575 ;; Return value:  Size  Location     Type
  8576 ;;                  2   52[COMRAM] int 
  8577 ;; Registers used:
  8578 ;;		wreg, status,2, status,0
  8579 ;; Tracked objects:
  8580 ;;		On entry : 0/0
  8581 ;;		On exit  : 0/0
  8582 ;;		Unchanged: 0/0
  8583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8584 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8585 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8587 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8588 ;;Total ram usage:        8 bytes
  8589 ;; Hardware stack levels used:    1
  8590 ;; Hardware stack levels required when called:    5
  8591 ;; This function calls:
  8592 ;;		Nothing
  8593 ;; This function is called by:
  8594 ;;		_dec2hex
  8595 ;; This function uses a non-reentrant model
  8596 ;;
  8597                           
  8598                           	psect	text23
  8599  002BF6                     __ptext23:
  8600                           	opt stack 0
  8601  002BF6                     ___awdiv:
  8602                           	opt stack 23
  8603                           
  8604                           ;incstack = 0
  8605  002BF6  0E00               	movlw	0
  8606  002BF8  6E3A               	movwf	___awdiv@sign,c
  8607  002BFA  AE38               	btfss	___awdiv@divisor+1,7,c
  8608  002BFC  D006               	goto	l3864
  8609  002BFE  6C37               	negf	___awdiv@divisor,c
  8610  002C00  1E38               	comf	___awdiv@divisor+1,f,c
  8611  002C02  B0D8               	btfsc	status,0,c
  8612  002C04  2A38               	incf	___awdiv@divisor+1,f,c
  8613  002C06  0E01               	movlw	1
  8614  002C08  6E3A               	movwf	___awdiv@sign,c
  8615  002C0A                     l3864:
  8616  002C0A  AE36               	btfss	___awdiv@dividend+1,7,c
  8617  002C0C  D006               	goto	l3870
  8618  002C0E  6C35               	negf	___awdiv@dividend,c
  8619  002C10  1E36               	comf	___awdiv@dividend+1,f,c
  8620  002C12  B0D8               	btfsc	status,0,c
  8621  002C14  2A36               	incf	___awdiv@dividend+1,f,c
  8622  002C16  0E01               	movlw	1
  8623  002C18  1A3A               	xorwf	___awdiv@sign,f,c
  8624  002C1A                     l3870:
  8625  002C1A  0E00               	movlw	0
  8626  002C1C  6E3C               	movwf	___awdiv@quotient+1,c
  8627  002C1E  0E00               	movlw	0
  8628  002C20  6E3B               	movwf	___awdiv@quotient,c
  8629  002C22  5037               	movf	___awdiv@divisor,w,c
  8630  002C24  1038               	iorwf	___awdiv@divisor+1,w,c
  8631  002C26  B4D8               	btfsc	status,2,c
  8632  002C28  D01C               	goto	l3892
  8633  002C2A  0E01               	movlw	1
  8634  002C2C  6E39               	movwf	___awdiv@counter,c
  8635  002C2E  D004               	goto	l3878
  8636  002C30                     l3876:
  8637  002C30  90D8               	bcf	status,0,c
  8638  002C32  3637               	rlcf	___awdiv@divisor,f,c
  8639  002C34  3638               	rlcf	___awdiv@divisor+1,f,c
  8640  002C36  2A39               	incf	___awdiv@counter,f,c
  8641  002C38                     l3878:
  8642  002C38  AE38               	btfss	___awdiv@divisor+1,7,c
  8643  002C3A  D7FA               	goto	l3876
  8644  002C3C                     l3880:
  8645  002C3C  90D8               	bcf	status,0,c
  8646  002C3E  363B               	rlcf	___awdiv@quotient,f,c
  8647  002C40  363C               	rlcf	___awdiv@quotient+1,f,c
  8648  002C42  5037               	movf	___awdiv@divisor,w,c
  8649  002C44  5C35               	subwf	___awdiv@dividend,w,c
  8650  002C46  5038               	movf	___awdiv@divisor+1,w,c
  8651  002C48  5836               	subwfb	___awdiv@dividend+1,w,c
  8652  002C4A  A0D8               	btfss	status,0,c
  8653  002C4C  D005               	goto	l3888
  8654  002C4E  5037               	movf	___awdiv@divisor,w,c
  8655  002C50  5E35               	subwf	___awdiv@dividend,f,c
  8656  002C52  5038               	movf	___awdiv@divisor+1,w,c
  8657  002C54  5A36               	subwfb	___awdiv@dividend+1,f,c
  8658  002C56  803B               	bsf	___awdiv@quotient,0,c
  8659  002C58                     l3888:
  8660  002C58  90D8               	bcf	status,0,c
  8661  002C5A  3238               	rrcf	___awdiv@divisor+1,f,c
  8662  002C5C  3237               	rrcf	___awdiv@divisor,f,c
  8663  002C5E  2E39               	decfsz	___awdiv@counter,f,c
  8664  002C60  D7ED               	goto	l3880
  8665  002C62                     l3892:
  8666  002C62  503A               	movf	___awdiv@sign,w,c
  8667  002C64  B4D8               	btfsc	status,2,c
  8668  002C66  D004               	goto	l3896
  8669  002C68  6C3B               	negf	___awdiv@quotient,c
  8670  002C6A  1E3C               	comf	___awdiv@quotient+1,f,c
  8671  002C6C  B0D8               	btfsc	status,0,c
  8672  002C6E  2A3C               	incf	___awdiv@quotient+1,f,c
  8673  002C70                     l3896:
  8674  002C70  C03B  F035         	movff	___awdiv@quotient,?___awdiv
  8675  002C74  C03C  F036         	movff	___awdiv@quotient+1,?___awdiv+1
  8676  002C78  0012               	return	
  8677  002C7A                     __end_of___awdiv:
  8678                           	opt stack 0
  8679                           tblptru	equ	0xFF8
  8680                           tblptrh	equ	0xFF7
  8681                           tblptrl	equ	0xFF6
  8682                           tablat	equ	0xFF5
  8683                           intcon	equ	0xFF2
  8684                           intcon2	equ	0xFF1
  8685                           intcon3	equ	0xFF0
  8686                           postinc0	equ	0xFEE
  8687                           wreg	equ	0xFE8
  8688                           indf2	equ	0xFDF
  8689                           postinc2	equ	0xFDE
  8690                           postdec2	equ	0xFDD
  8691                           fsr2h	equ	0xFDA
  8692                           fsr2l	equ	0xFD9
  8693                           status	equ	0xFD8
  8694                           
  8695 ;; *************** function _standby_mode *****************
  8696 ;; Defined at:
  8697 ;;		line 609 in file "main.c"
  8698 ;; Parameters:    Size  Location     Type
  8699 ;;  time            2  126[BANK0 ] PTR unsigned char 
  8700 ;;		 -> time(7), 
  8701 ;; Auto vars:     Size  Location     Type
  8702 ;;		None
  8703 ;; Return value:  Size  Location     Type
  8704 ;;                  1    wreg      void 
  8705 ;; Registers used:
  8706 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8707 ;; Tracked objects:
  8708 ;;		On entry : 0/0
  8709 ;;		On exit  : 0/0
  8710 ;;		Unchanged: 0/0
  8711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8712 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8714 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8715 ;;      Totals:         0       2       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8716 ;;Total ram usage:        5 bytes
  8717 ;; Hardware stack levels used:    1
  8718 ;; Hardware stack levels required when called:    8
  8719 ;; This function calls:
  8720 ;;		_lcdInst
  8721 ;;		_printf
  8722 ;;		_update_time
  8723 ;; This function is called by:
  8724 ;;		_main
  8725 ;; This function uses a non-reentrant model
  8726 ;;
  8727                           
  8728                           	psect	text24
  8729  0027D4                     __ptext24:
  8730                           	opt stack 0
  8731  0027D4                     _standby_mode:
  8732                           	opt stack 22
  8733                           
  8734                           ;main.c: 610: update_time(time);
  8735                           
  8736                           ;incstack = 0
  8737  0027D4  C0FE  F038         	movff	standby_mode@time,update_time@time
  8738  0027D8  C0FF  F039         	movff	standby_mode@time+1,update_time@time+1
  8739  0027DC  EC7E  F016         	call	_update_time	;wreg free
  8740                           
  8741                           ;main.c: 611: (INTCONbits.GIE = 0);
  8742  0027E0  9EF2               	bcf	intcon,7,c	;volatile
  8743                           
  8744                           ;main.c: 612: printf("%02x/%02x/%02x MENU:", time[6],time[5],time[4]);
  8745  0027E2  0EBD               	movlw	low STR_39
  8746  0027E4  0100               	movlb	0	; () banked
  8747  0027E6  6FF6               	movwf	printf@f& (0+255),b
  8748  0027E8  0EFD               	movlw	high STR_39
  8749  0027EA  0100               	movlb	0	; () banked
  8750  0027EC  6FF7               	movwf	(printf@f+1)& (0+255),b
  8751  0027EE  0100               	movlb	0	; () banked
  8752  0027F0  EE20 F006          	lfsr	2,6
  8753  0027F4  51FE               	movf	standby_mode@time& (0+255),w,b
  8754  0027F6  26D9               	addwf	fsr2l,f,c
  8755  0027F8  51FF               	movf	(standby_mode@time+1)& (0+255),w,b
  8756  0027FA  22DA               	addwfc	fsr2h,f,c
  8757  0027FC  50DF               	movf	indf2,w,c
  8758  0027FE  0101               	movlb	1	; () banked
  8759  002800  6F43               	movwf	??_standby_mode& (0+255),b
  8760  002802  0101               	movlb	1	; () banked
  8761  002804  5143               	movf	??_standby_mode& (0+255),w,b
  8762  002806  0100               	movlb	0	; () banked
  8763  002808  6FF8               	movwf	(?_printf+2)& (0+255),b
  8764  00280A  6BF9               	clrf	(?_printf+3)& (0+255),b
  8765  00280C  0100               	movlb	0	; () banked
  8766  00280E  EE20 F005          	lfsr	2,5
  8767  002812  51FE               	movf	standby_mode@time& (0+255),w,b
  8768  002814  26D9               	addwf	fsr2l,f,c
  8769  002816  51FF               	movf	(standby_mode@time+1)& (0+255),w,b
  8770  002818  22DA               	addwfc	fsr2h,f,c
  8771  00281A  50DF               	movf	indf2,w,c
  8772  00281C  0101               	movlb	1	; () banked
  8773  00281E  6F44               	movwf	(??_standby_mode+1)& (0+255),b
  8774  002820  0101               	movlb	1	; () banked
  8775  002822  5144               	movf	(??_standby_mode+1)& (0+255),w,b
  8776  002824  0100               	movlb	0	; () banked
  8777  002826  6FFA               	movwf	(?_printf+4)& (0+255),b
  8778  002828  6BFB               	clrf	(?_printf+5)& (0+255),b
  8779  00282A  0100               	movlb	0	; () banked
  8780  00282C  EE20 F004          	lfsr	2,4
  8781  002830  51FE               	movf	standby_mode@time& (0+255),w,b
  8782  002832  26D9               	addwf	fsr2l,f,c
  8783  002834  51FF               	movf	(standby_mode@time+1)& (0+255),w,b
  8784  002836  22DA               	addwfc	fsr2h,f,c
  8785  002838  50DF               	movf	indf2,w,c
  8786  00283A  0101               	movlb	1	; () banked
  8787  00283C  6F45               	movwf	(??_standby_mode+2)& (0+255),b
  8788  00283E  0101               	movlb	1	; () banked
  8789  002840  5145               	movf	(??_standby_mode+2)& (0+255),w,b
  8790  002842  0100               	movlb	0	; () banked
  8791  002844  6FFC               	movwf	(?_printf+6)& (0+255),b
  8792  002846  6BFD               	clrf	(?_printf+7)& (0+255),b
  8793  002848  ECB5  F007         	call	_printf	;wreg free
  8794                           
  8795                           ;main.c: 613: lcdInst(0b11000000);;
  8796  00284C  0EC0               	movlw	192
  8797  00284E  ECCE  F01A         	call	_lcdInst
  8798                           
  8799                           ;main.c: 614: printf("%02x:%02x:%02x Press 0", time[2],time[1],time[0]);
  8800  002852  0EA6               	movlw	low STR_40
  8801  002854  0100               	movlb	0	; () banked
  8802  002856  6FF6               	movwf	printf@f& (0+255),b
  8803  002858  0EFD               	movlw	high STR_40
  8804  00285A  0100               	movlb	0	; () banked
  8805  00285C  6FF7               	movwf	(printf@f+1)& (0+255),b
  8806  00285E  0100               	movlb	0	; () banked
  8807  002860  EE20 F002          	lfsr	2,2
  8808  002864  51FE               	movf	standby_mode@time& (0+255),w,b
  8809  002866  26D9               	addwf	fsr2l,f,c
  8810  002868  51FF               	movf	(standby_mode@time+1)& (0+255),w,b
  8811  00286A  22DA               	addwfc	fsr2h,f,c
  8812  00286C  50DF               	movf	indf2,w,c
  8813  00286E  0101               	movlb	1	; () banked
  8814  002870  6F43               	movwf	??_standby_mode& (0+255),b
  8815  002872  0101               	movlb	1	; () banked
  8816  002874  5143               	movf	??_standby_mode& (0+255),w,b
  8817  002876  0100               	movlb	0	; () banked
  8818  002878  6FF8               	movwf	(?_printf+2)& (0+255),b
  8819  00287A  6BF9               	clrf	(?_printf+3)& (0+255),b
  8820  00287C  0100               	movlb	0	; () banked
  8821  00287E  EE20 F001          	lfsr	2,1
  8822  002882  51FE               	movf	standby_mode@time& (0+255),w,b
  8823  002884  26D9               	addwf	fsr2l,f,c
  8824  002886  51FF               	movf	(standby_mode@time+1)& (0+255),w,b
  8825  002888  22DA               	addwfc	fsr2h,f,c
  8826  00288A  50DF               	movf	indf2,w,c
  8827  00288C  0101               	movlb	1	; () banked
  8828  00288E  6F44               	movwf	(??_standby_mode+1)& (0+255),b
  8829  002890  0101               	movlb	1	; () banked
  8830  002892  5144               	movf	(??_standby_mode+1)& (0+255),w,b
  8831  002894  0100               	movlb	0	; () banked
  8832  002896  6FFA               	movwf	(?_printf+4)& (0+255),b
  8833  002898  6BFB               	clrf	(?_printf+5)& (0+255),b
  8834  00289A  C0FE  FFD9         	movff	standby_mode@time,fsr2l
  8835  00289E  C0FF  FFDA         	movff	standby_mode@time+1,fsr2h
  8836  0028A2  50DF               	movf	indf2,w,c
  8837  0028A4  0101               	movlb	1	; () banked
  8838  0028A6  6F45               	movwf	(??_standby_mode+2)& (0+255),b
  8839  0028A8  0101               	movlb	1	; () banked
  8840  0028AA  5145               	movf	(??_standby_mode+2)& (0+255),w,b
  8841  0028AC  0100               	movlb	0	; () banked
  8842  0028AE  6FFC               	movwf	(?_printf+6)& (0+255),b
  8843  0028B0  6BFD               	clrf	(?_printf+7)& (0+255),b
  8844  0028B2  ECB5  F007         	call	_printf	;wreg free
  8845                           
  8846                           ;main.c: 615: (INTCONbits.GIE = 1);
  8847  0028B6  8EF2               	bsf	intcon,7,c	;volatile
  8848  0028B8  0012               	return		;funcret
  8849  0028BA                     __end_of_standby_mode:
  8850                           	opt stack 0
  8851                           tblptru	equ	0xFF8
  8852                           tblptrh	equ	0xFF7
  8853                           tblptrl	equ	0xFF6
  8854                           tablat	equ	0xFF5
  8855                           intcon	equ	0xFF2
  8856                           intcon2	equ	0xFF1
  8857                           intcon3	equ	0xFF0
  8858                           postinc0	equ	0xFEE
  8859                           wreg	equ	0xFE8
  8860                           indf2	equ	0xFDF
  8861                           postinc2	equ	0xFDE
  8862                           postdec2	equ	0xFDD
  8863                           fsr2h	equ	0xFDA
  8864                           fsr2l	equ	0xFD9
  8865                           status	equ	0xFD8
  8866                           
  8867 ;; *************** function _update_time *****************
  8868 ;; Defined at:
  8869 ;;		line 620 in file "main.c"
  8870 ;; Parameters:    Size  Location     Type
  8871 ;;  time            2   55[COMRAM] PTR unsigned char 
  8872 ;;		 -> end_time(7), start_time(7), time(7), 
  8873 ;; Auto vars:     Size  Location     Type
  8874 ;;  i               1   57[COMRAM] unsigned char 
  8875 ;; Return value:  Size  Location     Type
  8876 ;;                  1    wreg      void 
  8877 ;; Registers used:
  8878 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8879 ;; Tracked objects:
  8880 ;;		On entry : 0/0
  8881 ;;		On exit  : 0/0
  8882 ;;		Unchanged: 0/0
  8883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8884 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8885 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8887 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8888 ;;Total ram usage:        3 bytes
  8889 ;; Hardware stack levels used:    1
  8890 ;; Hardware stack levels required when called:    7
  8891 ;; This function calls:
  8892 ;;		_I2C_Master_Read
  8893 ;;		_I2C_Master_Start
  8894 ;;		_I2C_Master_Stop
  8895 ;;		_I2C_Master_Write
  8896 ;; This function is called by:
  8897 ;;		_main
  8898 ;;		_standby_mode
  8899 ;; This function uses a non-reentrant model
  8900 ;;
  8901                           
  8902                           	psect	text25
  8903  002CFC                     __ptext25:
  8904                           	opt stack 0
  8905  002CFC                     _update_time:
  8906                           	opt stack 23
  8907                           
  8908                           ;main.c: 622: I2C_Master_Start();
  8909                           
  8910                           ;incstack = 0
  8911  002CFC  ECEE  F01A         	call	_I2C_Master_Start	;wreg free
  8912                           
  8913                           ;main.c: 623: I2C_Master_Write(0b11010000);
  8914  002D00  0E00               	movlw	0
  8915  002D02  6E37               	movwf	I2C_Master_Write@d+1,c
  8916  002D04  0ED0               	movlw	208
  8917  002D06  6E36               	movwf	I2C_Master_Write@d,c
  8918  002D08  ECE0  F01A         	call	_I2C_Master_Write	;wreg free
  8919                           
  8920                           ;main.c: 624: I2C_Master_Write(0x00);
  8921  002D0C  0E00               	movlw	0
  8922  002D0E  6E37               	movwf	I2C_Master_Write@d+1,c
  8923  002D10  0E00               	movlw	0
  8924  002D12  6E36               	movwf	I2C_Master_Write@d,c
  8925  002D14  ECE0  F01A         	call	_I2C_Master_Write	;wreg free
  8926                           
  8927                           ;main.c: 625: I2C_Master_Stop();
  8928  002D18  ECEA  F01A         	call	_I2C_Master_Stop	;wreg free
  8929                           
  8930                           ;main.c: 628: I2C_Master_Start();
  8931  002D1C  ECEE  F01A         	call	_I2C_Master_Start	;wreg free
  8932                           
  8933                           ;main.c: 629: I2C_Master_Write(0b11010001);
  8934  002D20  0E00               	movlw	0
  8935  002D22  6E37               	movwf	I2C_Master_Write@d+1,c
  8936  002D24  0ED1               	movlw	209
  8937  002D26  6E36               	movwf	I2C_Master_Write@d,c
  8938  002D28  ECE0  F01A         	call	_I2C_Master_Write	;wreg free
  8939                           
  8940                           ;main.c: 630: for(unsigned char i=0;i<0x06;i++){
  8941  002D2C  0E00               	movlw	0
  8942  002D2E  6E3A               	movwf	update_time@i,c
  8943  002D30                     l4010:
  8944  002D30  0E05               	movlw	5
  8945  002D32  643A               	cpfsgt	update_time@i,c
  8946  002D34  D001               	goto	l4014
  8947  002D36  D00E               	goto	l4020
  8948  002D38                     l4014:
  8949                           
  8950                           ;main.c: 631: time[i] = I2C_Master_Read(1);
  8951  002D38  503A               	movf	update_time@i,w,c
  8952  002D3A  0D01               	mullw	1
  8953  002D3C  50F3               	movf	prodl,w,c
  8954  002D3E  2438               	addwf	update_time@time,w,c
  8955  002D40  6ED9               	movwf	fsr2l,c
  8956  002D42  50F4               	movf	prodh,w,c
  8957  002D44  2039               	addwfc	update_time@time+1,w,c
  8958  002D46  6EDA               	movwf	fsr2h,c
  8959  002D48  0E01               	movlw	1
  8960  002D4A  ECF6  F019         	call	_I2C_Master_Read
  8961  002D4E  6EDF               	movwf	indf2,c
  8962  002D50  2A3A               	incf	update_time@i,f,c
  8963  002D52  D7EE               	goto	l4010
  8964  002D54                     l4020:
  8965                           
  8966                           ;main.c: 632: }
  8967                           ;main.c: 633: time[6] = I2C_Master_Read(0);
  8968  002D54  EE20 F006          	lfsr	2,6
  8969  002D58  5038               	movf	update_time@time,w,c
  8970  002D5A  26D9               	addwf	fsr2l,f,c
  8971  002D5C  5039               	movf	update_time@time+1,w,c
  8972  002D5E  22DA               	addwfc	fsr2h,f,c
  8973  002D60  0E00               	movlw	0
  8974  002D62  ECF6  F019         	call	_I2C_Master_Read
  8975  002D66  6EDF               	movwf	indf2,c
  8976                           
  8977                           ;main.c: 634: I2C_Master_Stop();
  8978  002D68  ECEA  F01A         	call	_I2C_Master_Stop	;wreg free
  8979  002D6C  0012               	return		;funcret
  8980  002D6E                     __end_of_update_time:
  8981                           	opt stack 0
  8982                           tblptru	equ	0xFF8
  8983                           tblptrh	equ	0xFF7
  8984                           tblptrl	equ	0xFF6
  8985                           tablat	equ	0xFF5
  8986                           prodh	equ	0xFF4
  8987                           prodl	equ	0xFF3
  8988                           intcon	equ	0xFF2
  8989                           intcon2	equ	0xFF1
  8990                           intcon3	equ	0xFF0
  8991                           postinc0	equ	0xFEE
  8992                           wreg	equ	0xFE8
  8993                           indf2	equ	0xFDF
  8994                           postinc2	equ	0xFDE
  8995                           postdec2	equ	0xFDD
  8996                           fsr2h	equ	0xFDA
  8997                           fsr2l	equ	0xFD9
  8998                           status	equ	0xFD8
  8999                           
  9000 ;; *************** function _I2C_Master_Write *****************
  9001 ;; Defined at:
  9002 ;;		line 47 in file "I2C.c"
  9003 ;; Parameters:    Size  Location     Type
  9004 ;;  d               2   53[COMRAM] unsigned int 
  9005 ;; Auto vars:     Size  Location     Type
  9006 ;;		None
  9007 ;; Return value:  Size  Location     Type
  9008 ;;                  1    wreg      void 
  9009 ;; Registers used:
  9010 ;;		wreg, status,2, status,0, cstack
  9011 ;; Tracked objects:
  9012 ;;		On entry : 0/0
  9013 ;;		On exit  : 0/0
  9014 ;;		Unchanged: 0/0
  9015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9016 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9019 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9020 ;;Total ram usage:        2 bytes
  9021 ;; Hardware stack levels used:    1
  9022 ;; Hardware stack levels required when called:    6
  9023 ;; This function calls:
  9024 ;;		_I2C_Master_Wait
  9025 ;; This function is called by:
  9026 ;;		_update_time
  9027 ;;		_set_time
  9028 ;; This function uses a non-reentrant model
  9029 ;;
  9030                           
  9031                           	psect	text26
  9032  0035C0                     __ptext26:
  9033                           	opt stack 0
  9034  0035C0                     _I2C_Master_Write:
  9035                           	opt stack 23
  9036                           
  9037                           ;I2C.c: 49: I2C_Master_Wait();
  9038                           
  9039                           ;incstack = 0
  9040  0035C0  ECB6  F01A         	call	_I2C_Master_Wait	;wreg free
  9041                           
  9042                           ;I2C.c: 50: SSPBUF = d;
  9043  0035C4  C036  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  9044  0035C8  0012               	return		;funcret
  9045  0035CA                     __end_of_I2C_Master_Write:
  9046                           	opt stack 0
  9047                           tblptru	equ	0xFF8
  9048                           tblptrh	equ	0xFF7
  9049                           tblptrl	equ	0xFF6
  9050                           tablat	equ	0xFF5
  9051                           prodh	equ	0xFF4
  9052                           prodl	equ	0xFF3
  9053                           intcon	equ	0xFF2
  9054                           intcon2	equ	0xFF1
  9055                           intcon3	equ	0xFF0
  9056                           postinc0	equ	0xFEE
  9057                           wreg	equ	0xFE8
  9058                           indf2	equ	0xFDF
  9059                           postinc2	equ	0xFDE
  9060                           postdec2	equ	0xFDD
  9061                           fsr2h	equ	0xFDA
  9062                           fsr2l	equ	0xFD9
  9063                           status	equ	0xFD8
  9064                           
  9065 ;; *************** function _I2C_Master_Stop *****************
  9066 ;; Defined at:
  9067 ;;		line 41 in file "I2C.c"
  9068 ;; Parameters:    Size  Location     Type
  9069 ;;		None
  9070 ;; Auto vars:     Size  Location     Type
  9071 ;;		None
  9072 ;; Return value:  Size  Location     Type
  9073 ;;                  1    wreg      void 
  9074 ;; Registers used:
  9075 ;;		wreg, status,2, status,0, cstack
  9076 ;; Tracked objects:
  9077 ;;		On entry : 0/0
  9078 ;;		On exit  : 0/0
  9079 ;;		Unchanged: 0/0
  9080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9084 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9085 ;;Total ram usage:        0 bytes
  9086 ;; Hardware stack levels used:    1
  9087 ;; Hardware stack levels required when called:    6
  9088 ;; This function calls:
  9089 ;;		_I2C_Master_Wait
  9090 ;; This function is called by:
  9091 ;;		_update_time
  9092 ;;		_set_time
  9093 ;; This function uses a non-reentrant model
  9094 ;;
  9095                           
  9096                           	psect	text27
  9097  0035D4                     __ptext27:
  9098                           	opt stack 0
  9099  0035D4                     _I2C_Master_Stop:
  9100                           	opt stack 23
  9101                           
  9102                           ;I2C.c: 43: I2C_Master_Wait();
  9103                           
  9104                           ;incstack = 0
  9105  0035D4  ECB6  F01A         	call	_I2C_Master_Wait	;wreg free
  9106                           
  9107                           ;I2C.c: 44: PEN = 1;
  9108  0035D8  84C5               	bsf	4037,2,c	;volatile
  9109  0035DA  0012               	return		;funcret
  9110  0035DC                     __end_of_I2C_Master_Stop:
  9111                           	opt stack 0
  9112                           tblptru	equ	0xFF8
  9113                           tblptrh	equ	0xFF7
  9114                           tblptrl	equ	0xFF6
  9115                           tablat	equ	0xFF5
  9116                           prodh	equ	0xFF4
  9117                           prodl	equ	0xFF3
  9118                           intcon	equ	0xFF2
  9119                           intcon2	equ	0xFF1
  9120                           intcon3	equ	0xFF0
  9121                           postinc0	equ	0xFEE
  9122                           wreg	equ	0xFE8
  9123                           indf2	equ	0xFDF
  9124                           postinc2	equ	0xFDE
  9125                           postdec2	equ	0xFDD
  9126                           fsr2h	equ	0xFDA
  9127                           fsr2l	equ	0xFD9
  9128                           status	equ	0xFD8
  9129                           
  9130 ;; *************** function _I2C_Master_Start *****************
  9131 ;; Defined at:
  9132 ;;		line 29 in file "I2C.c"
  9133 ;; Parameters:    Size  Location     Type
  9134 ;;		None
  9135 ;; Auto vars:     Size  Location     Type
  9136 ;;		None
  9137 ;; Return value:  Size  Location     Type
  9138 ;;                  1    wreg      void 
  9139 ;; Registers used:
  9140 ;;		wreg, status,2, status,0, cstack
  9141 ;; Tracked objects:
  9142 ;;		On entry : 0/0
  9143 ;;		On exit  : 0/0
  9144 ;;		Unchanged: 0/0
  9145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9149 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9150 ;;Total ram usage:        0 bytes
  9151 ;; Hardware stack levels used:    1
  9152 ;; Hardware stack levels required when called:    6
  9153 ;; This function calls:
  9154 ;;		_I2C_Master_Wait
  9155 ;; This function is called by:
  9156 ;;		_update_time
  9157 ;;		_set_time
  9158 ;; This function uses a non-reentrant model
  9159 ;;
  9160                           
  9161                           	psect	text28
  9162  0035DC                     __ptext28:
  9163                           	opt stack 0
  9164  0035DC                     _I2C_Master_Start:
  9165                           	opt stack 23
  9166                           
  9167                           ;I2C.c: 31: I2C_Master_Wait();
  9168                           
  9169                           ;incstack = 0
  9170  0035DC  ECB6  F01A         	call	_I2C_Master_Wait	;wreg free
  9171                           
  9172                           ;I2C.c: 32: SEN = 1;
  9173  0035E0  80C5               	bsf	4037,0,c	;volatile
  9174  0035E2  0012               	return		;funcret
  9175  0035E4                     __end_of_I2C_Master_Start:
  9176                           	opt stack 0
  9177                           tblptru	equ	0xFF8
  9178                           tblptrh	equ	0xFF7
  9179                           tblptrl	equ	0xFF6
  9180                           tablat	equ	0xFF5
  9181                           prodh	equ	0xFF4
  9182                           prodl	equ	0xFF3
  9183                           intcon	equ	0xFF2
  9184                           intcon2	equ	0xFF1
  9185                           intcon3	equ	0xFF0
  9186                           postinc0	equ	0xFEE
  9187                           wreg	equ	0xFE8
  9188                           indf2	equ	0xFDF
  9189                           postinc2	equ	0xFDE
  9190                           postdec2	equ	0xFDD
  9191                           fsr2h	equ	0xFDA
  9192                           fsr2l	equ	0xFD9
  9193                           status	equ	0xFD8
  9194                           
  9195 ;; *************** function _I2C_Master_Read *****************
  9196 ;; Defined at:
  9197 ;;		line 53 in file "I2C.c"
  9198 ;; Parameters:    Size  Location     Type
  9199 ;;  a               1    wreg     unsigned char 
  9200 ;; Auto vars:     Size  Location     Type
  9201 ;;  a               1   53[COMRAM] unsigned char 
  9202 ;;  temp            1   54[COMRAM] unsigned char 
  9203 ;; Return value:  Size  Location     Type
  9204 ;;                  1    wreg      unsigned char 
  9205 ;; Registers used:
  9206 ;;		wreg, status,2, status,0, cstack
  9207 ;; Tracked objects:
  9208 ;;		On entry : 0/0
  9209 ;;		On exit  : 0/0
  9210 ;;		Unchanged: 0/0
  9211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9213 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9215 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9216 ;;Total ram usage:        2 bytes
  9217 ;; Hardware stack levels used:    1
  9218 ;; Hardware stack levels required when called:    6
  9219 ;; This function calls:
  9220 ;;		_I2C_Master_Wait
  9221 ;; This function is called by:
  9222 ;;		_update_time
  9223 ;; This function uses a non-reentrant model
  9224 ;;
  9225                           
  9226                           	psect	text29
  9227  0033EC                     __ptext29:
  9228                           	opt stack 0
  9229  0033EC                     _I2C_Master_Read:
  9230                           	opt stack 23
  9231                           
  9232                           ;incstack = 0
  9233                           ;I2C_Master_Read@a stored from wreg
  9234  0033EC  6E36               	movwf	I2C_Master_Read@a,c
  9235                           
  9236                           ;I2C.c: 55: unsigned char temp;
  9237                           ;I2C.c: 56: I2C_Master_Wait();
  9238  0033EE  ECB6  F01A         	call	_I2C_Master_Wait	;wreg free
  9239                           
  9240                           ;I2C.c: 57: RCEN = 1;
  9241  0033F2  86C5               	bsf	4037,3,c	;volatile
  9242                           
  9243                           ;I2C.c: 58: I2C_Master_Wait();
  9244  0033F4  ECB6  F01A         	call	_I2C_Master_Wait	;wreg free
  9245                           
  9246                           ;I2C.c: 59: temp = SSPBUF;
  9247  0033F8  CFC9 F037          	movff	4041,I2C_Master_Read@temp	;volatile
  9248                           
  9249                           ;I2C.c: 60: I2C_Master_Wait();
  9250  0033FC  ECB6  F01A         	call	_I2C_Master_Wait	;wreg free
  9251                           
  9252                           ;I2C.c: 61: ACKDT = (a)?0:1;
  9253  003400  5036               	movf	I2C_Master_Read@a,w,c
  9254  003402  A4D8               	btfss	status,2,c
  9255  003404  D002               	goto	u3710
  9256  003406  8AC5               	bsf	4037,5,c	;volatile
  9257  003408  D001               	goto	l3798
  9258  00340A                     u3710:
  9259  00340A  9AC5               	bcf	4037,5,c	;volatile
  9260  00340C                     l3798:
  9261                           
  9262                           ;I2C.c: 62: ACKEN = 1;
  9263  00340C  88C5               	bsf	4037,4,c	;volatile
  9264                           
  9265                           ;I2C.c: 63: return temp;
  9266  00340E  5037               	movf	I2C_Master_Read@temp,w,c
  9267  003410  0012               	return	
  9268  003412                     __end_of_I2C_Master_Read:
  9269                           	opt stack 0
  9270                           tblptru	equ	0xFF8
  9271                           tblptrh	equ	0xFF7
  9272                           tblptrl	equ	0xFF6
  9273                           tablat	equ	0xFF5
  9274                           prodh	equ	0xFF4
  9275                           prodl	equ	0xFF3
  9276                           intcon	equ	0xFF2
  9277                           intcon2	equ	0xFF1
  9278                           intcon3	equ	0xFF0
  9279                           postinc0	equ	0xFEE
  9280                           wreg	equ	0xFE8
  9281                           indf2	equ	0xFDF
  9282                           postinc2	equ	0xFDE
  9283                           postdec2	equ	0xFDD
  9284                           fsr2h	equ	0xFDA
  9285                           fsr2l	equ	0xFD9
  9286                           status	equ	0xFD8
  9287                           
  9288 ;; *************** function _I2C_Master_Wait *****************
  9289 ;; Defined at:
  9290 ;;		line 24 in file "I2C.c"
  9291 ;; Parameters:    Size  Location     Type
  9292 ;;		None
  9293 ;; Auto vars:     Size  Location     Type
  9294 ;;		None
  9295 ;; Return value:  Size  Location     Type
  9296 ;;                  1    wreg      void 
  9297 ;; Registers used:
  9298 ;;		wreg, status,2, status,0
  9299 ;; Tracked objects:
  9300 ;;		On entry : 0/0
  9301 ;;		On exit  : 0/0
  9302 ;;		Unchanged: 0/0
  9303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9306 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9307 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9308 ;;Total ram usage:        1 bytes
  9309 ;; Hardware stack levels used:    1
  9310 ;; Hardware stack levels required when called:    5
  9311 ;; This function calls:
  9312 ;;		Nothing
  9313 ;; This function is called by:
  9314 ;;		_I2C_Master_Start
  9315 ;;		_I2C_Master_Stop
  9316 ;;		_I2C_Master_Write
  9317 ;;		_I2C_Master_Read
  9318 ;;		_I2C_Master_RepeatedStart
  9319 ;; This function uses a non-reentrant model
  9320 ;;
  9321                           
  9322                           	psect	text30
  9323  00356C                     __ptext30:
  9324                           	opt stack 0
  9325  00356C                     _I2C_Master_Wait:
  9326                           	opt stack 23
  9327  00356C                     l56:
  9328  00356C  B4C7               	btfsc	4039,2,c	;volatile
  9329  00356E  D7FE               	goto	l56
  9330  003570  CFC5 F035          	movff	4037,??_I2C_Master_Wait	;volatile
  9331  003574  0E1F               	movlw	31
  9332  003576  1635               	andwf	??_I2C_Master_Wait,f,c
  9333  003578  B4D8               	btfsc	status,2,c
  9334  00357A  0012               	return	
  9335  00357C  D7F7               	goto	l56
  9336  00357E                     __end_of_I2C_Master_Wait:
  9337                           	opt stack 0
  9338                           tblptru	equ	0xFF8
  9339                           tblptrh	equ	0xFF7
  9340                           tblptrl	equ	0xFF6
  9341                           tablat	equ	0xFF5
  9342                           prodh	equ	0xFF4
  9343                           prodl	equ	0xFF3
  9344                           intcon	equ	0xFF2
  9345                           intcon2	equ	0xFF1
  9346                           intcon3	equ	0xFF0
  9347                           postinc0	equ	0xFEE
  9348                           wreg	equ	0xFE8
  9349                           indf2	equ	0xFDF
  9350                           postinc2	equ	0xFDE
  9351                           postdec2	equ	0xFDD
  9352                           fsr2h	equ	0xFDA
  9353                           fsr2l	equ	0xFD9
  9354                           status	equ	0xFD8
  9355                           
  9356 ;; *************** function _read_eeprom *****************
  9357 ;; Defined at:
  9358 ;;		line 801 in file "main.c"
  9359 ;; Parameters:    Size  Location     Type
  9360 ;;  address         2   52[COMRAM] unsigned int 
  9361 ;; Auto vars:     Size  Location     Type
  9362 ;;		None
  9363 ;; Return value:  Size  Location     Type
  9364 ;;                  1    wreg      unsigned char 
  9365 ;; Registers used:
  9366 ;;		wreg, status,2
  9367 ;; Tracked objects:
  9368 ;;		On entry : 0/0
  9369 ;;		On exit  : 0/0
  9370 ;;		Unchanged: 0/0
  9371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9372 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9375 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9376 ;;Total ram usage:        2 bytes
  9377 ;; Hardware stack levels used:    1
  9378 ;; Hardware stack levels required when called:    5
  9379 ;; This function calls:
  9380 ;;		Nothing
  9381 ;; This function is called by:
  9382 ;;		_main
  9383 ;; This function uses a non-reentrant model
  9384 ;;
  9385                           
  9386                           	psect	text31
  9387  003556                     __ptext31:
  9388                           	opt stack 0
  9389  003556                     _read_eeprom:
  9390                           	opt stack 25
  9391                           
  9392                           ;main.c: 805: EEADRH = (uint8_t)(address >> 8);
  9393                           
  9394                           ;incstack = 0
  9395  003556  5036               	movf	read_eeprom@address+1,w,c
  9396  003558  6EAA               	movwf	4010,c	;volatile
  9397                           
  9398                           ;main.c: 806: EEADR = (uint8_t)address;
  9399  00355A  C035  FFA9         	movff	read_eeprom@address,4009	;volatile
  9400                           
  9401                           ;main.c: 808: EECON1bits.EEPGD = 0;
  9402  00355E  9EA6               	bcf	4006,7,c	;volatile
  9403                           
  9404                           ;main.c: 809: EECON1bits.CFGS = 0;
  9405  003560  9CA6               	bcf	4006,6,c	;volatile
  9406                           
  9407                           ;main.c: 810: EECON1bits.RD = 1;
  9408  003562  80A6               	bsf	4006,0,c	;volatile
  9409  003564                     l481:
  9410  003564  B0A6               	btfsc	4006,0,c	;volatile
  9411  003566  D7FE               	goto	l481
  9412                           
  9413                           ;main.c: 816: return EEDATA;
  9414  003568  50A8               	movf	4008,w,c	;volatile
  9415  00356A  0012               	return	
  9416  00356C                     __end_of_read_eeprom:
  9417                           	opt stack 0
  9418                           tblptru	equ	0xFF8
  9419                           tblptrh	equ	0xFF7
  9420                           tblptrl	equ	0xFF6
  9421                           tablat	equ	0xFF5
  9422                           prodh	equ	0xFF4
  9423                           prodl	equ	0xFF3
  9424                           intcon	equ	0xFF2
  9425                           intcon2	equ	0xFF1
  9426                           intcon3	equ	0xFF0
  9427                           postinc0	equ	0xFEE
  9428                           wreg	equ	0xFE8
  9429                           indf2	equ	0xFDF
  9430                           postinc2	equ	0xFDE
  9431                           postdec2	equ	0xFDD
  9432                           fsr2h	equ	0xFDA
  9433                           fsr2l	equ	0xFD9
  9434                           status	equ	0xFD8
  9435                           
  9436 ;; *************** function _readADC *****************
  9437 ;; Defined at:
  9438 ;;		line 712 in file "main.c"
  9439 ;; Parameters:    Size  Location     Type
  9440 ;;  channel         1    wreg     unsigned char 
  9441 ;; Auto vars:     Size  Location     Type
  9442 ;;  channel         1   53[COMRAM] unsigned char 
  9443 ;; Return value:  Size  Location     Type
  9444 ;;                  1    wreg      void 
  9445 ;; Registers used:
  9446 ;;		wreg, status,2, status,0, cstack
  9447 ;; Tracked objects:
  9448 ;;		On entry : 0/0
  9449 ;;		On exit  : 0/0
  9450 ;;		Unchanged: 0/0
  9451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9453 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9454 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9455 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9456 ;;Total ram usage:        2 bytes
  9457 ;; Hardware stack levels used:    1
  9458 ;; Hardware stack levels required when called:    5
  9459 ;; This function calls:
  9460 ;;		Nothing
  9461 ;; This function is called by:
  9462 ;;		_main
  9463 ;; This function uses a non-reentrant model
  9464 ;;
  9465                           
  9466                           	psect	text32
  9467  0034A8                     __ptext32:
  9468                           	opt stack 0
  9469  0034A8                     _readADC:
  9470                           	opt stack 25
  9471                           
  9472                           ;incstack = 0
  9473                           ;readADC@channel stored from wreg
  9474  0034A8  6E36               	movwf	readADC@channel,c
  9475                           
  9476                           ;main.c: 714: ADCON0 = ((channel <<2));
  9477  0034AA  4436               	rlncf	readADC@channel,w,c
  9478  0034AC  46E8               	rlncf	wreg,f,c
  9479  0034AE  0BFC               	andlw	252
  9480  0034B0  6EC2               	movwf	4034,c	;volatile
  9481                           
  9482                           ;main.c: 715: ADON = 1;
  9483  0034B2  80C2               	bsf	4034,0,c	;volatile
  9484                           
  9485                           ;main.c: 716: ADCON0bits.GO = 1;
  9486  0034B4  82C2               	bsf	4034,1,c	;volatile
  9487                           
  9488                           ;main.c: 717: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(8000000/4000.0))
      +                          );}
  9489  0034B6  D007               	goto	l4526
  9490  0034B8                     l4524:
  9491  0034B8  0E0D               	movlw	13
  9492  0034BA  6E35               	movwf	??_readADC& (0+255),c
  9493  0034BC  0EFC               	movlw	252
  9494  0034BE                     u7417:
  9495  0034BE  2EE8               	decfsz	wreg,f,c
  9496  0034C0  D7FE               	bra	u7417
  9497  0034C2  2E35               	decfsz	??_readADC& (0+255),f,c
  9498  0034C4  D7FC               	bra	u7417
  9499  0034C6                     l4526:
  9500  0034C6  A2C2               	btfss	4034,1,c	;volatile
  9501  0034C8  0012               	return	
  9502  0034CA  D7F6               	goto	l4524
  9503  0034CC                     __end_of_readADC:
  9504                           	opt stack 0
  9505                           tblptru	equ	0xFF8
  9506                           tblptrh	equ	0xFF7
  9507                           tblptrl	equ	0xFF6
  9508                           tablat	equ	0xFF5
  9509                           prodh	equ	0xFF4
  9510                           prodl	equ	0xFF3
  9511                           intcon	equ	0xFF2
  9512                           intcon2	equ	0xFF1
  9513                           intcon3	equ	0xFF0
  9514                           postinc0	equ	0xFEE
  9515                           wreg	equ	0xFE8
  9516                           indf2	equ	0xFDF
  9517                           postinc2	equ	0xFDE
  9518                           postdec2	equ	0xFDD
  9519                           fsr2h	equ	0xFDA
  9520                           fsr2l	equ	0xFD9
  9521                           status	equ	0xFD8
  9522                           
  9523 ;; *************** function _print *****************
  9524 ;; Defined at:
  9525 ;;		line 699 in file "main.c"
  9526 ;; Parameters:    Size  Location     Type
  9527 ;;  line1           2   18[BANK1 ] PTR unsigned char 
  9528 ;;		 -> STR_42(17), STR_33(17), STR_31(17), STR_29(17), 
  9529 ;;		 -> STR_27(17), STR_25(17), STR_23(17), STR_21(17), 
  9530 ;;		 -> STR_19(17), STR_13(17), STR_7(17), STR_5(19), 
  9531 ;;		 -> STR_3(16), STR_1(17), 
  9532 ;;  line2           2   20[BANK1 ] PTR unsigned char 
  9533 ;;		 -> STR_43(17), STR_34(17), STR_32(17), STR_30(17), 
  9534 ;;		 -> STR_28(17), STR_26(17), STR_24(17), STR_22(17), 
  9535 ;;		 -> STR_20(20), STR_14(18), STR_8(17), STR_6(19), 
  9536 ;;		 -> STR_4(17), STR_2(17), 
  9537 ;; Auto vars:     Size  Location     Type
  9538 ;;		None
  9539 ;; Return value:  Size  Location     Type
  9540 ;;                  1    wreg      void 
  9541 ;; Registers used:
  9542 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9543 ;; Tracked objects:
  9544 ;;		On entry : 0/0
  9545 ;;		On exit  : 0/0
  9546 ;;		Unchanged: 0/0
  9547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9548 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9551 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9552 ;;Total ram usage:        4 bytes
  9553 ;; Hardware stack levels used:    1
  9554 ;; Hardware stack levels required when called:    8
  9555 ;; This function calls:
  9556 ;;		_lcdInst
  9557 ;;		_printf
  9558 ;; This function is called by:
  9559 ;;		_main
  9560 ;; This function uses a non-reentrant model
  9561 ;;
  9562                           
  9563                           	psect	text33
  9564  003176                     __ptext33:
  9565                           	opt stack 0
  9566  003176                     _print:
  9567                           	opt stack 22
  9568                           
  9569                           ;main.c: 700: if (line2 == ""){
  9570                           
  9571                           ;incstack = 0
  9572  003176  0E56               	movlw	low (STR_14+17)
  9573  003178  0101               	movlb	1	; () banked
  9574  00317A  1945               	xorwf	print@line2& (0+255),w,b
  9575  00317C  E10C               	bnz	l4456
  9576  00317E  0EFE               	movlw	high (STR_14+17)
  9577  003180  0101               	movlb	1	; () banked
  9578  003182  1946               	xorwf	(print@line2+1)& (0+255),w,b
  9579  003184  A4D8               	btfss	status,2,c
  9580  003186  D007               	goto	l4456
  9581                           
  9582                           ; BSR set to: 1
  9583                           ;main.c: 701: printf(line1);
  9584  003188  C143  F0F6         	movff	print@line1,printf@f
  9585  00318C  C144  F0F7         	movff	print@line1+1,printf@f+1
  9586  003190  ECB5  F007         	call	_printf	;wreg free
  9587                           
  9588                           ;main.c: 702: }
  9589  003194  0012               	return	
  9590  003196                     l4456:
  9591                           
  9592                           ;main.c: 703: else{
  9593                           ;main.c: 704: printf(line1);
  9594  003196  C143  F0F6         	movff	print@line1,printf@f
  9595  00319A  C144  F0F7         	movff	print@line1+1,printf@f+1
  9596  00319E  ECB5  F007         	call	_printf	;wreg free
  9597                           
  9598                           ;main.c: 705: lcdInst(0b11000000);;
  9599  0031A2  0EC0               	movlw	192
  9600  0031A4  ECCE  F01A         	call	_lcdInst
  9601                           
  9602                           ;main.c: 706: printf(line2);
  9603  0031A8  C145  F0F6         	movff	print@line2,printf@f
  9604  0031AC  C146  F0F7         	movff	print@line2+1,printf@f+1
  9605  0031B0  ECB5  F007         	call	_printf	;wreg free
  9606  0031B4  0012               	return	
  9607  0031B6                     __end_of_print:
  9608                           	opt stack 0
  9609                           tblptru	equ	0xFF8
  9610                           tblptrh	equ	0xFF7
  9611                           tblptrl	equ	0xFF6
  9612                           tablat	equ	0xFF5
  9613                           prodh	equ	0xFF4
  9614                           prodl	equ	0xFF3
  9615                           intcon	equ	0xFF2
  9616                           intcon2	equ	0xFF1
  9617                           intcon3	equ	0xFF0
  9618                           postinc0	equ	0xFEE
  9619                           wreg	equ	0xFE8
  9620                           indf2	equ	0xFDF
  9621                           postinc2	equ	0xFDE
  9622                           postdec2	equ	0xFDD
  9623                           fsr2h	equ	0xFDA
  9624                           fsr2l	equ	0xFD9
  9625                           status	equ	0xFD8
  9626                           
  9627 ;; *************** function _printf *****************
  9628 ;; Defined at:
  9629 ;;		line 464 in file "/Applications/microchip/xc8/v1.41/sources/common/doprnt.c"
  9630 ;; Parameters:    Size  Location     Type
  9631 ;;  f               2  118[BANK0 ] PTR const unsigned char 
  9632 ;;		 -> STR_43(17), STR_42(17), STR_40(23), STR_39(21), 
  9633 ;;		 -> STR_38(17), STR_37(17), STR_36(19), STR_35(19), 
  9634 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
  9635 ;;		 -> STR_30(17), STR_29(17), STR_28(17), STR_27(17), 
  9636 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(17), 
  9637 ;;		 -> STR_22(17), STR_21(17), STR_20(20), STR_19(17), 
  9638 ;;		 -> STR_18(19), STR_17(19), STR_16(19), STR_15(19), 
  9639 ;;		 -> STR_14(18), STR_13(17), STR_12(19), STR_11(19), 
  9640 ;;		 -> STR_10(19), STR_9(19), STR_8(17), STR_7(17), 
  9641 ;;		 -> STR_6(19), STR_5(19), STR_4(17), STR_3(16), 
  9642 ;;		 -> STR_2(17), STR_1(17), 
  9643 ;; Auto vars:     Size  Location     Type
  9644 ;;  idx             1    6[BANK1 ] unsigned char 
  9645 ;;  tmpval          4    0        struct .
  9646 ;;  width           2   15[BANK1 ] int 
  9647 ;;  val             2   12[BANK1 ] unsigned int 
  9648 ;;  len             2    9[BANK1 ] unsigned int 
  9649 ;;  ap              2    7[BANK1 ] PTR void [1]
  9650 ;;		 -> ?i2_printf(2), ?_printf(2), 
  9651 ;;  cp              2    4[BANK1 ] PTR const unsigned char 
  9652 ;;		 -> printf@c(1), 
  9653 ;;  c               1   17[BANK1 ] char 
  9654 ;;  flag            1   14[BANK1 ] unsigned char 
  9655 ;;  prec            1   11[BANK1 ] char 
  9656 ;; Return value:  Size  Location     Type
  9657 ;;                  2  118[BANK0 ] int 
  9658 ;; Registers used:
  9659 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9660 ;; Tracked objects:
  9661 ;;		On entry : 0/0
  9662 ;;		On exit  : 0/0
  9663 ;;		Unchanged: 0/0
  9664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9665 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9666 ;;      Locals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9667 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9668 ;;      Totals:         0       8      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9669 ;;Total ram usage:       26 bytes
  9670 ;; Hardware stack levels used:    1
  9671 ;; Hardware stack levels required when called:    7
  9672 ;; This function calls:
  9673 ;;		___lwdiv
  9674 ;;		___lwmod
  9675 ;;		___wmul
  9676 ;;		_isdigit
  9677 ;;		_putch
  9678 ;; This function is called by:
  9679 ;;		_main
  9680 ;;		_standby_mode
  9681 ;;		_print
  9682 ;; This function uses a non-reentrant model
  9683 ;;
  9684                           
  9685                           	psect	text34
  9686  000F6A                     __ptext34:
  9687                           	opt stack 0
  9688  000F6A                     _printf:
  9689                           	opt stack 22
  9690                           
  9691                           ;doprnt.c: 466: va_list ap;
  9692                           ;doprnt.c: 499: signed char c;
  9693                           ;doprnt.c: 501: int width;
  9694                           ;doprnt.c: 506: signed char prec;
  9695                           ;doprnt.c: 508: unsigned char flag;
  9696                           ;doprnt.c: 523: union {
  9697                           ;doprnt.c: 524: unsigned long vd;
  9698                           ;doprnt.c: 525: double integ;
  9699                           ;doprnt.c: 526: } tmpval;
  9700                           ;doprnt.c: 528: unsigned int val;
  9701                           ;doprnt.c: 529: unsigned len;
  9702                           ;doprnt.c: 530: const char * cp;
  9703                           ;doprnt.c: 533: *ap = __va_start();
  9704                           
  9705                           ;incstack = 0
  9706  000F6A  0EF8               	movlw	low (?_printf+2)
  9707  000F6C  0101               	movlb	1	; () banked
  9708  000F6E  6F38               	movwf	printf@ap& (0+255),b
  9709  000F70  0E00               	movlw	high (?_printf+2)
  9710  000F72  0101               	movlb	1	; () banked
  9711  000F74  6F39               	movwf	(printf@ap+1)& (0+255),b
  9712                           
  9713                           ;doprnt.c: 536: while(c = *f++) {
  9714  000F76  D20A               	goto	l4172
  9715  000F78                     l4026:
  9716                           
  9717                           ; BSR set to: 1
  9718                           ;doprnt.c: 538: if(c != '%')
  9719  000F78  0E25               	movlw	37
  9720  000F7A  0101               	movlb	1	; () banked
  9721  000F7C  1942               	xorwf	printf@c& (0+255),w,b
  9722  000F7E  B4D8               	btfsc	status,2,c
  9723  000F80  D005               	goto	l4030
  9724                           
  9725                           ; BSR set to: 1
  9726                           ;doprnt.c: 540: {
  9727                           ;doprnt.c: 541: (putch(c) );
  9728  000F82  0101               	movlb	1	; () banked
  9729  000F84  5142               	movf	printf@c& (0+255),w,b
  9730  000F86  ECC8  F01A         	call	_putch
  9731                           
  9732                           ;doprnt.c: 542: continue;
  9733  000F8A  D200               	goto	l4172
  9734  000F8C                     l4030:
  9735                           
  9736                           ;doprnt.c: 543: }
  9737                           ;doprnt.c: 546: width = 0;
  9738  000F8C  0E00               	movlw	0
  9739  000F8E  0101               	movlb	1	; () banked
  9740  000F90  6F41               	movwf	(printf@width+1)& (0+255),b
  9741  000F92  0E00               	movlw	0
  9742  000F94  6F40               	movwf	printf@width& (0+255),b
  9743                           
  9744                           ;doprnt.c: 548: flag = 0;
  9745  000F96  0E00               	movlw	0
  9746  000F98  0101               	movlb	1	; () banked
  9747  000F9A  6F3F               	movwf	printf@flag& (0+255),b
  9748                           
  9749                           ; BSR set to: 1
  9750                           ;doprnt.c: 551: switch(*f) {
  9751                           
  9752                           ;doprnt.c: 550: for(;;) {
  9753  000F9C  D005               	goto	l4036
  9754  000F9E                     l4032:
  9755                           
  9756                           ;doprnt.c: 580: flag |= 0x04;
  9757  000F9E  0101               	movlb	1	; () banked
  9758  000FA0  853F               	bsf	printf@flag& (0+255),2,b
  9759                           
  9760                           ;doprnt.c: 581: f++;
  9761  000FA2  0100               	movlb	0	; () banked
  9762  000FA4  4BF6               	infsnz	printf@f& (0+255),f,b
  9763  000FA6  2BF7               	incf	(printf@f+1)& (0+255),f,b
  9764  000FA8                     l4036:
  9765  000FA8  C0F6  FFF6         	movff	printf@f,tblptrl
  9766  000FAC  C0F7  FFF7         	movff	printf@f+1,tblptrh
  9767  000FB0                     	if	0	;tblptru may be non-zero
  9768  000FB0                     	endif
  9769  000FB0                     	if	0	;tblptru may be non-zero
  9770  000FB0                     	endif
  9771  000FB0  0008               	tblrd		*
  9772  000FB2  50F5               	movf	tablat,w,c
  9773                           
  9774                           ; Switch size 1, requested type "space"
  9775                           ; Number of cases is 1, Range of values is 48 to 48
  9776                           ; switch strategies available:
  9777                           ; Name         Instructions Cycles
  9778                           ; simple_byte            4     3 (average)
  9779                           ;	Chosen strategy is simple_byte
  9780  000FB4  0A30               	xorlw	48	; case 48
  9781  000FB6  B4D8               	btfsc	status,2,c
  9782  000FB8  D7F2               	goto	l4032
  9783                           
  9784                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  9785                           
  9786                           ;doprnt.c: 586: }
  9787                           
  9788                           ;doprnt.c: 585: break;
  9789  000FBA  C0F6  FFF6         	movff	printf@f,tblptrl
  9790  000FBE  C0F7  FFF7         	movff	printf@f+1,tblptrh
  9791  000FC2                     	if	0	;tblptru may be non-zero
  9792  000FC2                     	endif
  9793  000FC2                     	if	0	;tblptru may be non-zero
  9794  000FC2                     	endif
  9795  000FC2  0008               	tblrd		*
  9796  000FC4  50F5               	movf	tablat,w,c
  9797  000FC6  EC75  F01A         	call	_isdigit
  9798  000FCA  A0D8               	btfss	status,0,c
  9799  000FCC  D08D               	goto	l4074
  9800                           
  9801                           ;doprnt.c: 598: width = 0;
  9802  000FCE  0E00               	movlw	0
  9803  000FD0  0101               	movlb	1	; () banked
  9804  000FD2  6F41               	movwf	(printf@width+1)& (0+255),b
  9805  000FD4  0E00               	movlw	0
  9806  000FD6  6F40               	movwf	printf@width& (0+255),b
  9807  000FD8                     l4042:
  9808                           
  9809                           ;doprnt.c: 600: width *= 10;
  9810  000FD8  C140  F035         	movff	printf@width,___wmul@multiplier
  9811  000FDC  C141  F036         	movff	printf@width+1,___wmul@multiplier+1
  9812  000FE0  0E00               	movlw	0
  9813  000FE2  6E38               	movwf	___wmul@multiplicand+1,c
  9814  000FE4  0E0A               	movlw	10
  9815  000FE6  6E37               	movwf	___wmul@multiplicand,c
  9816  000FE8  EC09  F01A         	call	___wmul	;wreg free
  9817  000FEC  C035  F140         	movff	?___wmul,printf@width
  9818  000FF0  C036  F141         	movff	?___wmul+1,printf@width+1
  9819                           
  9820                           ;doprnt.c: 601: width += *f++ - '0';
  9821  000FF4  0ED0               	movlw	208
  9822  000FF6  0101               	movlb	1	; () banked
  9823  000FF8  6F31               	movwf	??_printf& (0+255),b
  9824  000FFA  0EFF               	movlw	255
  9825  000FFC  0101               	movlb	1	; () banked
  9826  000FFE  6F32               	movwf	(??_printf+1)& (0+255),b
  9827  001000  C0F6  FFF6         	movff	printf@f,tblptrl
  9828  001004  C0F7  FFF7         	movff	printf@f+1,tblptrh
  9829  001008                     	if	0	;tblptru may be non-zero
  9830  001008                     	endif
  9831  001008                     	if	0	;tblptru may be non-zero
  9832  001008                     	endif
  9833  001008  0008               	tblrd		*
  9834  00100A  50F5               	movf	tablat,w,c
  9835  00100C  0101               	movlb	1	; () banked
  9836  00100E  6F33               	movwf	(??_printf+2)& (0+255),b
  9837  001010  6B34               	clrf	(??_printf+3)& (0+255),b
  9838  001012  0101               	movlb	1	; () banked
  9839  001014  5131               	movf	??_printf& (0+255),w,b
  9840  001016  0101               	movlb	1	; () banked
  9841  001018  2733               	addwf	(??_printf+2)& (0+255),f,b
  9842  00101A  0101               	movlb	1	; () banked
  9843  00101C  5132               	movf	(??_printf+1)& (0+255),w,b
  9844  00101E  0101               	movlb	1	; () banked
  9845  001020  2334               	addwfc	(??_printf+3)& (0+255),f,b
  9846  001022  0101               	movlb	1	; () banked
  9847  001024  5133               	movf	(??_printf+2)& (0+255),w,b
  9848  001026  0101               	movlb	1	; () banked
  9849  001028  2740               	addwf	printf@width& (0+255),f,b
  9850  00102A  0101               	movlb	1	; () banked
  9851  00102C  5134               	movf	(??_printf+3)& (0+255),w,b
  9852  00102E  0101               	movlb	1	; () banked
  9853  001030  2341               	addwfc	(printf@width+1)& (0+255),f,b
  9854                           
  9855                           ; BSR set to: 1
  9856  001032  0100               	movlb	0	; () banked
  9857  001034  4BF6               	infsnz	printf@f& (0+255),f,b
  9858  001036  2BF7               	incf	(printf@f+1)& (0+255),f,b
  9859                           
  9860                           ; BSR set to: 0
  9861                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  9862  001038  C0F6  FFF6         	movff	printf@f,tblptrl
  9863  00103C  C0F7  FFF7         	movff	printf@f+1,tblptrh
  9864  001040                     	if	0	;tblptru may be non-zero
  9865  001040                     	endif
  9866  001040                     	if	0	;tblptru may be non-zero
  9867  001040                     	endif
  9868  001040  0008               	tblrd		*
  9869  001042  50F5               	movf	tablat,w,c
  9870  001044  EC75  F01A         	call	_isdigit
  9871  001048  A0D8               	btfss	status,0,c
  9872  00104A  D04E               	goto	l4074
  9873  00104C  D7C5               	goto	l4042
  9874  00104E                     l4050:
  9875                           
  9876                           ;doprnt.c: 721: flag |= 0x80;
  9877  00104E  0101               	movlb	1	; () banked
  9878  001050  8F3F               	bsf	printf@flag& (0+255),7,b
  9879                           
  9880                           ;doprnt.c: 723: break;
  9881  001052  D063               	goto	l522
  9882  001054                     l4052:
  9883                           
  9884                           ; BSR set to: 1
  9885                           ;doprnt.c: 757: if(width > len)
  9886  001054  0101               	movlb	1	; () banked
  9887  001056  5140               	movf	printf@width& (0+255),w,b
  9888  001058  0101               	movlb	1	; () banked
  9889  00105A  5D3A               	subwf	printf@len& (0+255),w,b
  9890  00105C  0101               	movlb	1	; () banked
  9891  00105E  5141               	movf	(printf@width+1)& (0+255),w,b
  9892  001060  0101               	movlb	1	; () banked
  9893  001062  593B               	subwfb	(printf@len+1)& (0+255),w,b
  9894  001064  B0D8               	btfsc	status,0,c
  9895  001066  D009               	goto	l4056
  9896                           
  9897                           ; BSR set to: 1
  9898                           ;doprnt.c: 758: width -= len;
  9899  001068  0101               	movlb	1	; () banked
  9900  00106A  513A               	movf	printf@len& (0+255),w,b
  9901  00106C  0101               	movlb	1	; () banked
  9902  00106E  5F40               	subwf	printf@width& (0+255),f,b
  9903  001070  0101               	movlb	1	; () banked
  9904  001072  513B               	movf	(printf@len+1)& (0+255),w,b
  9905  001074  0101               	movlb	1	; () banked
  9906  001076  5B41               	subwfb	(printf@width+1)& (0+255),f,b
  9907  001078  D009               	goto	l4060
  9908  00107A                     l4056:
  9909                           
  9910                           ; BSR set to: 1
  9911                           ;doprnt.c: 759: else
  9912                           ;doprnt.c: 760: width = 0;
  9913  00107A  0E00               	movlw	0
  9914  00107C  0101               	movlb	1	; () banked
  9915  00107E  6F41               	movwf	(printf@width+1)& (0+255),b
  9916  001080  0E00               	movlw	0
  9917  001082  6F40               	movwf	printf@width& (0+255),b
  9918                           
  9919                           ; BSR set to: 1
  9920                           ;doprnt.c: 764: while(width--)
  9921  001084  D003               	goto	l4060
  9922  001086                     l4058:
  9923                           
  9924                           ; BSR set to: 1
  9925                           ;doprnt.c: 765: (putch(' ') );
  9926  001086  0E20               	movlw	32
  9927  001088  ECC8  F01A         	call	_putch
  9928  00108C                     l4060:
  9929  00108C  0101               	movlb	1	; () banked
  9930  00108E  0740               	decf	printf@width& (0+255),f,b
  9931  001090  A0D8               	btfss	status,0,c
  9932  001092  0741               	decf	(printf@width+1)& (0+255),f,b
  9933  001094  0101               	movlb	1	; () banked
  9934  001096  2940               	incf	printf@width& (0+255),w,b
  9935  001098  E1F6               	bnz	l4058
  9936  00109A  0101               	movlb	1	; () banked
  9937  00109C  2941               	incf	(printf@width+1)& (0+255),w,b
  9938  00109E  B4D8               	btfsc	status,2,c
  9939  0010A0  D00B               	goto	l4066
  9940  0010A2  D7F1               	goto	l4058
  9941  0010A4                     l4062:
  9942                           
  9943                           ; BSR set to: 1
  9944                           ;doprnt.c: 768: (putch(*cp++) );
  9945  0010A4  C135  FFD9         	movff	printf@cp,fsr2l
  9946  0010A8  C136  FFDA         	movff	printf@cp+1,fsr2h
  9947  0010AC  50DF               	movf	indf2,w,c
  9948  0010AE  ECC8  F01A         	call	_putch
  9949  0010B2  0101               	movlb	1	; () banked
  9950  0010B4  4B35               	infsnz	printf@cp& (0+255),f,b
  9951  0010B6  2B36               	incf	(printf@cp+1)& (0+255),f,b
  9952  0010B8                     l4066:
  9953                           
  9954                           ; BSR set to: 1
  9955  0010B8  0101               	movlb	1	; () banked
  9956  0010BA  073A               	decf	printf@len& (0+255),f,b
  9957  0010BC  A0D8               	btfss	status,0,c
  9958  0010BE  073B               	decf	(printf@len+1)& (0+255),f,b
  9959  0010C0  0101               	movlb	1	; () banked
  9960  0010C2  293A               	incf	printf@len& (0+255),w,b
  9961  0010C4  E1EF               	bnz	l4062
  9962  0010C6  0101               	movlb	1	; () banked
  9963  0010C8  293B               	incf	(printf@len+1)& (0+255),w,b
  9964  0010CA  B4D8               	btfsc	status,2,c
  9965  0010CC  D15F               	goto	l4172
  9966  0010CE  D7EA               	goto	l4062
  9967  0010D0                     l4068:
  9968                           
  9969                           ; BSR set to: 1
  9970                           ;doprnt.c: 805: cp = (char *)&c;
  9971  0010D0  0E42               	movlw	low printf@c
  9972  0010D2  0101               	movlb	1	; () banked
  9973  0010D4  6F35               	movwf	printf@cp& (0+255),b
  9974  0010D6  0E01               	movlw	high printf@c
  9975  0010D8  0101               	movlb	1	; () banked
  9976  0010DA  6F36               	movwf	(printf@cp+1)& (0+255),b
  9977                           
  9978                           ; BSR set to: 1
  9979                           ;doprnt.c: 806: len = 1;
  9980  0010DC  0E00               	movlw	0
  9981  0010DE  0101               	movlb	1	; () banked
  9982  0010E0  6F3B               	movwf	(printf@len+1)& (0+255),b
  9983  0010E2  0E01               	movlw	1
  9984  0010E4  6F3A               	movwf	printf@len& (0+255),b
  9985                           
  9986                           ;doprnt.c: 807: goto dostring;
  9987  0010E6  D7B6               	goto	l4052
  9988  0010E8                     l4074:
  9989  0010E8  C0F6  FFF6         	movff	printf@f,tblptrl
  9990  0010EC  C0F7  FFF7         	movff	printf@f+1,tblptrh
  9991  0010F0  0100               	movlb	0	; () banked
  9992  0010F2  4BF6               	infsnz	printf@f& (0+255),f,b
  9993  0010F4  2BF7               	incf	(printf@f+1)& (0+255),f,b
  9994  0010F6                     	if	0	;tblptru may be non-zero
  9995  0010F6                     	endif
  9996  0010F6                     	if	0	;tblptru may be non-zero
  9997  0010F6                     	endif
  9998  0010F6  0008               	tblrd		*
  9999  0010F8  CFF5 F142          	movff	tablat,printf@c
 10000  0010FC  0101               	movlb	1	; () banked
 10001  0010FE  5142               	movf	printf@c& (0+255),w,b
 10002                           
 10003                           ; Switch size 1, requested type "space"
 10004                           ; Number of cases is 4, Range of values is 0 to 120
 10005                           ; switch strategies available:
 10006                           ; Name         Instructions Cycles
 10007                           ; simple_byte           13     7 (average)
 10008                           ;	Chosen strategy is simple_byte
 10009  001100  0A00               	xorlw	0	; case 0
 10010  001102  B4D8               	btfsc	status,2,c
 10011  001104  0012               	return	
 10012  001106  0A64               	xorlw	100	; case 100
 10013  001108  B4D8               	btfsc	status,2,c
 10014  00110A  D007               	goto	l522
 10015  00110C  0A0D               	xorlw	13	; case 105
 10016  00110E  B4D8               	btfsc	status,2,c
 10017  001110  D004               	goto	l522
 10018  001112  0A11               	xorlw	17	; case 120
 10019  001114  B4D8               	btfsc	status,2,c
 10020  001116  D79B               	goto	l4050
 10021  001118  D7DB               	goto	l4068
 10022  00111A                     l522:
 10023                           
 10024                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 10025  00111A  0101               	movlb	1	; () banked
 10026  00111C  BF3F               	btfsc	printf@flag& (0+255),7,b
 10027  00111E  D019               	goto	l4086
 10028                           
 10029                           ; BSR set to: 1
 10030                           ;doprnt.c: 1253: {
 10031                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 10032  001120  C138  FFD9         	movff	printf@ap,fsr2l
 10033  001124  C139  FFDA         	movff	printf@ap+1,fsr2h
 10034  001128  CFDE F13D          	movff	postinc2,printf@val
 10035  00112C  CFDD F13E          	movff	postdec2,printf@val+1
 10036                           
 10037                           ; BSR set to: 1
 10038  001130  0E02               	movlw	2
 10039  001132  0101               	movlb	1	; () banked
 10040  001134  2738               	addwf	printf@ap& (0+255),f,b
 10041  001136  0E00               	movlw	0
 10042  001138  2339               	addwfc	(printf@ap+1)& (0+255),f,b
 10043                           
 10044                           ; BSR set to: 1
 10045                           ;doprnt.c: 1261: if((int)val < 0) {
 10046  00113A  0101               	movlb	1	; () banked
 10047  00113C  AF3E               	btfss	(printf@val+1)& (0+255),7,b
 10048  00113E  D053               	goto	l4120
 10049                           
 10050                           ; BSR set to: 1
 10051                           ;doprnt.c: 1262: flag |= 0x03;
 10052  001140  0E03               	movlw	3
 10053  001142  0101               	movlb	1	; () banked
 10054  001144  133F               	iorwf	printf@flag& (0+255),f,b
 10055                           
 10056                           ; BSR set to: 1
 10057                           ;doprnt.c: 1263: val = -val;
 10058  001146  0101               	movlb	1	; () banked
 10059  001148  6D3D               	negf	printf@val& (0+255),b
 10060  00114A  1F3E               	comf	(printf@val+1)& (0+255),f,b
 10061  00114C  B0D8               	btfsc	status,0,c
 10062  00114E  2B3E               	incf	(printf@val+1)& (0+255),f,b
 10063                           
 10064                           ; BSR set to: 1
 10065                           ;doprnt.c: 1264: }
 10066                           ;doprnt.c: 1266: }
 10067  001150  D04A               	goto	l4120
 10068  001152                     l4086:
 10069                           
 10070                           ; BSR set to: 1
 10071                           ;doprnt.c: 1268: else
 10072                           ;doprnt.c: 1273: {
 10073                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 10074  001152  C138  FFD9         	movff	printf@ap,fsr2l
 10075  001156  C139  FFDA         	movff	printf@ap+1,fsr2h
 10076  00115A  CFDE F13D          	movff	postinc2,printf@val
 10077  00115E  CFDD F13E          	movff	postdec2,printf@val+1
 10078                           
 10079                           ; BSR set to: 1
 10080  001162  0E02               	movlw	2
 10081  001164  0101               	movlb	1	; () banked
 10082  001166  2738               	addwf	printf@ap& (0+255),f,b
 10083  001168  0E00               	movlw	0
 10084  00116A  2339               	addwfc	(printf@ap+1)& (0+255),f,b
 10085                           
 10086                           ; BSR set to: 1
 10087                           ;doprnt.c: 1287: }
 10088                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 10089  00116C  D03C               	goto	l4120
 10090  00116E                     l4090:
 10091                           
 10092                           ; BSR set to: 1
 10093                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 10094  00116E  0E01               	movlw	1
 10095  001170  0101               	movlb	1	; () banked
 10096  001172  6F42               	movwf	printf@c& (0+255),b
 10097  001174                     l4092:
 10098                           
 10099                           ; BSR set to: 1
 10100  001174  0E05               	movlw	5
 10101  001176  0101               	movlb	1	; () banked
 10102  001178  1942               	xorwf	printf@c& (0+255),w,b
 10103  00117A  B4D8               	btfsc	status,2,c
 10104  00117C  D03D               	goto	l4122
 10105                           
 10106                           ; BSR set to: 1
 10107                           ;doprnt.c: 1306: if(val < dpowers[c])
 10108                           
 10109                           ; BSR set to: 1
 10110                           
 10111                           ; BSR set to: 1
 10112  00117E  0101               	movlb	1	; () banked
 10113  001180  5142               	movf	printf@c& (0+255),w,b
 10114  001182  0D02               	mullw	2
 10115  001184  0E54               	movlw	low _dpowers
 10116  001186  24F3               	addwf	prodl,w,c
 10117  001188  6EF6               	movwf	tblptrl,c
 10118  00118A  0EFD               	movlw	high _dpowers
 10119  00118C  20F4               	addwfc	prodh,w,c
 10120  00118E  6EF7               	movwf	tblptrh,c
 10121  001190                     	if	0	;There are less than 3 active tblptr bytes
 10122  001190                     	endif
 10123  001190  0009               	tblrd		*+
 10124  001192  50F5               	movf	tablat,w,c
 10125  001194  0101               	movlb	1	; () banked
 10126  001196  5D3D               	subwf	printf@val& (0+255),w,b
 10127  001198  0009               	tblrd		*+
 10128  00119A  50F5               	movf	tablat,w,c
 10129  00119C  0101               	movlb	1	; () banked
 10130  00119E  593E               	subwfb	(printf@val+1)& (0+255),w,b
 10131  0011A0  A0D8               	btfss	status,0,c
 10132  0011A2  D02A               	goto	l4122
 10133                           
 10134                           ; BSR set to: 1
 10135                           
 10136                           ; BSR set to: 1
 10137                           
 10138                           ; BSR set to: 1
 10139                           ;doprnt.c: 1307: break;
 10140  0011A4  0101               	movlb	1	; () banked
 10141  0011A6  2B42               	incf	printf@c& (0+255),f,b
 10142  0011A8  D7E5               	goto	l4092
 10143  0011AA                     l4104:
 10144                           
 10145                           ; BSR set to: 1
 10146                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 10147  0011AA  0E01               	movlw	1
 10148  0011AC  0101               	movlb	1	; () banked
 10149  0011AE  6F42               	movwf	printf@c& (0+255),b
 10150  0011B0                     l4106:
 10151                           
 10152                           ; BSR set to: 1
 10153  0011B0  0E04               	movlw	4
 10154  0011B2  0101               	movlb	1	; () banked
 10155  0011B4  1942               	xorwf	printf@c& (0+255),w,b
 10156  0011B6  B4D8               	btfsc	status,2,c
 10157  0011B8  D01F               	goto	l4122
 10158                           
 10159                           ; BSR set to: 1
 10160                           ;doprnt.c: 1317: if(val < hexpowers[c])
 10161                           
 10162                           ; BSR set to: 1
 10163                           
 10164                           ; BSR set to: 1
 10165  0011BA  0101               	movlb	1	; () banked
 10166  0011BC  5142               	movf	printf@c& (0+255),w,b
 10167  0011BE  0D02               	mullw	2
 10168  0011C0  0E5E               	movlw	low _hexpowers
 10169  0011C2  24F3               	addwf	prodl,w,c
 10170  0011C4  6EF6               	movwf	tblptrl,c
 10171  0011C6  0EFD               	movlw	high _hexpowers
 10172  0011C8  20F4               	addwfc	prodh,w,c
 10173  0011CA  6EF7               	movwf	tblptrh,c
 10174  0011CC                     	if	0	;There are less than 3 active tblptr bytes
 10175  0011CC                     	endif
 10176  0011CC  0009               	tblrd		*+
 10177  0011CE  50F5               	movf	tablat,w,c
 10178  0011D0  0101               	movlb	1	; () banked
 10179  0011D2  5D3D               	subwf	printf@val& (0+255),w,b
 10180  0011D4  0009               	tblrd		*+
 10181  0011D6  50F5               	movf	tablat,w,c
 10182  0011D8  0101               	movlb	1	; () banked
 10183  0011DA  593E               	subwfb	(printf@val+1)& (0+255),w,b
 10184  0011DC  A0D8               	btfss	status,0,c
 10185  0011DE  D00C               	goto	l4122
 10186                           
 10187                           ; BSR set to: 1
 10188                           
 10189                           ; BSR set to: 1
 10190                           
 10191                           ; BSR set to: 1
 10192                           ;doprnt.c: 1318: break;
 10193  0011E0  0101               	movlb	1	; () banked
 10194  0011E2  2B42               	incf	printf@c& (0+255),f,b
 10195  0011E4  D7E5               	goto	l4106
 10196  0011E6                     l4120:
 10197                           
 10198                           ; BSR set to: 1
 10199  0011E6  0101               	movlb	1	; () banked
 10200  0011E8  513F               	movf	printf@flag& (0+255),w,b
 10201  0011EA  0B80               	andlw	128
 10202                           
 10203                           ; Switch size 1, requested type "space"
 10204                           ; Number of cases is 2, Range of values is 0 to 128
 10205                           ; switch strategies available:
 10206                           ; Name         Instructions Cycles
 10207                           ; simple_byte            7     4 (average)
 10208                           ;	Chosen strategy is simple_byte
 10209  0011EC  0A00               	xorlw	0	; case 0
 10210  0011EE  B4D8               	btfsc	status,2,c
 10211  0011F0  D7BE               	goto	l4090
 10212  0011F2  0A80               	xorlw	128	; case 128
 10213  0011F4  B4D8               	btfsc	status,2,c
 10214  0011F6  D7D9               	goto	l4104
 10215  0011F8                     l4122:
 10216                           
 10217                           ; BSR set to: 1
 10218                           ;doprnt.c: 1345: if(width && flag & 0x03)
 10219  0011F8  0101               	movlb	1	; () banked
 10220  0011FA  5140               	movf	printf@width& (0+255),w,b
 10221  0011FC  0101               	movlb	1	; () banked
 10222  0011FE  1141               	iorwf	(printf@width+1)& (0+255),w,b
 10223  001200  B4D8               	btfsc	status,2,c
 10224  001202  D00B               	goto	l4128
 10225                           
 10226                           ; BSR set to: 1
 10227  001204  C13F  F131         	movff	printf@flag,??_printf
 10228  001208  0E03               	movlw	3
 10229  00120A  0101               	movlb	1	; () banked
 10230  00120C  1731               	andwf	??_printf& (0+255),f,b
 10231  00120E  B4D8               	btfsc	status,2,c
 10232  001210  D004               	goto	l4128
 10233                           
 10234                           ; BSR set to: 1
 10235                           ;doprnt.c: 1346: width--;
 10236  001212  0101               	movlb	1	; () banked
 10237  001214  0740               	decf	printf@width& (0+255),f,b
 10238  001216  A0D8               	btfss	status,0,c
 10239  001218  0741               	decf	(printf@width+1)& (0+255),f,b
 10240  00121A                     l4128:
 10241                           
 10242                           ; BSR set to: 1
 10243                           ;doprnt.c: 1381: if(width > c)
 10244  00121A  0E80               	movlw	128
 10245  00121C  0101               	movlb	1	; () banked
 10246  00121E  BF42               	btfsc	printf@c& (0+255),7,b
 10247  001220  0E7F               	movlw	127
 10248  001222  0101               	movlb	1	; () banked
 10249  001224  6F31               	movwf	??_printf& (0+255),b
 10250  001226  0101               	movlb	1	; () banked
 10251  001228  5140               	movf	printf@width& (0+255),w,b
 10252  00122A  0101               	movlb	1	; () banked
 10253  00122C  5D42               	subwf	printf@c& (0+255),w,b
 10254  00122E  0101               	movlb	1	; () banked
 10255  001230  5141               	movf	(printf@width+1)& (0+255),w,b
 10256  001232  0A80               	xorlw	128
 10257  001234  0101               	movlb	1	; () banked
 10258  001236  5931               	subwfb	??_printf& (0+255),w,b
 10259  001238  B0D8               	btfsc	status,0,c
 10260  00123A  D00B               	goto	l4132
 10261                           
 10262                           ; BSR set to: 1
 10263                           ;doprnt.c: 1382: width -= c;
 10264  00123C  0101               	movlb	1	; () banked
 10265  00123E  5142               	movf	printf@c& (0+255),w,b
 10266  001240  0101               	movlb	1	; () banked
 10267  001242  5F40               	subwf	printf@width& (0+255),f,b
 10268  001244  0E00               	movlw	0
 10269  001246  0101               	movlb	1	; () banked
 10270  001248  BF42               	btfsc	printf@c& (0+255),7,b
 10271  00124A  0EFF               	movlw	255
 10272  00124C  0101               	movlb	1	; () banked
 10273  00124E  5B41               	subwfb	(printf@width+1)& (0+255),f,b
 10274  001250  D005               	goto	l4134
 10275  001252                     l4132:
 10276                           
 10277                           ; BSR set to: 1
 10278                           ;doprnt.c: 1383: else
 10279                           ;doprnt.c: 1384: width = 0;
 10280  001252  0E00               	movlw	0
 10281  001254  0101               	movlb	1	; () banked
 10282  001256  6F41               	movwf	(printf@width+1)& (0+255),b
 10283  001258  0E00               	movlw	0
 10284  00125A  6F40               	movwf	printf@width& (0+255),b
 10285  00125C                     l4134:
 10286                           
 10287                           ; BSR set to: 1
 10288                           ;doprnt.c: 1387: if(flag & 0x04) {
 10289  00125C  0101               	movlb	1	; () banked
 10290  00125E  A53F               	btfss	printf@flag& (0+255),2,b
 10291  001260  D018               	goto	l4146
 10292                           
 10293                           ; BSR set to: 1
 10294                           ;doprnt.c: 1392: if(flag & 0x03)
 10295  001262  C13F  F131         	movff	printf@flag,??_printf
 10296  001266  0E03               	movlw	3
 10297  001268  0101               	movlb	1	; () banked
 10298  00126A  1731               	andwf	??_printf& (0+255),f,b
 10299  00126C  B4D8               	btfsc	status,2,c
 10300  00126E  D003               	goto	l4140
 10301                           
 10302                           ; BSR set to: 1
 10303                           ;doprnt.c: 1393: (putch('-') );
 10304  001270  0E2D               	movlw	45
 10305  001272  ECC8  F01A         	call	_putch
 10306  001276                     l4140:
 10307                           
 10308                           ;doprnt.c: 1415: if(width)
 10309  001276  0101               	movlb	1	; () banked
 10310  001278  5140               	movf	printf@width& (0+255),w,b
 10311  00127A  0101               	movlb	1	; () banked
 10312  00127C  1141               	iorwf	(printf@width+1)& (0+255),w,b
 10313  00127E  B4D8               	btfsc	status,2,c
 10314  001280  D025               	goto	l4156
 10315                           
 10316                           ; BSR set to: 1
 10317                           ;doprnt.c: 1417: (putch('0') );
 10318                           
 10319                           ; BSR set to: 1
 10320                           
 10321                           ;doprnt.c: 1416: do
 10322  001282  0E30               	movlw	48
 10323  001284  ECC8  F01A         	call	_putch
 10324                           
 10325                           ;doprnt.c: 1418: while(--width);
 10326  001288  0101               	movlb	1	; () banked
 10327  00128A  0740               	decf	printf@width& (0+255),f,b
 10328  00128C  A0D8               	btfss	status,0,c
 10329  00128E  0741               	decf	(printf@width+1)& (0+255),f,b
 10330  001290  D7F2               	goto	l4140
 10331  001292                     l4146:
 10332                           
 10333                           ; BSR set to: 1
 10334                           ;doprnt.c: 1422: {
 10335                           ;doprnt.c: 1424: if(width
 10336                           ;doprnt.c: 1428: )
 10337  001292  0101               	movlb	1	; () banked
 10338  001294  5140               	movf	printf@width& (0+255),w,b
 10339  001296  0101               	movlb	1	; () banked
 10340  001298  1141               	iorwf	(printf@width+1)& (0+255),w,b
 10341  00129A  B4D8               	btfsc	status,2,c
 10342  00129C  D00D               	goto	l4152
 10343  00129E                     l4148:
 10344                           
 10345                           ; BSR set to: 1
 10346                           ;doprnt.c: 1430: (putch(' ') );
 10347  00129E  0E20               	movlw	32
 10348  0012A0  ECC8  F01A         	call	_putch
 10349                           
 10350                           ;doprnt.c: 1431: while(--width);
 10351  0012A4  0101               	movlb	1	; () banked
 10352  0012A6  0740               	decf	printf@width& (0+255),f,b
 10353  0012A8  A0D8               	btfss	status,0,c
 10354  0012AA  0741               	decf	(printf@width+1)& (0+255),f,b
 10355  0012AC  0101               	movlb	1	; () banked
 10356  0012AE  5140               	movf	printf@width& (0+255),w,b
 10357  0012B0  0101               	movlb	1	; () banked
 10358  0012B2  1141               	iorwf	(printf@width+1)& (0+255),w,b
 10359  0012B4  A4D8               	btfss	status,2,c
 10360  0012B6  D7F3               	goto	l4148
 10361  0012B8                     l4152:
 10362                           
 10363                           ; BSR set to: 1
 10364                           ;doprnt.c: 1438: if(flag & 0x03)
 10365  0012B8  C13F  F131         	movff	printf@flag,??_printf
 10366  0012BC  0E03               	movlw	3
 10367  0012BE  0101               	movlb	1	; () banked
 10368  0012C0  1731               	andwf	??_printf& (0+255),f,b
 10369  0012C2  B4D8               	btfsc	status,2,c
 10370  0012C4  D003               	goto	l4156
 10371                           
 10372                           ; BSR set to: 1
 10373                           ;doprnt.c: 1439: (putch('-') );
 10374  0012C6  0E2D               	movlw	45
 10375  0012C8  ECC8  F01A         	call	_putch
 10376  0012CC                     l4156:
 10377                           
 10378                           ;doprnt.c: 1469: }
 10379                           ;doprnt.c: 1472: prec = c;
 10380  0012CC  C142  F13C         	movff	printf@c,printf@prec
 10381                           
 10382                           ;doprnt.c: 1474: while(prec--) {
 10383  0012D0  D057               	goto	l4170
 10384  0012D2                     l4158:
 10385                           
 10386                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10387  0012D2  0101               	movlb	1	; () banked
 10388  0012D4  513C               	movf	printf@prec& (0+255),w,b
 10389  0012D6  0D02               	mullw	2
 10390  0012D8  0E54               	movlw	low _dpowers
 10391  0012DA  24F3               	addwf	prodl,w,c
 10392  0012DC  6EF6               	movwf	tblptrl,c
 10393  0012DE  0EFD               	movlw	high _dpowers
 10394  0012E0  20F4               	addwfc	prodh,w,c
 10395  0012E2  6EF7               	movwf	tblptrh,c
 10396  0012E4                     	if	0	;There are less than 3 active tblptr bytes
 10397  0012E4                     	endif
 10398  0012E4  0009               	tblrd		*+
 10399  0012E6  CFF5 F037          	movff	tablat,___lwdiv@divisor
 10400  0012EA  000A               	tblrd		*-
 10401  0012EC  CFF5 F038          	movff	tablat,___lwdiv@divisor+1
 10402  0012F0  C13D  F035         	movff	printf@val,___lwdiv@dividend
 10403  0012F4  C13E  F036         	movff	printf@val+1,___lwdiv@dividend+1
 10404  0012F8  EC4C  F017         	call	___lwdiv	;wreg free
 10405  0012FC  C035  F03C         	movff	?___lwdiv,___lwmod@dividend
 10406  001300  C036  F03D         	movff	?___lwdiv+1,___lwmod@dividend+1
 10407  001304  0E00               	movlw	0
 10408  001306  6E3F               	movwf	___lwmod@divisor+1,c
 10409  001308  0E0A               	movlw	10
 10410  00130A  6E3E               	movwf	___lwmod@divisor,c
 10411  00130C  EC79  F018         	call	___lwmod	;wreg free
 10412  001310  503C               	movf	?___lwmod,w,c
 10413  001312  0F30               	addlw	48
 10414  001314  0101               	movlb	1	; () banked
 10415  001316  6F42               	movwf	printf@c& (0+255),b
 10416                           
 10417                           ;doprnt.c: 1491: break;
 10418  001318  D02F               	goto	l4168
 10419  00131A                     l4160:
 10420                           
 10421                           ; BSR set to: 1
 10422                           ;doprnt.c: 1499: {
 10423                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 10424  00131A  C13D  F035         	movff	printf@val,___lwdiv@dividend
 10425  00131E  C13E  F036         	movff	printf@val+1,___lwdiv@dividend+1
 10426  001322  0101               	movlb	1	; () banked
 10427  001324  513C               	movf	printf@prec& (0+255),w,b
 10428  001326  0D02               	mullw	2
 10429  001328  0E5E               	movlw	low _hexpowers
 10430  00132A  24F3               	addwf	prodl,w,c
 10431  00132C  6EF6               	movwf	tblptrl,c
 10432  00132E  0EFD               	movlw	high _hexpowers
 10433  001330  20F4               	addwfc	prodh,w,c
 10434  001332  6EF7               	movwf	tblptrh,c
 10435  001334                     	if	0	;There are less than 3 active tblptr bytes
 10436  001334                     	endif
 10437  001334  0009               	tblrd		*+
 10438  001336  CFF5 F037          	movff	tablat,___lwdiv@divisor
 10439  00133A  000A               	tblrd		*-
 10440  00133C  CFF5 F038          	movff	tablat,___lwdiv@divisor+1
 10441  001340  EC4C  F017         	call	___lwdiv	;wreg free
 10442  001344  5035               	movf	?___lwdiv,w,c
 10443  001346  0B0F               	andlw	15
 10444  001348  0101               	movlb	1	; () banked
 10445  00134A  6F37               	movwf	printf@idx& (0+255),b
 10446                           
 10447                           ; BSR set to: 1
 10448                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 10449  00134C  0101               	movlb	1	; () banked
 10450  00134E  5137               	movf	printf@idx& (0+255),w,b
 10451  001350  0D01               	mullw	1
 10452  001352  0E57               	movlw	low STR_44
 10453  001354  24F3               	addwf	prodl,w,c
 10454  001356  6EF6               	movwf	tblptrl,c
 10455  001358  0EFE               	movlw	high STR_44
 10456  00135A  20F4               	addwfc	prodh,w,c
 10457  00135C  6EF7               	movwf	tblptrh,c
 10458  00135E                     	if	0	;There are less than 3 active tblptr bytes
 10459  00135E                     	endif
 10460  00135E  0008               	tblrd		*
 10461  001360  CFF5 F142          	movff	tablat,printf@c
 10462                           
 10463                           ; BSR set to: 1
 10464                           ;doprnt.c: 1523: }
 10465                           
 10466                           ;doprnt.c: 1508: }
 10467                           ;doprnt.c: 1510: break;
 10468  001364  D009               	goto	l4168
 10469  001366                     l4166:
 10470  001366  0101               	movlb	1	; () banked
 10471  001368  513F               	movf	printf@flag& (0+255),w,b
 10472  00136A  0B80               	andlw	128
 10473                           
 10474                           ; Switch size 1, requested type "space"
 10475                           ; Number of cases is 2, Range of values is 0 to 128
 10476                           ; switch strategies available:
 10477                           ; Name         Instructions Cycles
 10478                           ; simple_byte            7     4 (average)
 10479                           ;	Chosen strategy is simple_byte
 10480  00136C  0A00               	xorlw	0	; case 0
 10481  00136E  B4D8               	btfsc	status,2,c
 10482  001370  D7B0               	goto	l4158
 10483  001372  0A80               	xorlw	128	; case 128
 10484  001374  B4D8               	btfsc	status,2,c
 10485  001376  D7D1               	goto	l4160
 10486  001378                     l4168:
 10487                           
 10488                           ; BSR set to: 1
 10489                           ;doprnt.c: 1524: (putch(c) );
 10490  001378  0101               	movlb	1	; () banked
 10491  00137A  5142               	movf	printf@c& (0+255),w,b
 10492  00137C  ECC8  F01A         	call	_putch
 10493  001380                     l4170:
 10494  001380  0101               	movlb	1	; () banked
 10495  001382  073C               	decf	printf@prec& (0+255),f,b
 10496  001384  0101               	movlb	1	; () banked
 10497  001386  293C               	incf	printf@prec& (0+255),w,b
 10498  001388  A4D8               	btfss	status,2,c
 10499  00138A  D7ED               	goto	l4166
 10500  00138C                     l4172:
 10501  00138C  C0F6  FFF6         	movff	printf@f,tblptrl
 10502  001390  C0F7  FFF7         	movff	printf@f+1,tblptrh
 10503  001394  0100               	movlb	0	; () banked
 10504  001396  4BF6               	infsnz	printf@f& (0+255),f,b
 10505  001398  2BF7               	incf	(printf@f+1)& (0+255),f,b
 10506  00139A                     	if	0	;tblptru may be non-zero
 10507  00139A                     	endif
 10508  00139A                     	if	0	;tblptru may be non-zero
 10509  00139A                     	endif
 10510  00139A  0008               	tblrd		*
 10511  00139C  CFF5 F142          	movff	tablat,printf@c
 10512  0013A0  0101               	movlb	1	; () banked
 10513  0013A2  5142               	movf	printf@c& (0+255),w,b
 10514  0013A4  B4D8               	btfsc	status,2,c
 10515  0013A6  0012               	return	
 10516  0013A8  D5E7               	goto	l4026
 10517  0013AA                     __end_of_printf:
 10518                           	opt stack 0
 10519                           tblptru	equ	0xFF8
 10520                           tblptrh	equ	0xFF7
 10521                           tblptrl	equ	0xFF6
 10522                           tablat	equ	0xFF5
 10523                           prodh	equ	0xFF4
 10524                           prodl	equ	0xFF3
 10525                           intcon	equ	0xFF2
 10526                           intcon2	equ	0xFF1
 10527                           intcon3	equ	0xFF0
 10528                           postinc0	equ	0xFEE
 10529                           wreg	equ	0xFE8
 10530                           indf2	equ	0xFDF
 10531                           postinc2	equ	0xFDE
 10532                           postdec2	equ	0xFDD
 10533                           fsr2h	equ	0xFDA
 10534                           fsr2l	equ	0xFD9
 10535                           status	equ	0xFD8
 10536                           
 10537 ;; *************** function _putch *****************
 10538 ;; Defined at:
 10539 ;;		line 31 in file "lcd.c"
 10540 ;; Parameters:    Size  Location     Type
 10541 ;;  data            1    wreg     unsigned char 
 10542 ;; Auto vars:     Size  Location     Type
 10543 ;;  data            1   54[COMRAM] unsigned char 
 10544 ;; Return value:  Size  Location     Type
 10545 ;;                  1    wreg      void 
 10546 ;; Registers used:
 10547 ;;		wreg, status,2, status,0, cstack
 10548 ;; Tracked objects:
 10549 ;;		On entry : 0/0
 10550 ;;		On exit  : 0/0
 10551 ;;		Unchanged: 0/0
 10552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10554 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10556 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10557 ;;Total ram usage:        1 bytes
 10558 ;; Hardware stack levels used:    1
 10559 ;; Hardware stack levels required when called:    6
 10560 ;; This function calls:
 10561 ;;		_lcdNibble
 10562 ;; This function is called by:
 10563 ;;		_printf
 10564 ;; This function uses a non-reentrant model
 10565 ;;
 10566                           
 10567                           	psect	text35
 10568  003590                     __ptext35:
 10569                           	opt stack 0
 10570  003590                     _putch:
 10571                           	opt stack 22
 10572                           
 10573                           ;incstack = 0
 10574                           ;putch@data stored from wreg
 10575  003590  6E37               	movwf	putch@data,c
 10576                           
 10577                           ;lcd.c: 32: LATDbits.LATD2 = 1;
 10578  003592  848C               	bsf	3980,2,c	;volatile
 10579                           
 10580                           ;lcd.c: 33: lcdNibble(data);
 10581  003594  5037               	movf	putch@data,w,c
 10582  003596  EC9E  F017         	call	_lcdNibble
 10583  00359A  0012               	return		;funcret
 10584  00359C                     __end_of_putch:
 10585                           	opt stack 0
 10586                           tblptru	equ	0xFF8
 10587                           tblptrh	equ	0xFF7
 10588                           tblptrl	equ	0xFF6
 10589                           tablat	equ	0xFF5
 10590                           prodh	equ	0xFF4
 10591                           prodl	equ	0xFF3
 10592                           intcon	equ	0xFF2
 10593                           intcon2	equ	0xFF1
 10594                           intcon3	equ	0xFF0
 10595                           postinc0	equ	0xFEE
 10596                           wreg	equ	0xFE8
 10597                           indf2	equ	0xFDF
 10598                           postinc2	equ	0xFDE
 10599                           postdec2	equ	0xFDD
 10600                           fsr2h	equ	0xFDA
 10601                           fsr2l	equ	0xFD9
 10602                           status	equ	0xFD8
 10603                           
 10604 ;; *************** function _isdigit *****************
 10605 ;; Defined at:
 10606 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/isdigit.c"
 10607 ;; Parameters:    Size  Location     Type
 10608 ;;  c               1    wreg     unsigned char 
 10609 ;; Auto vars:     Size  Location     Type
 10610 ;;  c               1   54[COMRAM] unsigned char 
 10611 ;; Return value:  Size  Location     Type
 10612 ;;		None               void
 10613 ;; Registers used:
 10614 ;;		wreg, status,2, status,0
 10615 ;; Tracked objects:
 10616 ;;		On entry : 0/0
 10617 ;;		On exit  : 0/0
 10618 ;;		Unchanged: 0/0
 10619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10621 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10622 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10623 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10624 ;;Total ram usage:        3 bytes
 10625 ;; Hardware stack levels used:    1
 10626 ;; Hardware stack levels required when called:    5
 10627 ;; This function calls:
 10628 ;;		Nothing
 10629 ;; This function is called by:
 10630 ;;		_printf
 10631 ;; This function uses a non-reentrant model
 10632 ;;
 10633                           
 10634                           	psect	text36
 10635  0034EA                     __ptext36:
 10636                           	opt stack 0
 10637  0034EA                     _isdigit:
 10638                           	opt stack 23
 10639                           
 10640                           ;incstack = 0
 10641                           ;isdigit@c stored from wreg
 10642  0034EA  6E37               	movwf	isdigit@c,c
 10643  0034EC  0E00               	movlw	0
 10644  0034EE  6E36               	movwf	_isdigit$1143,c
 10645  0034F0  0E3A               	movlw	58
 10646  0034F2  6037               	cpfslt	isdigit@c,c
 10647  0034F4  D005               	goto	l3852
 10648  0034F6  0E2F               	movlw	47
 10649  0034F8  6437               	cpfsgt	isdigit@c,c
 10650  0034FA  D002               	goto	l3852
 10651  0034FC  0E01               	movlw	1
 10652  0034FE  6E36               	movwf	_isdigit$1143,c
 10653  003500                     l3852:
 10654  003500  C036  F035         	movff	_isdigit$1143,??_isdigit
 10655  003504  3035               	rrcf	??_isdigit,w,c
 10656  003506  0012               	return	
 10657  003508                     __end_of_isdigit:
 10658                           	opt stack 0
 10659                           tblptru	equ	0xFF8
 10660                           tblptrh	equ	0xFF7
 10661                           tblptrl	equ	0xFF6
 10662                           tablat	equ	0xFF5
 10663                           prodh	equ	0xFF4
 10664                           prodl	equ	0xFF3
 10665                           intcon	equ	0xFF2
 10666                           intcon2	equ	0xFF1
 10667                           intcon3	equ	0xFF0
 10668                           postinc0	equ	0xFEE
 10669                           wreg	equ	0xFE8
 10670                           indf2	equ	0xFDF
 10671                           postinc2	equ	0xFDE
 10672                           postdec2	equ	0xFDD
 10673                           fsr2h	equ	0xFDA
 10674                           fsr2l	equ	0xFD9
 10675                           status	equ	0xFD8
 10676                           
 10677 ;; *************** function ___wmul *****************
 10678 ;; Defined at:
 10679 ;;		line 15 in file "/Applications/microchip/xc8/v1.41/sources/common/Umul16.c"
 10680 ;; Parameters:    Size  Location     Type
 10681 ;;  multiplier      2   52[COMRAM] unsigned int 
 10682 ;;  multiplicand    2   54[COMRAM] unsigned int 
 10683 ;; Auto vars:     Size  Location     Type
 10684 ;;  product         2   56[COMRAM] unsigned int 
 10685 ;; Return value:  Size  Location     Type
 10686 ;;                  2   52[COMRAM] unsigned int 
 10687 ;; Registers used:
 10688 ;;		wreg, status,2, status,0, prodl, prodh
 10689 ;; Tracked objects:
 10690 ;;		On entry : 0/0
 10691 ;;		On exit  : 0/0
 10692 ;;		Unchanged: 0/0
 10693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10694 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10695 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10697 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10698 ;;Total ram usage:        6 bytes
 10699 ;; Hardware stack levels used:    1
 10700 ;; Hardware stack levels required when called:    5
 10701 ;; This function calls:
 10702 ;;		Nothing
 10703 ;; This function is called by:
 10704 ;;		_time_diff
 10705 ;;		_printf
 10706 ;;		_eval_poly
 10707 ;; This function uses a non-reentrant model
 10708 ;;
 10709                           
 10710                           	psect	text37
 10711  003412                     __ptext37:
 10712                           	opt stack 0
 10713  003412                     ___wmul:
 10714                           	opt stack 20
 10715                           
 10716                           ;incstack = 0
 10717  003412  5035               	movf	___wmul@multiplier,w,c
 10718  003414  0237               	mulwf	___wmul@multiplicand,c
 10719  003416  CFF3 F039          	movff	prodl,___wmul@product
 10720  00341A  CFF4 F03A          	movff	prodh,___wmul@product+1
 10721  00341E  5035               	movf	___wmul@multiplier,w,c
 10722  003420  0238               	mulwf	___wmul@multiplicand+1,c
 10723  003422  50F3               	movf	prodl,w,c
 10724  003424  263A               	addwf	___wmul@product+1,f,c
 10725  003426  5036               	movf	___wmul@multiplier+1,w,c
 10726  003428  0237               	mulwf	___wmul@multiplicand,c
 10727  00342A  50F3               	movf	prodl,w,c
 10728  00342C  263A               	addwf	___wmul@product+1,f,c
 10729  00342E  C039  F035         	movff	___wmul@product,?___wmul
 10730  003432  C03A  F036         	movff	___wmul@product+1,?___wmul+1
 10731  003436  0012               	return	
 10732  003438                     __end_of___wmul:
 10733                           	opt stack 0
 10734                           tblptru	equ	0xFF8
 10735                           tblptrh	equ	0xFF7
 10736                           tblptrl	equ	0xFF6
 10737                           tablat	equ	0xFF5
 10738                           prodh	equ	0xFF4
 10739                           prodl	equ	0xFF3
 10740                           intcon	equ	0xFF2
 10741                           intcon2	equ	0xFF1
 10742                           intcon3	equ	0xFF0
 10743                           postinc0	equ	0xFEE
 10744                           wreg	equ	0xFE8
 10745                           indf2	equ	0xFDF
 10746                           postinc2	equ	0xFDE
 10747                           postdec2	equ	0xFDD
 10748                           fsr2h	equ	0xFDA
 10749                           fsr2l	equ	0xFD9
 10750                           status	equ	0xFD8
 10751                           
 10752 ;; *************** function ___lwmod *****************
 10753 ;; Defined at:
 10754 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwmod.c"
 10755 ;; Parameters:    Size  Location     Type
 10756 ;;  dividend        2   59[COMRAM] unsigned int 
 10757 ;;  divisor         2   61[COMRAM] unsigned int 
 10758 ;; Auto vars:     Size  Location     Type
 10759 ;;  counter         1   63[COMRAM] unsigned char 
 10760 ;; Return value:  Size  Location     Type
 10761 ;;                  2   59[COMRAM] unsigned int 
 10762 ;; Registers used:
 10763 ;;		wreg, status,2, status,0
 10764 ;; Tracked objects:
 10765 ;;		On entry : 0/0
 10766 ;;		On exit  : 0/0
 10767 ;;		Unchanged: 0/0
 10768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10769 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10770 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10772 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10773 ;;Total ram usage:        5 bytes
 10774 ;; Hardware stack levels used:    1
 10775 ;; Hardware stack levels required when called:    5
 10776 ;; This function calls:
 10777 ;;		Nothing
 10778 ;; This function is called by:
 10779 ;;		_printf
 10780 ;; This function uses a non-reentrant model
 10781 ;;
 10782                           
 10783                           	psect	text38
 10784  0030F2                     __ptext38:
 10785                           	opt stack 0
 10786  0030F2                     ___lwmod:
 10787                           	opt stack 23
 10788                           
 10789                           ;incstack = 0
 10790  0030F2  503E               	movf	___lwmod@divisor,w,c
 10791  0030F4  103F               	iorwf	___lwmod@divisor+1,w,c
 10792  0030F6  B4D8               	btfsc	status,2,c
 10793  0030F8  D018               	goto	l986
 10794  0030FA  0E01               	movlw	1
 10795  0030FC  6E40               	movwf	___lwmod@counter,c
 10796  0030FE  D004               	goto	l3928
 10797  003100                     l3926:
 10798  003100  90D8               	bcf	status,0,c
 10799  003102  363E               	rlcf	___lwmod@divisor,f,c
 10800  003104  363F               	rlcf	___lwmod@divisor+1,f,c
 10801  003106  2A40               	incf	___lwmod@counter,f,c
 10802  003108                     l3928:
 10803  003108  AE3F               	btfss	___lwmod@divisor+1,7,c
 10804  00310A  D7FA               	goto	l3926
 10805  00310C                     l3930:
 10806  00310C  503E               	movf	___lwmod@divisor,w,c
 10807  00310E  5C3C               	subwf	___lwmod@dividend,w,c
 10808  003110  503F               	movf	___lwmod@divisor+1,w,c
 10809  003112  583D               	subwfb	___lwmod@dividend+1,w,c
 10810  003114  A0D8               	btfss	status,0,c
 10811  003116  D004               	goto	l3934
 10812  003118  503E               	movf	___lwmod@divisor,w,c
 10813  00311A  5E3C               	subwf	___lwmod@dividend,f,c
 10814  00311C  503F               	movf	___lwmod@divisor+1,w,c
 10815  00311E  5A3D               	subwfb	___lwmod@dividend+1,f,c
 10816  003120                     l3934:
 10817  003120  90D8               	bcf	status,0,c
 10818  003122  323F               	rrcf	___lwmod@divisor+1,f,c
 10819  003124  323E               	rrcf	___lwmod@divisor,f,c
 10820  003126  2E40               	decfsz	___lwmod@counter,f,c
 10821  003128  D7F1               	goto	l3930
 10822  00312A                     l986:
 10823  00312A  C03C  F03C         	movff	___lwmod@dividend,?___lwmod
 10824  00312E  C03D  F03D         	movff	___lwmod@dividend+1,?___lwmod+1
 10825  003132  0012               	return		;funcret
 10826  003134                     __end_of___lwmod:
 10827                           	opt stack 0
 10828                           tblptru	equ	0xFF8
 10829                           tblptrh	equ	0xFF7
 10830                           tblptrl	equ	0xFF6
 10831                           tablat	equ	0xFF5
 10832                           prodh	equ	0xFF4
 10833                           prodl	equ	0xFF3
 10834                           intcon	equ	0xFF2
 10835                           intcon2	equ	0xFF1
 10836                           intcon3	equ	0xFF0
 10837                           postinc0	equ	0xFEE
 10838                           wreg	equ	0xFE8
 10839                           indf2	equ	0xFDF
 10840                           postinc2	equ	0xFDE
 10841                           postdec2	equ	0xFDD
 10842                           fsr2h	equ	0xFDA
 10843                           fsr2l	equ	0xFD9
 10844                           status	equ	0xFD8
 10845                           
 10846 ;; *************** function ___lwdiv *****************
 10847 ;; Defined at:
 10848 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwdiv.c"
 10849 ;; Parameters:    Size  Location     Type
 10850 ;;  dividend        2   52[COMRAM] unsigned int 
 10851 ;;  divisor         2   54[COMRAM] unsigned int 
 10852 ;; Auto vars:     Size  Location     Type
 10853 ;;  quotient        2   56[COMRAM] unsigned int 
 10854 ;;  counter         1   58[COMRAM] unsigned char 
 10855 ;; Return value:  Size  Location     Type
 10856 ;;                  2   52[COMRAM] unsigned int 
 10857 ;; Registers used:
 10858 ;;		wreg, status,2, status,0
 10859 ;; Tracked objects:
 10860 ;;		On entry : 0/0
 10861 ;;		On exit  : 0/0
 10862 ;;		Unchanged: 0/0
 10863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10864 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10865 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10867 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10868 ;;Total ram usage:        7 bytes
 10869 ;; Hardware stack levels used:    1
 10870 ;; Hardware stack levels required when called:    5
 10871 ;; This function calls:
 10872 ;;		Nothing
 10873 ;; This function is called by:
 10874 ;;		_printf
 10875 ;; This function uses a non-reentrant model
 10876 ;;
 10877                           
 10878                           	psect	text39
 10879  002E98                     __ptext39:
 10880                           	opt stack 0
 10881  002E98                     ___lwdiv:
 10882                           	opt stack 23
 10883                           
 10884                           ;incstack = 0
 10885  002E98  0E00               	movlw	0
 10886  002E9A  6E3A               	movwf	___lwdiv@quotient+1,c
 10887  002E9C  0E00               	movlw	0
 10888  002E9E  6E39               	movwf	___lwdiv@quotient,c
 10889  002EA0  5037               	movf	___lwdiv@divisor,w,c
 10890  002EA2  1038               	iorwf	___lwdiv@divisor+1,w,c
 10891  002EA4  B4D8               	btfsc	status,2,c
 10892  002EA6  D01C               	goto	l976
 10893  002EA8  0E01               	movlw	1
 10894  002EAA  6E3B               	movwf	___lwdiv@counter,c
 10895  002EAC  D004               	goto	l3908
 10896  002EAE                     l3906:
 10897  002EAE  90D8               	bcf	status,0,c
 10898  002EB0  3637               	rlcf	___lwdiv@divisor,f,c
 10899  002EB2  3638               	rlcf	___lwdiv@divisor+1,f,c
 10900  002EB4  2A3B               	incf	___lwdiv@counter,f,c
 10901  002EB6                     l3908:
 10902  002EB6  AE38               	btfss	___lwdiv@divisor+1,7,c
 10903  002EB8  D7FA               	goto	l3906
 10904  002EBA                     l3910:
 10905  002EBA  90D8               	bcf	status,0,c
 10906  002EBC  3639               	rlcf	___lwdiv@quotient,f,c
 10907  002EBE  363A               	rlcf	___lwdiv@quotient+1,f,c
 10908  002EC0  5037               	movf	___lwdiv@divisor,w,c
 10909  002EC2  5C35               	subwf	___lwdiv@dividend,w,c
 10910  002EC4  5038               	movf	___lwdiv@divisor+1,w,c
 10911  002EC6  5836               	subwfb	___lwdiv@dividend+1,w,c
 10912  002EC8  A0D8               	btfss	status,0,c
 10913  002ECA  D005               	goto	l3918
 10914  002ECC  5037               	movf	___lwdiv@divisor,w,c
 10915  002ECE  5E35               	subwf	___lwdiv@dividend,f,c
 10916  002ED0  5038               	movf	___lwdiv@divisor+1,w,c
 10917  002ED2  5A36               	subwfb	___lwdiv@dividend+1,f,c
 10918  002ED4  8039               	bsf	___lwdiv@quotient,0,c
 10919  002ED6                     l3918:
 10920  002ED6  90D8               	bcf	status,0,c
 10921  002ED8  3238               	rrcf	___lwdiv@divisor+1,f,c
 10922  002EDA  3237               	rrcf	___lwdiv@divisor,f,c
 10923  002EDC  2E3B               	decfsz	___lwdiv@counter,f,c
 10924  002EDE  D7ED               	goto	l3910
 10925  002EE0                     l976:
 10926  002EE0  C039  F035         	movff	___lwdiv@quotient,?___lwdiv
 10927  002EE4  C03A  F036         	movff	___lwdiv@quotient+1,?___lwdiv+1
 10928  002EE8  0012               	return		;funcret
 10929  002EEA                     __end_of___lwdiv:
 10930                           	opt stack 0
 10931                           tblptru	equ	0xFF8
 10932                           tblptrh	equ	0xFF7
 10933                           tblptrl	equ	0xFF6
 10934                           tablat	equ	0xFF5
 10935                           prodh	equ	0xFF4
 10936                           prodl	equ	0xFF3
 10937                           intcon	equ	0xFF2
 10938                           intcon2	equ	0xFF1
 10939                           intcon3	equ	0xFF0
 10940                           postinc0	equ	0xFEE
 10941                           wreg	equ	0xFE8
 10942                           indf2	equ	0xFDF
 10943                           postinc2	equ	0xFDE
 10944                           postdec2	equ	0xFDD
 10945                           fsr2h	equ	0xFDA
 10946                           fsr2l	equ	0xFD9
 10947                           status	equ	0xFD8
 10948                           
 10949 ;; *************** function _opentoplid *****************
 10950 ;; Defined at:
 10951 ;;		line 751 in file "main.c"
 10952 ;; Parameters:    Size  Location     Type
 10953 ;;		None
 10954 ;; Auto vars:     Size  Location     Type
 10955 ;;  i               2   53[COMRAM] unsigned int 
 10956 ;; Return value:  Size  Location     Type
 10957 ;;                  1    wreg      void 
 10958 ;; Registers used:
 10959 ;;		wreg, status,2, status,0
 10960 ;; Tracked objects:
 10961 ;;		On entry : 0/0
 10962 ;;		On exit  : 0/0
 10963 ;;		Unchanged: 0/0
 10964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10966 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10967 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10968 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10969 ;;Total ram usage:        3 bytes
 10970 ;; Hardware stack levels used:    1
 10971 ;; Hardware stack levels required when called:    5
 10972 ;; This function calls:
 10973 ;;		Nothing
 10974 ;; This function is called by:
 10975 ;;		_main
 10976 ;; This function uses a non-reentrant model
 10977 ;;
 10978                           
 10979                           	psect	text40
 10980  0031B6                     __ptext40:
 10981                           	opt stack 0
 10982  0031B6                     _opentoplid:
 10983                           	opt stack 25
 10984                           
 10985                           ;main.c: 753: unsigned int i;
 10986                           ;main.c: 754: for(i=0;i<50;i++)
 10987                           
 10988                           ;incstack = 0
 10989  0031B6  0E00               	movlw	0
 10990  0031B8  6E37               	movwf	opentoplid@i+1,c
 10991  0031BA  0E00               	movlw	0
 10992  0031BC  6E36               	movwf	opentoplid@i,c
 10993  0031BE                     l4508:
 10994  0031BE  5037               	movf	opentoplid@i+1,w,c
 10995  0031C0  E118               	bnz	l463
 10996  0031C2  0E32               	movlw	50
 10997  0031C4  5C36               	subwf	opentoplid@i,w,c
 10998  0031C6  B0D8               	btfsc	status,0,c
 10999  0031C8  0012               	return	
 11000                           
 11001                           ;main.c: 755: {
 11002                           ;main.c: 756: PORTAbits.RA5 = 1;
 11003  0031CA  8A80               	bsf	3968,5,c	;volatile
 11004                           
 11005                           ;main.c: 757: _delay((unsigned long)((1200)*(8000000/4000000.0)));
 11006  0031CC  0E04               	movlw	4
 11007  0031CE  6E35               	movwf	??_opentoplid& (0+255),c
 11008  0031D0  0E1C               	movlw	28
 11009  0031D2                     u7427:
 11010  0031D2  2EE8               	decfsz	wreg,f,c
 11011  0031D4  D7FE               	bra	u7427
 11012  0031D6  2E35               	decfsz	??_opentoplid& (0+255),f,c
 11013  0031D8  D7FC               	bra	u7427
 11014  0031DA  D000               	nop2	
 11015                           
 11016                           ;main.c: 758: PORTAbits.RA5 = 0;
 11017  0031DC  9A80               	bcf	3968,5,c	;volatile
 11018                           
 11019                           ;main.c: 759: _delay((unsigned long)((18800)*(8000000/4000000.0)));
 11020  0031DE  0E31               	movlw	49
 11021  0031E0  6E35               	movwf	??_opentoplid& (0+255),c
 11022  0031E2  0ED4               	movlw	212
 11023  0031E4                     u7437:
 11024  0031E4  2EE8               	decfsz	wreg,f,c
 11025  0031E6  D7FE               	bra	u7437
 11026  0031E8  2E35               	decfsz	??_opentoplid& (0+255),f,c
 11027  0031EA  D7FC               	bra	u7437
 11028  0031EC  4A36               	infsnz	opentoplid@i,f,c
 11029  0031EE  2A37               	incf	opentoplid@i+1,f,c
 11030  0031F0  D7E6               	goto	l4508
 11031  0031F2                     l463:
 11032  0031F2  0012               	return		;funcret
 11033  0031F4                     __end_of_opentoplid:
 11034                           	opt stack 0
 11035                           tblptru	equ	0xFF8
 11036                           tblptrh	equ	0xFF7
 11037                           tblptrl	equ	0xFF6
 11038                           tablat	equ	0xFF5
 11039                           prodh	equ	0xFF4
 11040                           prodl	equ	0xFF3
 11041                           intcon	equ	0xFF2
 11042                           intcon2	equ	0xFF1
 11043                           intcon3	equ	0xFF0
 11044                           postinc0	equ	0xFEE
 11045                           wreg	equ	0xFE8
 11046                           indf2	equ	0xFDF
 11047                           postinc2	equ	0xFDE
 11048                           postdec2	equ	0xFDD
 11049                           fsr2h	equ	0xFDA
 11050                           fsr2l	equ	0xFD9
 11051                           status	equ	0xFD8
 11052                           
 11053 ;; *************** function _openbotlid *****************
 11054 ;; Defined at:
 11055 ;;		line 775 in file "main.c"
 11056 ;; Parameters:    Size  Location     Type
 11057 ;;		None
 11058 ;; Auto vars:     Size  Location     Type
 11059 ;;  i               2   53[COMRAM] unsigned int 
 11060 ;; Return value:  Size  Location     Type
 11061 ;;                  1    wreg      void 
 11062 ;; Registers used:
 11063 ;;		wreg, status,2, status,0
 11064 ;; Tracked objects:
 11065 ;;		On entry : 0/0
 11066 ;;		On exit  : 0/0
 11067 ;;		Unchanged: 0/0
 11068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11070 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11071 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11072 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11073 ;;Total ram usage:        3 bytes
 11074 ;; Hardware stack levels used:    1
 11075 ;; Hardware stack levels required when called:    5
 11076 ;; This function calls:
 11077 ;;		Nothing
 11078 ;; This function is called by:
 11079 ;;		_main
 11080 ;; This function uses a non-reentrant model
 11081 ;;
 11082                           
 11083                           	psect	text41
 11084  0031F4                     __ptext41:
 11085                           	opt stack 0
 11086  0031F4                     _openbotlid:
 11087                           	opt stack 25
 11088                           
 11089                           ;main.c: 777: unsigned int i;
 11090                           ;main.c: 778: for(i=0;i<50;i++)
 11091                           
 11092                           ;incstack = 0
 11093  0031F4  0E00               	movlw	0
 11094  0031F6  6E37               	movwf	openbotlid@i+1,c
 11095  0031F8  0E00               	movlw	0
 11096  0031FA  6E36               	movwf	openbotlid@i,c
 11097  0031FC                     l4530:
 11098  0031FC  5037               	movf	openbotlid@i+1,w,c
 11099  0031FE  E118               	bnz	l473
 11100  003200  0E32               	movlw	50
 11101  003202  5C36               	subwf	openbotlid@i,w,c
 11102  003204  B0D8               	btfsc	status,0,c
 11103  003206  0012               	return	
 11104                           
 11105                           ;main.c: 779: {
 11106                           ;main.c: 780: RC5 = 1;
 11107  003208  8A82               	bsf	3970,5,c	;volatile
 11108                           
 11109                           ;main.c: 781: _delay((unsigned long)((1250)*(8000000/4000000.0)));
 11110  00320A  0E04               	movlw	4
 11111  00320C  6E35               	movwf	??_openbotlid& (0+255),c
 11112  00320E  0E3E               	movlw	62
 11113  003210                     u7447:
 11114  003210  2EE8               	decfsz	wreg,f,c
 11115  003212  D7FE               	bra	u7447
 11116  003214  2E35               	decfsz	??_openbotlid& (0+255),f,c
 11117  003216  D7FC               	bra	u7447
 11118                           
 11119                           ;main.c: 782: RC5 = 0;
 11120  003218  9A82               	bcf	3970,5,c	;volatile
 11121                           
 11122                           ;main.c: 783: _delay((unsigned long)((18750)*(8000000/4000000.0)));
 11123  00321A  0E31               	movlw	49
 11124  00321C  6E35               	movwf	??_openbotlid& (0+255),c
 11125  00321E  0EB2               	movlw	178
 11126  003220                     u7457:
 11127  003220  2EE8               	decfsz	wreg,f,c
 11128  003222  D7FE               	bra	u7457
 11129  003224  2E35               	decfsz	??_openbotlid& (0+255),f,c
 11130  003226  D7FC               	bra	u7457
 11131  003228  D000               	nop2	
 11132  00322A  4A36               	infsnz	openbotlid@i,f,c
 11133  00322C  2A37               	incf	openbotlid@i+1,f,c
 11134  00322E  D7E6               	goto	l4530
 11135  003230                     l473:
 11136  003230  0012               	return		;funcret
 11137  003232                     __end_of_openbotlid:
 11138                           	opt stack 0
 11139                           tblptru	equ	0xFF8
 11140                           tblptrh	equ	0xFF7
 11141                           tblptrl	equ	0xFF6
 11142                           tablat	equ	0xFF5
 11143                           prodh	equ	0xFF4
 11144                           prodl	equ	0xFF3
 11145                           intcon	equ	0xFF2
 11146                           intcon2	equ	0xFF1
 11147                           intcon3	equ	0xFF0
 11148                           postinc0	equ	0xFEE
 11149                           wreg	equ	0xFE8
 11150                           indf2	equ	0xFDF
 11151                           postinc2	equ	0xFDE
 11152                           postdec2	equ	0xFDD
 11153                           fsr2h	equ	0xFDA
 11154                           fsr2l	equ	0xFD9
 11155                           status	equ	0xFD8
 11156                           
 11157 ;; *************** function _lcdclear *****************
 11158 ;; Defined at:
 11159 ;;		line 590 in file "main.c"
 11160 ;; Parameters:    Size  Location     Type
 11161 ;;		None
 11162 ;; Auto vars:     Size  Location     Type
 11163 ;;		None
 11164 ;; Return value:  Size  Location     Type
 11165 ;;                  1    wreg      void 
 11166 ;; Registers used:
 11167 ;;		wreg, status,2, status,0, cstack
 11168 ;; Tracked objects:
 11169 ;;		On entry : 0/0
 11170 ;;		On exit  : 0/0
 11171 ;;		Unchanged: 0/0
 11172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11175 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11176 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11177 ;;Total ram usage:        1 bytes
 11178 ;; Hardware stack levels used:    1
 11179 ;; Hardware stack levels required when called:    7
 11180 ;; This function calls:
 11181 ;;		_lcdInst
 11182 ;; This function is called by:
 11183 ;;		_main
 11184 ;; This function uses a non-reentrant model
 11185 ;;
 11186                           
 11187                           	psect	text42
 11188  003526                     __ptext42:
 11189                           	opt stack 0
 11190  003526                     _lcdclear:
 11191                           	opt stack 23
 11192                           
 11193                           ;main.c: 591: lcdInst(0b00000001);;
 11194                           
 11195                           ;incstack = 0
 11196  003526  0E01               	movlw	1
 11197  003528  ECCE  F01A         	call	_lcdInst
 11198                           
 11199                           ;main.c: 592: _delay((unsigned long)((2)*(8000000/4000.0)));
 11200  00352C  0E06               	movlw	6
 11201  00352E  6E38               	movwf	??_lcdclear& (0+255),c
 11202  003530  0E30               	movlw	48
 11203  003532                     u7467:
 11204  003532  2EE8               	decfsz	wreg,f,c
 11205  003534  D7FE               	bra	u7467
 11206  003536  2E38               	decfsz	??_lcdclear& (0+255),f,c
 11207  003538  D7FC               	bra	u7467
 11208  00353A  D000               	nop2	
 11209  00353C  0012               	return		;funcret
 11210  00353E                     __end_of_lcdclear:
 11211                           	opt stack 0
 11212                           tblptru	equ	0xFF8
 11213                           tblptrh	equ	0xFF7
 11214                           tblptrl	equ	0xFF6
 11215                           tablat	equ	0xFF5
 11216                           prodh	equ	0xFF4
 11217                           prodl	equ	0xFF3
 11218                           intcon	equ	0xFF2
 11219                           intcon2	equ	0xFF1
 11220                           intcon3	equ	0xFF0
 11221                           postinc0	equ	0xFEE
 11222                           wreg	equ	0xFE8
 11223                           indf2	equ	0xFDF
 11224                           postinc2	equ	0xFDE
 11225                           postdec2	equ	0xFDD
 11226                           fsr2h	equ	0xFDA
 11227                           fsr2l	equ	0xFD9
 11228                           status	equ	0xFD8
 11229                           
 11230 ;; *************** function _key_release *****************
 11231 ;; Defined at:
 11232 ;;		line 687 in file "main.c"
 11233 ;; Parameters:    Size  Location     Type
 11234 ;;		None
 11235 ;; Auto vars:     Size  Location     Type
 11236 ;;		None
 11237 ;; Return value:  Size  Location     Type
 11238 ;;                  1    wreg      void 
 11239 ;; Registers used:
 11240 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 11241 ;; Tracked objects:
 11242 ;;		On entry : 0/0
 11243 ;;		On exit  : 0/0
 11244 ;;		Unchanged: 0/0
 11245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11248 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11249 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11250 ;;Total ram usage:        2 bytes
 11251 ;; Hardware stack levels used:    1
 11252 ;; Hardware stack levels required when called:    5
 11253 ;; This function calls:
 11254 ;;		Nothing
 11255 ;; This function is called by:
 11256 ;;		_main
 11257 ;; This function uses a non-reentrant model
 11258 ;;
 11259                           
 11260                           	psect	text43
 11261  00339E                     __ptext43:
 11262                           	opt stack 0
 11263  00339E                     _key_release:
 11264                           	opt stack 25
 11265                           
 11266                           ;main.c: 689: while(PORTBbits.RB1 == 1){
 11267                           
 11268                           ;incstack = 0
 11269  00339E  D00E               	goto	l4450
 11270  0033A0                     l4448:
 11271                           
 11272                           ;main.c: 691: pressed = keys[(PORTB & 0xF0)>>4];
 11273  0033A0  3881               	swapf	3969,w,c	;volatile
 11274  0033A2  0B0F               	andlw	15
 11275  0033A4  0B0F               	andlw	15
 11276  0033A6  6E35               	movwf	??_key_release& (0+255),c
 11277  0033A8  6A36               	clrf	(??_key_release+1)& (0+255),c
 11278  0033AA  0E43               	movlw	low _keys
 11279  0033AC  2435               	addwf	??_key_release,w,c
 11280  0033AE  6EF6               	movwf	tblptrl,c
 11281  0033B0  0EFD               	movlw	high _keys
 11282  0033B2  2036               	addwfc	??_key_release+1,w,c
 11283  0033B4  6EF7               	movwf	tblptrh,c
 11284  0033B6                     	if	0	;There are less than 3 active tblptr bytes
 11285  0033B6                     	endif
 11286  0033B6  0008               	tblrd		*
 11287  0033B8  CFF5 F11B          	movff	tablat,_pressed
 11288  0033BC                     l4450:
 11289  0033BC  B281               	btfsc	3969,1,c	;volatile
 11290  0033BE  D7F0               	goto	l4448
 11291                           
 11292                           ;main.c: 692: }
 11293                           ;main.c: 693: __nop();
 11294  0033C0  F000               	nop	
 11295                           
 11296                           ;main.c: 694: __nop();
 11297  0033C2  F000               	nop	
 11298  0033C4  0012               	return		;funcret
 11299  0033C6                     __end_of_key_release:
 11300                           	opt stack 0
 11301                           tblptru	equ	0xFF8
 11302                           tblptrh	equ	0xFF7
 11303                           tblptrl	equ	0xFF6
 11304                           tablat	equ	0xFF5
 11305                           prodh	equ	0xFF4
 11306                           prodl	equ	0xFF3
 11307                           intcon	equ	0xFF2
 11308                           intcon2	equ	0xFF1
 11309                           intcon3	equ	0xFF0
 11310                           postinc0	equ	0xFEE
 11311                           wreg	equ	0xFE8
 11312                           indf2	equ	0xFDF
 11313                           postinc2	equ	0xFDE
 11314                           postdec2	equ	0xFDD
 11315                           fsr2h	equ	0xFDA
 11316                           fsr2l	equ	0xFD9
 11317                           status	equ	0xFD8
 11318                           
 11319 ;; *************** function _initLCD *****************
 11320 ;; Defined at:
 11321 ;;		line 14 in file "lcd.c"
 11322 ;; Parameters:    Size  Location     Type
 11323 ;;		None
 11324 ;; Auto vars:     Size  Location     Type
 11325 ;;		None
 11326 ;; Return value:  Size  Location     Type
 11327 ;;                  1    wreg      void 
 11328 ;; Registers used:
 11329 ;;		wreg, status,2, status,0, cstack
 11330 ;; Tracked objects:
 11331 ;;		On entry : 0/0
 11332 ;;		On exit  : 0/0
 11333 ;;		Unchanged: 0/0
 11334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11337 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11338 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11339 ;;Total ram usage:        1 bytes
 11340 ;; Hardware stack levels used:    1
 11341 ;; Hardware stack levels required when called:    7
 11342 ;; This function calls:
 11343 ;;		_lcdInst
 11344 ;; This function is called by:
 11345 ;;		_main
 11346 ;; This function uses a non-reentrant model
 11347 ;;
 11348                           
 11349                           	psect	text44
 11350  003024                     __ptext44:
 11351                           	opt stack 0
 11352  003024                     _initLCD:
 11353                           	opt stack 23
 11354                           
 11355                           ;lcd.c: 15: _delay((unsigned long)((15)*(8000000/4000.0)));
 11356                           
 11357                           ;incstack = 0
 11358  003024  0E27               	movlw	39
 11359  003026  6E38               	movwf	??_initLCD& (0+255),c
 11360  003028  0EF5               	movlw	245
 11361  00302A                     u7477:
 11362  00302A  2EE8               	decfsz	wreg,f,c
 11363  00302C  D7FE               	bra	u7477
 11364  00302E  2E38               	decfsz	??_initLCD& (0+255),f,c
 11365  003030  D7FC               	bra	u7477
 11366  003032  F000               	nop	
 11367                           
 11368                           ;lcd.c: 17: lcdInst(0b00110011);
 11369  003034  0E33               	movlw	51
 11370  003036  ECCE  F01A         	call	_lcdInst
 11371                           
 11372                           ;lcd.c: 18: lcdInst(0b00110010);
 11373  00303A  0E32               	movlw	50
 11374  00303C  ECCE  F01A         	call	_lcdInst
 11375                           
 11376                           ;lcd.c: 19: lcdInst(0b00101000);
 11377  003040  0E28               	movlw	40
 11378  003042  ECCE  F01A         	call	_lcdInst
 11379                           
 11380                           ;lcd.c: 20: lcdInst(0b00001111);
 11381  003046  0E0F               	movlw	15
 11382  003048  ECCE  F01A         	call	_lcdInst
 11383                           
 11384                           ;lcd.c: 21: lcdInst(0b00000110);
 11385  00304C  0E06               	movlw	6
 11386  00304E  ECCE  F01A         	call	_lcdInst
 11387                           
 11388                           ;lcd.c: 22: lcdInst(0b00000001);
 11389  003052  0E01               	movlw	1
 11390  003054  ECCE  F01A         	call	_lcdInst
 11391                           
 11392                           ;lcd.c: 23: _delay((unsigned long)((15)*(8000000/4000.0)));
 11393  003058  0E27               	movlw	39
 11394  00305A  6E38               	movwf	??_initLCD& (0+255),c
 11395  00305C  0EF5               	movlw	245
 11396  00305E                     u7487:
 11397  00305E  2EE8               	decfsz	wreg,f,c
 11398  003060  D7FE               	bra	u7487
 11399  003062  2E38               	decfsz	??_initLCD& (0+255),f,c
 11400  003064  D7FC               	bra	u7487
 11401  003066  F000               	nop	
 11402  003068  0012               	return		;funcret
 11403  00306A                     __end_of_initLCD:
 11404                           	opt stack 0
 11405                           tblptru	equ	0xFF8
 11406                           tblptrh	equ	0xFF7
 11407                           tblptrl	equ	0xFF6
 11408                           tablat	equ	0xFF5
 11409                           prodh	equ	0xFF4
 11410                           prodl	equ	0xFF3
 11411                           intcon	equ	0xFF2
 11412                           intcon2	equ	0xFF1
 11413                           intcon3	equ	0xFF0
 11414                           postinc0	equ	0xFEE
 11415                           wreg	equ	0xFE8
 11416                           indf2	equ	0xFDF
 11417                           postinc2	equ	0xFDE
 11418                           postdec2	equ	0xFDD
 11419                           fsr2h	equ	0xFDA
 11420                           fsr2l	equ	0xFD9
 11421                           status	equ	0xFD8
 11422                           
 11423 ;; *************** function _lcdInst *****************
 11424 ;; Defined at:
 11425 ;;		line 26 in file "lcd.c"
 11426 ;; Parameters:    Size  Location     Type
 11427 ;;  data            1    wreg     unsigned char 
 11428 ;; Auto vars:     Size  Location     Type
 11429 ;;  data            1   54[COMRAM] unsigned char 
 11430 ;; Return value:  Size  Location     Type
 11431 ;;                  1    wreg      void 
 11432 ;; Registers used:
 11433 ;;		wreg, status,2, status,0, cstack
 11434 ;; Tracked objects:
 11435 ;;		On entry : 0/0
 11436 ;;		On exit  : 0/0
 11437 ;;		Unchanged: 0/0
 11438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11440 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11442 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11443 ;;Total ram usage:        1 bytes
 11444 ;; Hardware stack levels used:    1
 11445 ;; Hardware stack levels required when called:    6
 11446 ;; This function calls:
 11447 ;;		_lcdNibble
 11448 ;; This function is called by:
 11449 ;;		_initLCD
 11450 ;;		_main
 11451 ;;		_lcdclear
 11452 ;;		_standby_mode
 11453 ;;		_print
 11454 ;; This function uses a non-reentrant model
 11455 ;;
 11456                           
 11457                           	psect	text45
 11458  00359C                     __ptext45:
 11459                           	opt stack 0
 11460  00359C                     _lcdInst:
 11461                           	opt stack 23
 11462                           
 11463                           ;incstack = 0
 11464                           ;lcdInst@data stored from wreg
 11465  00359C  6E37               	movwf	lcdInst@data,c
 11466                           
 11467                           ;lcd.c: 27: LATDbits.LATD2 = 0;
 11468  00359E  948C               	bcf	3980,2,c	;volatile
 11469                           
 11470                           ;lcd.c: 28: lcdNibble(data);
 11471  0035A0  5037               	movf	lcdInst@data,w,c
 11472  0035A2  EC9E  F017         	call	_lcdNibble
 11473  0035A6  0012               	return		;funcret
 11474  0035A8                     __end_of_lcdInst:
 11475                           	opt stack 0
 11476                           tblptru	equ	0xFF8
 11477                           tblptrh	equ	0xFF7
 11478                           tblptrl	equ	0xFF6
 11479                           tablat	equ	0xFF5
 11480                           prodh	equ	0xFF4
 11481                           prodl	equ	0xFF3
 11482                           intcon	equ	0xFF2
 11483                           intcon2	equ	0xFF1
 11484                           intcon3	equ	0xFF0
 11485                           postinc0	equ	0xFEE
 11486                           wreg	equ	0xFE8
 11487                           indf2	equ	0xFDF
 11488                           postinc2	equ	0xFDE
 11489                           postdec2	equ	0xFDD
 11490                           fsr2h	equ	0xFDA
 11491                           fsr2l	equ	0xFD9
 11492                           status	equ	0xFD8
 11493                           
 11494 ;; *************** function _lcdNibble *****************
 11495 ;; Defined at:
 11496 ;;		line 36 in file "lcd.c"
 11497 ;; Parameters:    Size  Location     Type
 11498 ;;  data            1    wreg     unsigned char 
 11499 ;; Auto vars:     Size  Location     Type
 11500 ;;  data            1   53[COMRAM] unsigned char 
 11501 ;;  temp            1   52[COMRAM] unsigned char 
 11502 ;; Return value:  Size  Location     Type
 11503 ;;                  1    wreg      void 
 11504 ;; Registers used:
 11505 ;;		wreg, status,2, status,0
 11506 ;; Tracked objects:
 11507 ;;		On entry : 0/0
 11508 ;;		On exit  : 0/0
 11509 ;;		Unchanged: 0/0
 11510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11512 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11514 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11515 ;;Total ram usage:        2 bytes
 11516 ;; Hardware stack levels used:    1
 11517 ;; Hardware stack levels required when called:    5
 11518 ;; This function calls:
 11519 ;;		Nothing
 11520 ;; This function is called by:
 11521 ;;		_lcdInst
 11522 ;;		_putch
 11523 ;; This function uses a non-reentrant model
 11524 ;;
 11525                           
 11526                           	psect	text46
 11527  002F3C                     __ptext46:
 11528                           	opt stack 0
 11529  002F3C                     _lcdNibble:
 11530                           	opt stack 22
 11531                           
 11532                           ;incstack = 0
 11533                           ;lcdNibble@data stored from wreg
 11534  002F3C  6E36               	movwf	lcdNibble@data,c
 11535                           
 11536                           ;lcd.c: 38: char temp = data & 0xF0;
 11537  002F3E  5036               	movf	lcdNibble@data,w,c
 11538  002F40  0BF0               	andlw	240
 11539  002F42  6E35               	movwf	lcdNibble@temp,c
 11540                           
 11541                           ;lcd.c: 39: LATD = LATD & 0x0F;
 11542  002F44  508C               	movf	3980,w,c	;volatile
 11543  002F46  0B0F               	andlw	15
 11544  002F48  6E8C               	movwf	3980,c	;volatile
 11545                           
 11546                           ;lcd.c: 40: LATD = temp | LATD;
 11547  002F4A  5035               	movf	lcdNibble@temp,w,c
 11548  002F4C  108C               	iorwf	3980,w,c	;volatile
 11549  002F4E  6E8C               	movwf	3980,c	;volatile
 11550                           
 11551                           ;lcd.c: 42: LATDbits.LATD3 = 0;
 11552  002F50  968C               	bcf	3980,3,c	;volatile
 11553                           
 11554                           ;lcd.c: 43: _delay((unsigned long)((30)*(8000000/4000000.0)));
 11555  002F52  0E14               	movlw	20
 11556  002F54                     u7497:
 11557  002F54  2EE8               	decfsz	wreg,f,c
 11558  002F56  D7FE               	bra	u7497
 11559                           
 11560                           ;lcd.c: 44: LATDbits.LATD3 = 1;
 11561  002F58  868C               	bsf	3980,3,c	;volatile
 11562                           
 11563                           ;lcd.c: 45: _delay((unsigned long)((30)*(8000000/4000000.0)));
 11564  002F5A  0E14               	movlw	20
 11565  002F5C                     u7507:
 11566  002F5C  2EE8               	decfsz	wreg,f,c
 11567  002F5E  D7FE               	bra	u7507
 11568                           
 11569                           ;lcd.c: 47: data = data << 4;
 11570  002F60  3836               	swapf	lcdNibble@data,w,c
 11571  002F62  0BF0               	andlw	240
 11572  002F64  6E36               	movwf	lcdNibble@data,c
 11573                           
 11574                           ;lcd.c: 49: temp = data & 0xF0;
 11575  002F66  5036               	movf	lcdNibble@data,w,c
 11576  002F68  0BF0               	andlw	240
 11577  002F6A  6E35               	movwf	lcdNibble@temp,c
 11578                           
 11579                           ;lcd.c: 50: LATD = LATD & 0x0F;
 11580  002F6C  508C               	movf	3980,w,c	;volatile
 11581  002F6E  0B0F               	andlw	15
 11582  002F70  6E8C               	movwf	3980,c	;volatile
 11583                           
 11584                           ;lcd.c: 51: LATD = temp | LATD;
 11585  002F72  5035               	movf	lcdNibble@temp,w,c
 11586  002F74  108C               	iorwf	3980,w,c	;volatile
 11587  002F76  6E8C               	movwf	3980,c	;volatile
 11588                           
 11589                           ;lcd.c: 53: LATDbits.LATD3 = 0;
 11590  002F78  968C               	bcf	3980,3,c	;volatile
 11591                           
 11592                           ;lcd.c: 54: _delay((unsigned long)((30)*(8000000/4000000.0)));
 11593  002F7A  0E14               	movlw	20
 11594  002F7C                     u7517:
 11595  002F7C  2EE8               	decfsz	wreg,f,c
 11596  002F7E  D7FE               	bra	u7517
 11597                           
 11598                           ;lcd.c: 55: LATDbits.LATD3 = 1;
 11599  002F80  868C               	bsf	3980,3,c	;volatile
 11600                           
 11601                           ;lcd.c: 56: _delay((unsigned long)((30)*(8000000/4000000.0)));
 11602  002F82  0E14               	movlw	20
 11603  002F84                     u7527:
 11604  002F84  2EE8               	decfsz	wreg,f,c
 11605  002F86  D7FE               	bra	u7527
 11606  002F88  0012               	return		;funcret
 11607  002F8A                     __end_of_lcdNibble:
 11608                           	opt stack 0
 11609                           tblptru	equ	0xFF8
 11610                           tblptrh	equ	0xFF7
 11611                           tblptrl	equ	0xFF6
 11612                           tablat	equ	0xFF5
 11613                           prodh	equ	0xFF4
 11614                           prodl	equ	0xFF3
 11615                           intcon	equ	0xFF2
 11616                           intcon2	equ	0xFF1
 11617                           intcon3	equ	0xFF0
 11618                           postinc0	equ	0xFEE
 11619                           wreg	equ	0xFE8
 11620                           indf2	equ	0xFDF
 11621                           postinc2	equ	0xFDE
 11622                           postdec2	equ	0xFDD
 11623                           fsr2h	equ	0xFDA
 11624                           fsr2l	equ	0xFD9
 11625                           status	equ	0xFD8
 11626                           
 11627 ;; *************** function _delay *****************
 11628 ;; Defined at:
 11629 ;;		line 654 in file "main.c"
 11630 ;; Parameters:    Size  Location     Type
 11631 ;;  seconds         2   52[COMRAM] int 
 11632 ;; Auto vars:     Size  Location     Type
 11633 ;;  i               1   57[COMRAM] unsigned char 
 11634 ;;  i               2   55[COMRAM] int 
 11635 ;; Return value:  Size  Location     Type
 11636 ;;                  1    wreg      void 
 11637 ;; Registers used:
 11638 ;;		wreg, status,2, status,0
 11639 ;; Tracked objects:
 11640 ;;		On entry : 0/0
 11641 ;;		On exit  : 0/0
 11642 ;;		Unchanged: 0/0
 11643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11644 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11645 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11646 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11647 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11648 ;;Total ram usage:        6 bytes
 11649 ;; Hardware stack levels used:    1
 11650 ;; Hardware stack levels required when called:    5
 11651 ;; This function calls:
 11652 ;;		Nothing
 11653 ;; This function is called by:
 11654 ;;		_main
 11655 ;; This function uses a non-reentrant model
 11656 ;;
 11657                           
 11658                           	psect	text47
 11659  00306A                     __ptext47:
 11660                           	opt stack 0
 11661  00306A                     _delay:
 11662                           	opt stack 25
 11663                           
 11664                           ;main.c: 655: for (int i = 0; i <= seconds; i ++) {
 11665                           
 11666                           ;incstack = 0
 11667  00306A  0E00               	movlw	0
 11668  00306C  6E39               	movwf	delay@i+1,c
 11669  00306E  0E00               	movlw	0
 11670  003070  6E38               	movwf	delay@i,c
 11671  003072  D012               	goto	l4478
 11672  003074                     l4466:
 11673                           
 11674                           ;main.c: 656: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(8000000/4000.0)));};
 11675  003074  0E00               	movlw	0
 11676  003076  6E3A               	movwf	delay@i_822,c
 11677  003078                     l4468:
 11678  003078  0E63               	movlw	99
 11679  00307A  643A               	cpfsgt	delay@i_822,c
 11680  00307C  D001               	goto	l4472
 11681  00307E  D00A               	goto	l4476
 11682  003080                     l4472:
 11683  003080  0E1A               	movlw	26
 11684  003082  6E37               	movwf	??_delay& (0+255),c
 11685  003084  0EF8               	movlw	248
 11686  003086                     u7537:
 11687  003086  2EE8               	decfsz	wreg,f,c
 11688  003088  D7FE               	bra	u7537
 11689  00308A  2E37               	decfsz	??_delay& (0+255),f,c
 11690  00308C  D7FC               	bra	u7537
 11691  00308E  D000               	nop2	
 11692  003090  2A3A               	incf	delay@i_822,f,c
 11693  003092  D7F2               	goto	l4468
 11694  003094                     l4476:
 11695  003094  4A38               	infsnz	delay@i,f,c
 11696  003096  2A39               	incf	delay@i+1,f,c
 11697  003098                     l4478:
 11698  003098  5038               	movf	delay@i,w,c
 11699  00309A  5C35               	subwf	delay@seconds,w,c
 11700  00309C  5036               	movf	delay@seconds+1,w,c
 11701  00309E  0A80               	xorlw	128
 11702  0030A0  6E37               	movwf	??_delay& (0+255),c
 11703  0030A2  5039               	movf	delay@i+1,w,c
 11704  0030A4  0A80               	xorlw	128
 11705  0030A6  5837               	subwfb	??_delay& (0+255),w,c
 11706  0030A8  A0D8               	btfss	status,0,c
 11707  0030AA  0012               	return	
 11708  0030AC  D7E3               	goto	l4466
 11709  0030AE                     __end_of_delay:
 11710                           	opt stack 0
 11711                           tblptru	equ	0xFF8
 11712                           tblptrh	equ	0xFF7
 11713                           tblptrl	equ	0xFF6
 11714                           tablat	equ	0xFF5
 11715                           prodh	equ	0xFF4
 11716                           prodl	equ	0xFF3
 11717                           intcon	equ	0xFF2
 11718                           intcon2	equ	0xFF1
 11719                           intcon3	equ	0xFF0
 11720                           postinc0	equ	0xFEE
 11721                           wreg	equ	0xFE8
 11722                           indf2	equ	0xFDF
 11723                           postinc2	equ	0xFDE
 11724                           postdec2	equ	0xFDD
 11725                           fsr2h	equ	0xFDA
 11726                           fsr2l	equ	0xFD9
 11727                           status	equ	0xFD8
 11728                           
 11729 ;; *************** function _closetoplid *****************
 11730 ;; Defined at:
 11731 ;;		line 763 in file "main.c"
 11732 ;; Parameters:    Size  Location     Type
 11733 ;;		None
 11734 ;; Auto vars:     Size  Location     Type
 11735 ;;  i               2   53[COMRAM] unsigned int 
 11736 ;; Return value:  Size  Location     Type
 11737 ;;                  1    wreg      void 
 11738 ;; Registers used:
 11739 ;;		wreg, status,2, status,0
 11740 ;; Tracked objects:
 11741 ;;		On entry : 0/0
 11742 ;;		On exit  : 0/0
 11743 ;;		Unchanged: 0/0
 11744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11746 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11747 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11748 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11749 ;;Total ram usage:        3 bytes
 11750 ;; Hardware stack levels used:    1
 11751 ;; Hardware stack levels required when called:    5
 11752 ;; This function calls:
 11753 ;;		Nothing
 11754 ;; This function is called by:
 11755 ;;		_main
 11756 ;; This function uses a non-reentrant model
 11757 ;;
 11758                           
 11759                           	psect	text48
 11760  003232                     __ptext48:
 11761                           	opt stack 0
 11762  003232                     _closetoplid:
 11763                           	opt stack 25
 11764                           
 11765                           ;main.c: 765: unsigned int i;
 11766                           ;main.c: 766: for(i=0;i<50;i++)
 11767                           
 11768                           ;incstack = 0
 11769  003232  0E00               	movlw	0
 11770  003234  6E37               	movwf	closetoplid@i+1,c
 11771  003236  0E00               	movlw	0
 11772  003238  6E36               	movwf	closetoplid@i,c
 11773  00323A                     l4542:
 11774  00323A  5037               	movf	closetoplid@i+1,w,c
 11775  00323C  E118               	bnz	l468
 11776  00323E  0E32               	movlw	50
 11777  003240  5C36               	subwf	closetoplid@i,w,c
 11778  003242  B0D8               	btfsc	status,0,c
 11779  003244  0012               	return	
 11780                           
 11781                           ;main.c: 767: {
 11782                           ;main.c: 768: PORTAbits.RA5 = 1;
 11783  003246  8A80               	bsf	3968,5,c	;volatile
 11784                           
 11785                           ;main.c: 769: _delay((unsigned long)((2700)*(8000000/4000000.0)));
 11786  003248  0E08               	movlw	8
 11787  00324A  6E35               	movwf	??_closetoplid& (0+255),c
 11788  00324C  0E02               	movlw	2
 11789  00324E                     u7547:
 11790  00324E  2EE8               	decfsz	wreg,f,c
 11791  003250  D7FE               	bra	u7547
 11792  003252  2E35               	decfsz	??_closetoplid& (0+255),f,c
 11793  003254  D7FC               	bra	u7547
 11794                           
 11795                           ;main.c: 770: PORTAbits.RA5 = 0;
 11796  003256  9A80               	bcf	3968,5,c	;volatile
 11797                           
 11798                           ;main.c: 771: _delay((unsigned long)((17300)*(8000000/4000000.0)));
 11799  003258  0E2D               	movlw	45
 11800  00325A  6E35               	movwf	??_closetoplid& (0+255),c
 11801  00325C  0EEE               	movlw	238
 11802  00325E                     u7557:
 11803  00325E  2EE8               	decfsz	wreg,f,c
 11804  003260  D7FE               	bra	u7557
 11805  003262  2E35               	decfsz	??_closetoplid& (0+255),f,c
 11806  003264  D7FC               	bra	u7557
 11807  003266  D000               	nop2	
 11808  003268  4A36               	infsnz	closetoplid@i,f,c
 11809  00326A  2A37               	incf	closetoplid@i+1,f,c
 11810  00326C  D7E6               	goto	l4542
 11811  00326E                     l468:
 11812  00326E  0012               	return		;funcret
 11813  003270                     __end_of_closetoplid:
 11814                           	opt stack 0
 11815                           tblptru	equ	0xFF8
 11816                           tblptrh	equ	0xFF7
 11817                           tblptrl	equ	0xFF6
 11818                           tablat	equ	0xFF5
 11819                           prodh	equ	0xFF4
 11820                           prodl	equ	0xFF3
 11821                           intcon	equ	0xFF2
 11822                           intcon2	equ	0xFF1
 11823                           intcon3	equ	0xFF0
 11824                           postinc0	equ	0xFEE
 11825                           wreg	equ	0xFE8
 11826                           indf2	equ	0xFDF
 11827                           postinc2	equ	0xFDE
 11828                           postdec2	equ	0xFDD
 11829                           fsr2h	equ	0xFDA
 11830                           fsr2l	equ	0xFD9
 11831                           status	equ	0xFD8
 11832                           
 11833 ;; *************** function _closebotlid *****************
 11834 ;; Defined at:
 11835 ;;		line 787 in file "main.c"
 11836 ;; Parameters:    Size  Location     Type
 11837 ;;		None
 11838 ;; Auto vars:     Size  Location     Type
 11839 ;;  i               2   53[COMRAM] unsigned int 
 11840 ;; Return value:  Size  Location     Type
 11841 ;;                  1    wreg      void 
 11842 ;; Registers used:
 11843 ;;		wreg, status,2, status,0
 11844 ;; Tracked objects:
 11845 ;;		On entry : 0/0
 11846 ;;		On exit  : 0/0
 11847 ;;		Unchanged: 0/0
 11848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11850 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11851 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11852 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11853 ;;Total ram usage:        3 bytes
 11854 ;; Hardware stack levels used:    1
 11855 ;; Hardware stack levels required when called:    5
 11856 ;; This function calls:
 11857 ;;		Nothing
 11858 ;; This function is called by:
 11859 ;;		_main
 11860 ;; This function uses a non-reentrant model
 11861 ;;
 11862                           
 11863                           	psect	text49
 11864  003270                     __ptext49:
 11865                           	opt stack 0
 11866  003270                     _closebotlid:
 11867                           	opt stack 25
 11868                           
 11869                           ;main.c: 789: unsigned int i;
 11870                           ;main.c: 790: for(i=0;i<50;i++)
 11871                           
 11872                           ;incstack = 0
 11873  003270  0E00               	movlw	0
 11874  003272  6E37               	movwf	closebotlid@i+1,c
 11875  003274  0E00               	movlw	0
 11876  003276  6E36               	movwf	closebotlid@i,c
 11877  003278                     l4496:
 11878  003278  5037               	movf	closebotlid@i+1,w,c
 11879  00327A  E118               	bnz	l478
 11880  00327C  0E32               	movlw	50
 11881  00327E  5C36               	subwf	closebotlid@i,w,c
 11882  003280  B0D8               	btfsc	status,0,c
 11883  003282  0012               	return	
 11884                           
 11885                           ;main.c: 791: {
 11886                           ;main.c: 792: RC5 = 1;
 11887  003284  8A82               	bsf	3970,5,c	;volatile
 11888                           
 11889                           ;main.c: 793: _delay((unsigned long)((2700)*(8000000/4000000.0)));
 11890  003286  0E08               	movlw	8
 11891  003288  6E35               	movwf	??_closebotlid& (0+255),c
 11892  00328A  0E02               	movlw	2
 11893  00328C                     u7567:
 11894  00328C  2EE8               	decfsz	wreg,f,c
 11895  00328E  D7FE               	bra	u7567
 11896  003290  2E35               	decfsz	??_closebotlid& (0+255),f,c
 11897  003292  D7FC               	bra	u7567
 11898                           
 11899                           ;main.c: 794: RC5 = 0;
 11900  003294  9A82               	bcf	3970,5,c	;volatile
 11901                           
 11902                           ;main.c: 795: _delay((unsigned long)((17300)*(8000000/4000000.0)));
 11903  003296  0E2D               	movlw	45
 11904  003298  6E35               	movwf	??_closebotlid& (0+255),c
 11905  00329A  0EEE               	movlw	238
 11906  00329C                     u7577:
 11907  00329C  2EE8               	decfsz	wreg,f,c
 11908  00329E  D7FE               	bra	u7577
 11909  0032A0  2E35               	decfsz	??_closebotlid& (0+255),f,c
 11910  0032A2  D7FC               	bra	u7577
 11911  0032A4  D000               	nop2	
 11912  0032A6  4A36               	infsnz	closebotlid@i,f,c
 11913  0032A8  2A37               	incf	closebotlid@i+1,f,c
 11914  0032AA  D7E6               	goto	l4496
 11915  0032AC                     l478:
 11916  0032AC  0012               	return		;funcret
 11917  0032AE                     __end_of_closebotlid:
 11918                           	opt stack 0
 11919                           tblptru	equ	0xFF8
 11920                           tblptrh	equ	0xFF7
 11921                           tblptrl	equ	0xFF6
 11922                           tablat	equ	0xFF5
 11923                           prodh	equ	0xFF4
 11924                           prodl	equ	0xFF3
 11925                           intcon	equ	0xFF2
 11926                           intcon2	equ	0xFF1
 11927                           intcon3	equ	0xFF0
 11928                           postinc0	equ	0xFEE
 11929                           wreg	equ	0xFE8
 11930                           indf2	equ	0xFDF
 11931                           postinc2	equ	0xFDE
 11932                           postdec2	equ	0xFDD
 11933                           fsr2h	equ	0xFDA
 11934                           fsr2l	equ	0xFD9
 11935                           status	equ	0xFD8
 11936                           
 11937 ;; *************** function _I2C_Master_Init *****************
 11938 ;; Defined at:
 11939 ;;		line 13 in file "I2C.c"
 11940 ;; Parameters:    Size  Location     Type
 11941 ;;  c               4   65[COMRAM] const unsigned long 
 11942 ;; Auto vars:     Size  Location     Type
 11943 ;;		None
 11944 ;; Return value:  Size  Location     Type
 11945 ;;                  1    wreg      void 
 11946 ;; Registers used:
 11947 ;;		wreg, status,2, status,0, cstack
 11948 ;; Tracked objects:
 11949 ;;		On entry : 0/0
 11950 ;;		On exit  : 0/0
 11951 ;;		Unchanged: 0/0
 11952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11953 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11955 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11956 ;;      Totals:         4       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11957 ;;Total ram usage:        8 bytes
 11958 ;; Hardware stack levels used:    1
 11959 ;; Hardware stack levels required when called:    6
 11960 ;; This function calls:
 11961 ;;		___lldiv
 11962 ;; This function is called by:
 11963 ;;		_main
 11964 ;; This function uses a non-reentrant model
 11965 ;;
 11966                           
 11967                           	psect	text50
 11968  002E3C                     __ptext50:
 11969                           	opt stack 0
 11970  002E3C                     _I2C_Master_Init:
 11971                           	opt stack 24
 11972                           
 11973                           ;I2C.c: 16: SSPSTAT = 0b00000000;
 11974                           
 11975                           ;incstack = 0
 11976  002E3C  0E00               	movlw	0
 11977  002E3E  6EC7               	movwf	4039,c	;volatile
 11978                           
 11979                           ;I2C.c: 17: SSPCON1 = 0b00101000;
 11980  002E40  0E28               	movlw	40
 11981  002E42  6EC6               	movwf	4038,c	;volatile
 11982                           
 11983                           ;I2C.c: 18: SSPCON2 = 0b00000000;
 11984  002E44  0E00               	movlw	0
 11985  002E46  6EC5               	movwf	4037,c	;volatile
 11986                           
 11987                           ;I2C.c: 19: SSPADD = (8000000/(4*c))-1;
 11988  002E48  0E00               	movlw	0
 11989  002E4A  6E35               	movwf	___lldiv@dividend,c
 11990  002E4C  0E12               	movlw	18
 11991  002E4E  6E36               	movwf	___lldiv@dividend+1,c
 11992  002E50  0E7A               	movlw	122
 11993  002E52  6E37               	movwf	___lldiv@dividend+2,c
 11994  002E54  0E00               	movlw	0
 11995  002E56  6E38               	movwf	___lldiv@dividend+3,c
 11996  002E58  C042  F080         	movff	I2C_Master_Init@c,??_I2C_Master_Init
 11997  002E5C  C043  F081         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
 11998  002E60  C044  F082         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
 11999  002E64  C045  F083         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
 12000  002E68  0E02               	movlw	2
 12001  002E6A                     u6455:
 12002  002E6A  90D8               	bcf	status,0,c
 12003  002E6C  0100               	movlb	0	; () banked
 12004  002E6E  3780               	rlcf	??_I2C_Master_Init& (0+255),f,b
 12005  002E70  3781               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
 12006  002E72  3782               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
 12007  002E74  3783               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
 12008  002E76  2EE8               	decfsz	wreg,f,c
 12009  002E78  D7F8               	goto	u6455
 12010  002E7A  C080  F039         	movff	??_I2C_Master_Init,___lldiv@divisor
 12011  002E7E  C081  F03A         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 12012  002E82  C082  F03B         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 12013  002E86  C083  F03C         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 12014  002E8A  EC3D  F016         	call	___lldiv	;wreg free
 12015  002E8E  0435               	decf	?___lldiv,w,c
 12016  002E90  6EC8               	movwf	4040,c	;volatile
 12017                           
 12018                           ;I2C.c: 20: TRISC3 = 1;
 12019  002E92  8694               	bsf	3988,3,c	;volatile
 12020                           
 12021                           ;I2C.c: 21: TRISC4 = 1;
 12022  002E94  8894               	bsf	3988,4,c	;volatile
 12023  002E96  0012               	return		;funcret
 12024  002E98                     __end_of_I2C_Master_Init:
 12025                           	opt stack 0
 12026                           tblptru	equ	0xFF8
 12027                           tblptrh	equ	0xFF7
 12028                           tblptrl	equ	0xFF6
 12029                           tablat	equ	0xFF5
 12030                           prodh	equ	0xFF4
 12031                           prodl	equ	0xFF3
 12032                           intcon	equ	0xFF2
 12033                           intcon2	equ	0xFF1
 12034                           intcon3	equ	0xFF0
 12035                           postinc0	equ	0xFEE
 12036                           wreg	equ	0xFE8
 12037                           indf2	equ	0xFDF
 12038                           postinc2	equ	0xFDE
 12039                           postdec2	equ	0xFDD
 12040                           fsr2h	equ	0xFDA
 12041                           fsr2l	equ	0xFD9
 12042                           status	equ	0xFD8
 12043                           
 12044 ;; *************** function ___lldiv *****************
 12045 ;; Defined at:
 12046 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lldiv.c"
 12047 ;; Parameters:    Size  Location     Type
 12048 ;;  dividend        4   52[COMRAM] unsigned long 
 12049 ;;  divisor         4   56[COMRAM] unsigned long 
 12050 ;; Auto vars:     Size  Location     Type
 12051 ;;  quotient        4   60[COMRAM] unsigned long 
 12052 ;;  counter         1   64[COMRAM] unsigned char 
 12053 ;; Return value:  Size  Location     Type
 12054 ;;                  4   52[COMRAM] unsigned long 
 12055 ;; Registers used:
 12056 ;;		wreg, status,2, status,0
 12057 ;; Tracked objects:
 12058 ;;		On entry : 0/0
 12059 ;;		On exit  : 0/0
 12060 ;;		Unchanged: 0/0
 12061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12062 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12063 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12065 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12066 ;;Total ram usage:       13 bytes
 12067 ;; Hardware stack levels used:    1
 12068 ;; Hardware stack levels required when called:    5
 12069 ;; This function calls:
 12070 ;;		Nothing
 12071 ;; This function is called by:
 12072 ;;		_I2C_Master_Init
 12073 ;; This function uses a non-reentrant model
 12074 ;;
 12075                           
 12076                           	psect	text51
 12077  002C7A                     __ptext51:
 12078                           	opt stack 0
 12079  002C7A                     ___lldiv:
 12080                           	opt stack 24
 12081                           
 12082                           ;incstack = 0
 12083  002C7A  0E00               	movlw	0
 12084  002C7C  6E3D               	movwf	___lldiv@quotient,c
 12085  002C7E  0E00               	movlw	0
 12086  002C80  6E3E               	movwf	___lldiv@quotient+1,c
 12087  002C82  0E00               	movlw	0
 12088  002C84  6E3F               	movwf	___lldiv@quotient+2,c
 12089  002C86  0E00               	movlw	0
 12090  002C88  6E40               	movwf	___lldiv@quotient+3,c
 12091  002C8A  5039               	movf	___lldiv@divisor,w,c
 12092  002C8C  103A               	iorwf	___lldiv@divisor+1,w,c
 12093  002C8E  103B               	iorwf	___lldiv@divisor+2,w,c
 12094  002C90  103C               	iorwf	___lldiv@divisor+3,w,c
 12095  002C92  B4D8               	btfsc	status,2,c
 12096  002C94  D02A               	goto	l923
 12097  002C96  0E01               	movlw	1
 12098  002C98  6E41               	movwf	___lldiv@counter,c
 12099  002C9A  D006               	goto	l4200
 12100  002C9C                     l4198:
 12101  002C9C  90D8               	bcf	status,0,c
 12102  002C9E  3639               	rlcf	___lldiv@divisor,f,c
 12103  002CA0  363A               	rlcf	___lldiv@divisor+1,f,c
 12104  002CA2  363B               	rlcf	___lldiv@divisor+2,f,c
 12105  002CA4  363C               	rlcf	___lldiv@divisor+3,f,c
 12106  002CA6  2A41               	incf	___lldiv@counter,f,c
 12107  002CA8                     l4200:
 12108  002CA8  AE3C               	btfss	___lldiv@divisor+3,7,c
 12109  002CAA  D7F8               	goto	l4198
 12110  002CAC                     l4202:
 12111  002CAC  90D8               	bcf	status,0,c
 12112  002CAE  363D               	rlcf	___lldiv@quotient,f,c
 12113  002CB0  363E               	rlcf	___lldiv@quotient+1,f,c
 12114  002CB2  363F               	rlcf	___lldiv@quotient+2,f,c
 12115  002CB4  3640               	rlcf	___lldiv@quotient+3,f,c
 12116  002CB6  5039               	movf	___lldiv@divisor,w,c
 12117  002CB8  5C35               	subwf	___lldiv@dividend,w,c
 12118  002CBA  503A               	movf	___lldiv@divisor+1,w,c
 12119  002CBC  5836               	subwfb	___lldiv@dividend+1,w,c
 12120  002CBE  503B               	movf	___lldiv@divisor+2,w,c
 12121  002CC0  5837               	subwfb	___lldiv@dividend+2,w,c
 12122  002CC2  503C               	movf	___lldiv@divisor+3,w,c
 12123  002CC4  5838               	subwfb	___lldiv@dividend+3,w,c
 12124  002CC6  A0D8               	btfss	status,0,c
 12125  002CC8  D009               	goto	l4210
 12126  002CCA  5039               	movf	___lldiv@divisor,w,c
 12127  002CCC  5E35               	subwf	___lldiv@dividend,f,c
 12128  002CCE  503A               	movf	___lldiv@divisor+1,w,c
 12129  002CD0  5A36               	subwfb	___lldiv@dividend+1,f,c
 12130  002CD2  503B               	movf	___lldiv@divisor+2,w,c
 12131  002CD4  5A37               	subwfb	___lldiv@dividend+2,f,c
 12132  002CD6  503C               	movf	___lldiv@divisor+3,w,c
 12133  002CD8  5A38               	subwfb	___lldiv@dividend+3,f,c
 12134  002CDA  803D               	bsf	___lldiv@quotient,0,c
 12135  002CDC                     l4210:
 12136  002CDC  90D8               	bcf	status,0,c
 12137  002CDE  323C               	rrcf	___lldiv@divisor+3,f,c
 12138  002CE0  323B               	rrcf	___lldiv@divisor+2,f,c
 12139  002CE2  323A               	rrcf	___lldiv@divisor+1,f,c
 12140  002CE4  3239               	rrcf	___lldiv@divisor,f,c
 12141  002CE6  2E41               	decfsz	___lldiv@counter,f,c
 12142  002CE8  D7E1               	goto	l4202
 12143  002CEA                     l923:
 12144  002CEA  C03D  F035         	movff	___lldiv@quotient,?___lldiv
 12145  002CEE  C03E  F036         	movff	___lldiv@quotient+1,?___lldiv+1
 12146  002CF2  C03F  F037         	movff	___lldiv@quotient+2,?___lldiv+2
 12147  002CF6  C040  F038         	movff	___lldiv@quotient+3,?___lldiv+3
 12148  002CFA  0012               	return		;funcret
 12149  002CFC                     __end_of___lldiv:
 12150                           	opt stack 0
 12151                           tblptru	equ	0xFF8
 12152                           tblptrh	equ	0xFF7
 12153                           tblptrl	equ	0xFF6
 12154                           tablat	equ	0xFF5
 12155                           prodh	equ	0xFF4
 12156                           prodl	equ	0xFF3
 12157                           intcon	equ	0xFF2
 12158                           intcon2	equ	0xFF1
 12159                           intcon3	equ	0xFF0
 12160                           postinc0	equ	0xFEE
 12161                           wreg	equ	0xFE8
 12162                           indf2	equ	0xFDF
 12163                           postinc2	equ	0xFDE
 12164                           postdec2	equ	0xFDD
 12165                           fsr2h	equ	0xFDA
 12166                           fsr2l	equ	0xFD9
 12167                           status	equ	0xFD8
 12168                           
 12169 ;; *************** function _keypressed *****************
 12170 ;; Defined at:
 12171 ;;		line 722 in file "main.c"
 12172 ;; Parameters:    Size  Location     Type
 12173 ;;		None
 12174 ;; Auto vars:     Size  Location     Type
 12175 ;;		None
 12176 ;; Return value:  Size  Location     Type
 12177 ;;                  1    wreg      void 
 12178 ;; Registers used:
 12179 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12180 ;; Tracked objects:
 12181 ;;		On entry : 0/0
 12182 ;;		On exit  : 0/0
 12183 ;;		Unchanged: 0/0
 12184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12187 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12188 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12189 ;;Total ram usage:       16 bytes
 12190 ;; Hardware stack levels used:    1
 12191 ;; Hardware stack levels required when called:    4
 12192 ;; This function calls:
 12193 ;;		i2_closebotlid
 12194 ;;		i2_delay
 12195 ;;		i2_lcdclear
 12196 ;;		i2_opentoplid
 12197 ;;		i2_print
 12198 ;;		i2_update_time
 12199 ;; This function is called by:
 12200 ;;		Interrupt level 2
 12201 ;; This function uses a non-reentrant model
 12202 ;;
 12203                           
 12204                           	psect	intcode
 12205  000008                     __pintcode:
 12206                           	opt stack 0
 12207  000008                     _keypressed:
 12208                           	opt stack 19
 12209                           
 12210                           ;incstack = 0
 12211  000008  824B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 12212  00000A  ED73  F013         	call	int_func,f	;refresh shadow registers
 12213                           tblptru	equ	0xFF8
 12214                           tblptrh	equ	0xFF7
 12215                           tblptrl	equ	0xFF6
 12216                           tablat	equ	0xFF5
 12217                           prodh	equ	0xFF4
 12218                           prodl	equ	0xFF3
 12219                           intcon	equ	0xFF2
 12220                           intcon2	equ	0xFF1
 12221                           intcon3	equ	0xFF0
 12222                           postinc0	equ	0xFEE
 12223                           wreg	equ	0xFE8
 12224                           indf2	equ	0xFDF
 12225                           postinc2	equ	0xFDE
 12226                           postdec2	equ	0xFDD
 12227                           fsr2h	equ	0xFDA
 12228                           fsr2l	equ	0xFD9
 12229                           status	equ	0xFD8
 12230                           
 12231                           	psect	intcode_body
 12232  0026E6                     __pintcode_body:
 12233                           	opt stack 19
 12234  0026E6                     int_func:
 12235                           	opt stack 19
 12236  0026E6  0006               	pop		; remove dummy address from shadow register refresh
 12237  0026E8  CFFA F027          	movff	pclath,??_keypressed+2
 12238  0026EC  CFFB F028          	movff	pclatu,??_keypressed+3
 12239  0026F0  CFE9 F029          	movff	fsr0l,??_keypressed+4
 12240  0026F4  CFEA F02A          	movff	fsr0h,??_keypressed+5
 12241  0026F8  CFE1 F02B          	movff	fsr1l,??_keypressed+6
 12242  0026FC  CFE2 F02C          	movff	fsr1h,??_keypressed+7
 12243  002700  CFD9 F02D          	movff	fsr2l,??_keypressed+8
 12244  002704  CFDA F02E          	movff	fsr2h,??_keypressed+9
 12245  002708  CFF3 F02F          	movff	prodl,??_keypressed+10
 12246  00270C  CFF4 F030          	movff	prodh,??_keypressed+11
 12247  002710  CFF6 F031          	movff	tblptrl,??_keypressed+12
 12248  002714  CFF7 F032          	movff	tblptrh,??_keypressed+13
 12249  002718  CFF8 F033          	movff	tblptru,??_keypressed+14
 12250  00271C  CFF5 F034          	movff	tablat,??_keypressed+15
 12251                           
 12252                           ;main.c: 723: if(INT1IF){
 12253  002720  B0F0               	btfsc	intcon3,0,c	;volatile
 12254  002722  D026               	goto	i2l5230
 12255  002724  D039               	goto	i2l458
 12256  002726                     i2l5206:
 12257                           
 12258                           ;main.c: 726: update_time(end_time);
 12259  002726  0E1C               	movlw	low _end_time
 12260  002728  6E04               	movwf	i2update_time@time,c
 12261  00272A  0E01               	movlw	high _end_time
 12262  00272C  6E05               	movwf	i2update_time@time+1,c
 12263  00272E  ECB7  F016         	call	i2_update_time	;wreg free
 12264                           
 12265                           ;main.c: 727: RC7=0;
 12266  002732  9E82               	bcf	3970,7,c	;volatile
 12267                           
 12268                           ;main.c: 728: RB0=1;
 12269  002734  8081               	bsf	3969,0,c	;volatile
 12270                           
 12271                           ;main.c: 729: closebotlid();
 12272  002736  EC76  F019         	call	i2_closebotlid	;wreg free
 12273                           
 12274                           ;main.c: 730: opentoplid();
 12275  00273A  EC57  F019         	call	i2_opentoplid	;wreg free
 12276                           
 12277                           ;main.c: 731: lcdclear();
 12278  00273E  EC9F  F01A         	call	i2_lcdclear	;wreg free
 12279                           
 12280                           ;main.c: 732: print(" Operation has  ","   terminated   ");
 12281  002742  0EBD               	movlw	low STR_31
 12282  002744  6E21               	movwf	i2print@line1,c
 12283  002746  0EFE               	movlw	high STR_31
 12284  002748  6E22               	movwf	i2print@line1+1,c
 12285  00274A  0E9B               	movlw	low STR_32
 12286  00274C  6E23               	movwf	i2print@line2,c
 12287  00274E  0EFE               	movlw	high STR_32
 12288  002750  6E24               	movwf	i2print@line2+1,c
 12289  002752  EC95  F019         	call	i2_print	;wreg free
 12290                           
 12291                           ;main.c: 733: delay(1);
 12292  002756  0E00               	movlw	0
 12293  002758  6E02               	movwf	i2delay@seconds+1,c
 12294  00275A  0E01               	movlw	1
 12295  00275C  6E01               	movwf	i2delay@seconds,c
 12296  00275E  EC57  F018         	call	i2_delay	;wreg free
 12297                           
 12298                           ;main.c: 734: RA0 = 1;
 12299  002762  8080               	bsf	3968,0,c	;volatile
 12300                           
 12301                           ;main.c: 735: curr_state = LOG;
 12302  002764  0E03               	movlw	3
 12303  002766  D001               	goto	L13
 12304  002768                     i2l5226:
 12305                           
 12306                           ;main.c: 739: curr_state = STANDBY;
 12307  002768  0E00               	movlw	0
 12308  00276A                     L13:
 12309  00276A  0101               	movlb	1	; () banked
 12310  00276C  6F18               	movwf	_curr_state& (0+255),b
 12311                           
 12312                           ; BSR set to: 1
 12313                           ;main.c: 744: }
 12314                           
 12315                           ; BSR set to: 1
 12316                           ;main.c: 743: break;
 12317                           
 12318                           ;main.c: 742: default:
 12319                           
 12320                           ;main.c: 740: break;
 12321  00276E  D013               	goto	i2l455
 12322  002770                     i2l5230:
 12323  002770  3881               	swapf	3969,w,c	;volatile
 12324  002772  0B0F               	andlw	15
 12325  002774  0B0F               	andlw	15
 12326  002776  6E25               	movwf	??_keypressed& (0+255),c
 12327  002778  6A26               	clrf	(??_keypressed+1)& (0+255),c
 12328  00277A  0E43               	movlw	low _keys
 12329  00277C  2425               	addwf	??_keypressed,w,c
 12330  00277E  6EF6               	movwf	tblptrl,c
 12331  002780  0EFD               	movlw	high _keys
 12332  002782  2026               	addwfc	??_keypressed+1,w,c
 12333  002784  6EF7               	movwf	tblptrh,c
 12334  002786                     	if	0	;There are less than 3 active tblptr bytes
 12335  002786                     	endif
 12336  002786  0008               	tblrd		*
 12337  002788  50F5               	movf	tablat,w,c
 12338                           
 12339                           ; Switch size 1, requested type "space"
 12340                           ; Number of cases is 2, Range of values is 35 to 66
 12341                           ; switch strategies available:
 12342                           ; Name         Instructions Cycles
 12343                           ; simple_byte            7     4 (average)
 12344                           ;	Chosen strategy is simple_byte
 12345  00278A  0A23               	xorlw	35	; case 35
 12346  00278C  B4D8               	btfsc	status,2,c
 12347  00278E  D7CB               	goto	i2l5206
 12348  002790  0A61               	xorlw	97	; case 66
 12349  002792  B4D8               	btfsc	status,2,c
 12350  002794  D7E9               	goto	i2l5226
 12351  002796                     i2l455:
 12352                           
 12353                           ;main.c: 745: INT1IF = 0;
 12354  002796  90F0               	bcf	intcon3,0,c	;volatile
 12355  002798                     i2l458:
 12356  002798  C034  FFF5         	movff	??_keypressed+15,tablat
 12357  00279C  C033  FFF8         	movff	??_keypressed+14,tblptru
 12358  0027A0  C032  FFF7         	movff	??_keypressed+13,tblptrh
 12359  0027A4  C031  FFF6         	movff	??_keypressed+12,tblptrl
 12360  0027A8  C030  FFF4         	movff	??_keypressed+11,prodh
 12361  0027AC  C02F  FFF3         	movff	??_keypressed+10,prodl
 12362  0027B0  C02E  FFDA         	movff	??_keypressed+9,fsr2h
 12363  0027B4  C02D  FFD9         	movff	??_keypressed+8,fsr2l
 12364  0027B8  C02C  FFE2         	movff	??_keypressed+7,fsr1h
 12365  0027BC  C02B  FFE1         	movff	??_keypressed+6,fsr1l
 12366  0027C0  C02A  FFEA         	movff	??_keypressed+5,fsr0h
 12367  0027C4  C029  FFE9         	movff	??_keypressed+4,fsr0l
 12368  0027C8  C028  FFFB         	movff	??_keypressed+3,pclatu
 12369  0027CC  C027  FFFA         	movff	??_keypressed+2,pclath
 12370  0027D0  924B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 12371  0027D2  0011               	retfie		f
 12372  0027D4                     __end_of_keypressed:
 12373                           	opt stack 0
 12374                           pclatu	equ	0xFFB
 12375                           pclath	equ	0xFFA
 12376                           tblptru	equ	0xFF8
 12377                           tblptrh	equ	0xFF7
 12378                           tblptrl	equ	0xFF6
 12379                           tablat	equ	0xFF5
 12380                           prodh	equ	0xFF4
 12381                           prodl	equ	0xFF3
 12382                           intcon	equ	0xFF2
 12383                           intcon2	equ	0xFF1
 12384                           intcon3	equ	0xFF0
 12385                           postinc0	equ	0xFEE
 12386                           fsr0h	equ	0xFEA
 12387                           fsr0l	equ	0xFE9
 12388                           wreg	equ	0xFE8
 12389                           fsr1h	equ	0xFE2
 12390                           fsr1l	equ	0xFE1
 12391                           indf2	equ	0xFDF
 12392                           postinc2	equ	0xFDE
 12393                           postdec2	equ	0xFDD
 12394                           fsr2h	equ	0xFDA
 12395                           fsr2l	equ	0xFD9
 12396                           status	equ	0xFD8
 12397                           
 12398 ;; *************** function i2_update_time *****************
 12399 ;; Defined at:
 12400 ;;		line 620 in file "main.c"
 12401 ;; Parameters:    Size  Location     Type
 12402 ;;  time            2    3[COMRAM] PTR unsigned char 
 12403 ;;		 -> end_time(7), start_time(7), time(7), 
 12404 ;; Auto vars:     Size  Location     Type
 12405 ;;  update_time     1    5[COMRAM] unsigned char 
 12406 ;; Return value:  Size  Location     Type
 12407 ;;                  1    wreg      void 
 12408 ;; Registers used:
 12409 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12410 ;; Tracked objects:
 12411 ;;		On entry : 0/0
 12412 ;;		On exit  : 0/0
 12413 ;;		Unchanged: 0/0
 12414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12415 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12416 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12418 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12419 ;;Total ram usage:        3 bytes
 12420 ;; Hardware stack levels used:    1
 12421 ;; Hardware stack levels required when called:    2
 12422 ;; This function calls:
 12423 ;;		i2_I2C_Master_Read
 12424 ;;		i2_I2C_Master_Start
 12425 ;;		i2_I2C_Master_Stop
 12426 ;;		i2_I2C_Master_Write
 12427 ;; This function is called by:
 12428 ;;		_keypressed
 12429 ;; This function uses a non-reentrant model
 12430 ;;
 12431                           
 12432                           	psect	text53
 12433  002D6E                     __ptext53:
 12434                           	opt stack 0
 12435  002D6E                     i2_update_time:
 12436                           	opt stack 20
 12437                           
 12438                           ;main.c: 622: I2C_Master_Start();
 12439                           
 12440                           ;incstack = 0
 12441  002D6E  ECF6  F01A         	call	i2_I2C_Master_Start	;wreg free
 12442                           
 12443                           ;main.c: 623: I2C_Master_Write(0b11010000);
 12444  002D72  0E00               	movlw	0
 12445  002D74  6E03               	movwf	i2I2C_Master_Write@d+1,c
 12446  002D76  0ED0               	movlw	208
 12447  002D78  6E02               	movwf	i2I2C_Master_Write@d,c
 12448  002D7A  ECE5  F01A         	call	i2_I2C_Master_Write	;wreg free
 12449                           
 12450                           ;main.c: 624: I2C_Master_Write(0x00);
 12451  002D7E  0E00               	movlw	0
 12452  002D80  6E03               	movwf	i2I2C_Master_Write@d+1,c
 12453  002D82  0E00               	movlw	0
 12454  002D84  6E02               	movwf	i2I2C_Master_Write@d,c
 12455  002D86  ECE5  F01A         	call	i2_I2C_Master_Write	;wreg free
 12456                           
 12457                           ;main.c: 625: I2C_Master_Stop();
 12458  002D8A  ECF2  F01A         	call	i2_I2C_Master_Stop	;wreg free
 12459                           
 12460                           ;main.c: 628: I2C_Master_Start();
 12461  002D8E  ECF6  F01A         	call	i2_I2C_Master_Start	;wreg free
 12462                           
 12463                           ;main.c: 629: I2C_Master_Write(0b11010001);
 12464  002D92  0E00               	movlw	0
 12465  002D94  6E03               	movwf	i2I2C_Master_Write@d+1,c
 12466  002D96  0ED1               	movlw	209
 12467  002D98  6E02               	movwf	i2I2C_Master_Write@d,c
 12468  002D9A  ECE5  F01A         	call	i2_I2C_Master_Write	;wreg free
 12469                           
 12470                           ;main.c: 630: for(unsigned char i=0;i<0x06;i++){
 12471  002D9E  0E00               	movlw	0
 12472  002DA0  6E06               	movwf	i2update_time@i,c
 12473  002DA2                     i2l4572:
 12474  002DA2  0E05               	movlw	5
 12475  002DA4  6406               	cpfsgt	i2update_time@i,c
 12476  002DA6  D001               	goto	i2l4576
 12477  002DA8  D00E               	goto	i2l4582
 12478  002DAA                     i2l4576:
 12479                           
 12480                           ;main.c: 631: time[i] = I2C_Master_Read(1);
 12481  002DAA  5006               	movf	i2update_time@i,w,c
 12482  002DAC  0D01               	mullw	1
 12483  002DAE  50F3               	movf	prodl,w,c
 12484  002DB0  2404               	addwf	i2update_time@time,w,c
 12485  002DB2  6ED9               	movwf	fsr2l,c
 12486  002DB4  50F4               	movf	prodh,w,c
 12487  002DB6  2005               	addwfc	i2update_time@time+1,w,c
 12488  002DB8  6EDA               	movwf	fsr2h,c
 12489  002DBA  0E01               	movlw	1
 12490  002DBC  EC1C  F01A         	call	i2_I2C_Master_Read
 12491  002DC0  6EDF               	movwf	indf2,c
 12492  002DC2  2A06               	incf	i2update_time@i,f,c
 12493  002DC4  D7EE               	goto	i2l4572
 12494  002DC6                     i2l4582:
 12495                           
 12496                           ;main.c: 632: }
 12497                           ;main.c: 633: time[6] = I2C_Master_Read(0);
 12498  002DC6  EE20 F006          	lfsr	2,6
 12499  002DCA  5004               	movf	i2update_time@time,w,c
 12500  002DCC  26D9               	addwf	fsr2l,f,c
 12501  002DCE  5005               	movf	i2update_time@time+1,w,c
 12502  002DD0  22DA               	addwfc	fsr2h,f,c
 12503  002DD2  0E00               	movlw	0
 12504  002DD4  EC1C  F01A         	call	i2_I2C_Master_Read
 12505  002DD8  6EDF               	movwf	indf2,c
 12506                           
 12507                           ;main.c: 634: I2C_Master_Stop();
 12508  002DDA  ECF2  F01A         	call	i2_I2C_Master_Stop	;wreg free
 12509  002DDE  0012               	return		;funcret
 12510  002DE0                     __end_ofi2_update_time:
 12511                           	opt stack 0
 12512                           pclatu	equ	0xFFB
 12513                           pclath	equ	0xFFA
 12514                           tblptru	equ	0xFF8
 12515                           tblptrh	equ	0xFF7
 12516                           tblptrl	equ	0xFF6
 12517                           tablat	equ	0xFF5
 12518                           prodh	equ	0xFF4
 12519                           prodl	equ	0xFF3
 12520                           intcon	equ	0xFF2
 12521                           intcon2	equ	0xFF1
 12522                           intcon3	equ	0xFF0
 12523                           postinc0	equ	0xFEE
 12524                           fsr0h	equ	0xFEA
 12525                           fsr0l	equ	0xFE9
 12526                           wreg	equ	0xFE8
 12527                           fsr1h	equ	0xFE2
 12528                           fsr1l	equ	0xFE1
 12529                           indf2	equ	0xFDF
 12530                           postinc2	equ	0xFDE
 12531                           postdec2	equ	0xFDD
 12532                           fsr2h	equ	0xFDA
 12533                           fsr2l	equ	0xFD9
 12534                           status	equ	0xFD8
 12535                           
 12536 ;; *************** function i2_I2C_Master_Write *****************
 12537 ;; Defined at:
 12538 ;;		line 47 in file "I2C.c"
 12539 ;; Parameters:    Size  Location     Type
 12540 ;;  d               2    1[COMRAM] unsigned int 
 12541 ;; Auto vars:     Size  Location     Type
 12542 ;;		None
 12543 ;; Return value:  Size  Location     Type
 12544 ;;                  1    wreg      void 
 12545 ;; Registers used:
 12546 ;;		wreg, status,2, status,0, cstack
 12547 ;; Tracked objects:
 12548 ;;		On entry : 0/0
 12549 ;;		On exit  : 0/0
 12550 ;;		Unchanged: 0/0
 12551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12552 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12555 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12556 ;;Total ram usage:        2 bytes
 12557 ;; Hardware stack levels used:    1
 12558 ;; Hardware stack levels required when called:    1
 12559 ;; This function calls:
 12560 ;;		i2_I2C_Master_Wait
 12561 ;; This function is called by:
 12562 ;;		i2_update_time
 12563 ;; This function uses a non-reentrant model
 12564 ;;
 12565                           
 12566                           	psect	text54
 12567  0035CA                     __ptext54:
 12568                           	opt stack 0
 12569  0035CA                     i2_I2C_Master_Write:
 12570                           	opt stack 20
 12571                           
 12572                           ;I2C.c: 49: I2C_Master_Wait();
 12573                           
 12574                           ;incstack = 0
 12575  0035CA  ECBF  F01A         	call	i2_I2C_Master_Wait	;wreg free
 12576                           
 12577                           ;I2C.c: 50: SSPBUF = d;
 12578  0035CE  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 12579  0035D2  0012               	return		;funcret
 12580  0035D4                     __end_ofi2_I2C_Master_Write:
 12581                           	opt stack 0
 12582                           pclatu	equ	0xFFB
 12583                           pclath	equ	0xFFA
 12584                           tblptru	equ	0xFF8
 12585                           tblptrh	equ	0xFF7
 12586                           tblptrl	equ	0xFF6
 12587                           tablat	equ	0xFF5
 12588                           prodh	equ	0xFF4
 12589                           prodl	equ	0xFF3
 12590                           intcon	equ	0xFF2
 12591                           intcon2	equ	0xFF1
 12592                           intcon3	equ	0xFF0
 12593                           postinc0	equ	0xFEE
 12594                           fsr0h	equ	0xFEA
 12595                           fsr0l	equ	0xFE9
 12596                           wreg	equ	0xFE8
 12597                           fsr1h	equ	0xFE2
 12598                           fsr1l	equ	0xFE1
 12599                           indf2	equ	0xFDF
 12600                           postinc2	equ	0xFDE
 12601                           postdec2	equ	0xFDD
 12602                           fsr2h	equ	0xFDA
 12603                           fsr2l	equ	0xFD9
 12604                           status	equ	0xFD8
 12605                           
 12606 ;; *************** function i2_I2C_Master_Stop *****************
 12607 ;; Defined at:
 12608 ;;		line 41 in file "I2C.c"
 12609 ;; Parameters:    Size  Location     Type
 12610 ;;		None
 12611 ;; Auto vars:     Size  Location     Type
 12612 ;;		None
 12613 ;; Return value:  Size  Location     Type
 12614 ;;                  1    wreg      void 
 12615 ;; Registers used:
 12616 ;;		wreg, status,2, status,0, cstack
 12617 ;; Tracked objects:
 12618 ;;		On entry : 0/0
 12619 ;;		On exit  : 0/0
 12620 ;;		Unchanged: 0/0
 12621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12625 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12626 ;;Total ram usage:        0 bytes
 12627 ;; Hardware stack levels used:    1
 12628 ;; Hardware stack levels required when called:    1
 12629 ;; This function calls:
 12630 ;;		i2_I2C_Master_Wait
 12631 ;; This function is called by:
 12632 ;;		i2_update_time
 12633 ;; This function uses a non-reentrant model
 12634 ;;
 12635                           
 12636                           	psect	text55
 12637  0035E4                     __ptext55:
 12638                           	opt stack 0
 12639  0035E4                     i2_I2C_Master_Stop:
 12640                           	opt stack 20
 12641                           
 12642                           ;I2C.c: 43: I2C_Master_Wait();
 12643                           
 12644                           ;incstack = 0
 12645  0035E4  ECBF  F01A         	call	i2_I2C_Master_Wait	;wreg free
 12646                           
 12647                           ;I2C.c: 44: PEN = 1;
 12648  0035E8  84C5               	bsf	4037,2,c	;volatile
 12649  0035EA  0012               	return		;funcret
 12650  0035EC                     __end_ofi2_I2C_Master_Stop:
 12651                           	opt stack 0
 12652                           pclatu	equ	0xFFB
 12653                           pclath	equ	0xFFA
 12654                           tblptru	equ	0xFF8
 12655                           tblptrh	equ	0xFF7
 12656                           tblptrl	equ	0xFF6
 12657                           tablat	equ	0xFF5
 12658                           prodh	equ	0xFF4
 12659                           prodl	equ	0xFF3
 12660                           intcon	equ	0xFF2
 12661                           intcon2	equ	0xFF1
 12662                           intcon3	equ	0xFF0
 12663                           postinc0	equ	0xFEE
 12664                           fsr0h	equ	0xFEA
 12665                           fsr0l	equ	0xFE9
 12666                           wreg	equ	0xFE8
 12667                           fsr1h	equ	0xFE2
 12668                           fsr1l	equ	0xFE1
 12669                           indf2	equ	0xFDF
 12670                           postinc2	equ	0xFDE
 12671                           postdec2	equ	0xFDD
 12672                           fsr2h	equ	0xFDA
 12673                           fsr2l	equ	0xFD9
 12674                           status	equ	0xFD8
 12675                           
 12676 ;; *************** function i2_I2C_Master_Start *****************
 12677 ;; Defined at:
 12678 ;;		line 29 in file "I2C.c"
 12679 ;; Parameters:    Size  Location     Type
 12680 ;;		None
 12681 ;; Auto vars:     Size  Location     Type
 12682 ;;		None
 12683 ;; Return value:  Size  Location     Type
 12684 ;;                  1    wreg      void 
 12685 ;; Registers used:
 12686 ;;		wreg, status,2, status,0, cstack
 12687 ;; Tracked objects:
 12688 ;;		On entry : 0/0
 12689 ;;		On exit  : 0/0
 12690 ;;		Unchanged: 0/0
 12691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12695 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12696 ;;Total ram usage:        0 bytes
 12697 ;; Hardware stack levels used:    1
 12698 ;; Hardware stack levels required when called:    1
 12699 ;; This function calls:
 12700 ;;		i2_I2C_Master_Wait
 12701 ;; This function is called by:
 12702 ;;		i2_update_time
 12703 ;; This function uses a non-reentrant model
 12704 ;;
 12705                           
 12706                           	psect	text56
 12707  0035EC                     __ptext56:
 12708                           	opt stack 0
 12709  0035EC                     i2_I2C_Master_Start:
 12710                           	opt stack 20
 12711                           
 12712                           ;I2C.c: 31: I2C_Master_Wait();
 12713                           
 12714                           ;incstack = 0
 12715  0035EC  ECBF  F01A         	call	i2_I2C_Master_Wait	;wreg free
 12716                           
 12717                           ;I2C.c: 32: SEN = 1;
 12718  0035F0  80C5               	bsf	4037,0,c	;volatile
 12719  0035F2  0012               	return		;funcret
 12720  0035F4                     __end_ofi2_I2C_Master_Start:
 12721                           	opt stack 0
 12722                           pclatu	equ	0xFFB
 12723                           pclath	equ	0xFFA
 12724                           tblptru	equ	0xFF8
 12725                           tblptrh	equ	0xFF7
 12726                           tblptrl	equ	0xFF6
 12727                           tablat	equ	0xFF5
 12728                           prodh	equ	0xFF4
 12729                           prodl	equ	0xFF3
 12730                           intcon	equ	0xFF2
 12731                           intcon2	equ	0xFF1
 12732                           intcon3	equ	0xFF0
 12733                           postinc0	equ	0xFEE
 12734                           fsr0h	equ	0xFEA
 12735                           fsr0l	equ	0xFE9
 12736                           wreg	equ	0xFE8
 12737                           fsr1h	equ	0xFE2
 12738                           fsr1l	equ	0xFE1
 12739                           indf2	equ	0xFDF
 12740                           postinc2	equ	0xFDE
 12741                           postdec2	equ	0xFDD
 12742                           fsr2h	equ	0xFDA
 12743                           fsr2l	equ	0xFD9
 12744                           status	equ	0xFD8
 12745                           
 12746 ;; *************** function i2_I2C_Master_Read *****************
 12747 ;; Defined at:
 12748 ;;		line 53 in file "I2C.c"
 12749 ;; Parameters:    Size  Location     Type
 12750 ;;  a               1    wreg     unsigned char 
 12751 ;; Auto vars:     Size  Location     Type
 12752 ;;  a               1    1[COMRAM] unsigned char 
 12753 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 12754 ;; Return value:  Size  Location     Type
 12755 ;;                  1    wreg      unsigned char 
 12756 ;; Registers used:
 12757 ;;		wreg, status,2, status,0, cstack
 12758 ;; Tracked objects:
 12759 ;;		On entry : 0/0
 12760 ;;		On exit  : 0/0
 12761 ;;		Unchanged: 0/0
 12762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12764 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12766 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12767 ;;Total ram usage:        2 bytes
 12768 ;; Hardware stack levels used:    1
 12769 ;; Hardware stack levels required when called:    1
 12770 ;; This function calls:
 12771 ;;		i2_I2C_Master_Wait
 12772 ;; This function is called by:
 12773 ;;		i2_update_time
 12774 ;; This function uses a non-reentrant model
 12775 ;;
 12776                           
 12777                           	psect	text57
 12778  003438                     __ptext57:
 12779                           	opt stack 0
 12780  003438                     i2_I2C_Master_Read:
 12781                           	opt stack 20
 12782                           
 12783                           ;incstack = 0
 12784                           ;i2I2C_Master_Read@a stored from wreg
 12785  003438  6E02               	movwf	i2I2C_Master_Read@a,c
 12786                           
 12787                           ;I2C.c: 55: unsigned char temp;
 12788                           ;I2C.c: 56: I2C_Master_Wait();
 12789  00343A  ECBF  F01A         	call	i2_I2C_Master_Wait	;wreg free
 12790                           
 12791                           ;I2C.c: 57: RCEN = 1;
 12792  00343E  86C5               	bsf	4037,3,c	;volatile
 12793                           
 12794                           ;I2C.c: 58: I2C_Master_Wait();
 12795  003440  ECBF  F01A         	call	i2_I2C_Master_Wait	;wreg free
 12796                           
 12797                           ;I2C.c: 59: temp = SSPBUF;
 12798  003444  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 12799                           
 12800                           ;I2C.c: 60: I2C_Master_Wait();
 12801  003448  ECBF  F01A         	call	i2_I2C_Master_Wait	;wreg free
 12802                           
 12803                           ;I2C.c: 61: ACKDT = (a)?0:1;
 12804  00344C  5002               	movf	i2I2C_Master_Read@a,w,c
 12805  00344E  A4D8               	btfss	status,2,c
 12806  003450  D002               	goto	i2u435_40
 12807  003452  8AC5               	bsf	4037,5,c	;volatile
 12808  003454  D001               	goto	i2l4238
 12809  003456                     i2u435_40:
 12810  003456  9AC5               	bcf	4037,5,c	;volatile
 12811  003458                     i2l4238:
 12812                           
 12813                           ;I2C.c: 62: ACKEN = 1;
 12814  003458  88C5               	bsf	4037,4,c	;volatile
 12815                           
 12816                           ;I2C.c: 63: return temp;
 12817  00345A  5003               	movf	i2I2C_Master_Read@temp,w,c
 12818  00345C  0012               	return	
 12819  00345E                     __end_ofi2_I2C_Master_Read:
 12820                           	opt stack 0
 12821                           pclatu	equ	0xFFB
 12822                           pclath	equ	0xFFA
 12823                           tblptru	equ	0xFF8
 12824                           tblptrh	equ	0xFF7
 12825                           tblptrl	equ	0xFF6
 12826                           tablat	equ	0xFF5
 12827                           prodh	equ	0xFF4
 12828                           prodl	equ	0xFF3
 12829                           intcon	equ	0xFF2
 12830                           intcon2	equ	0xFF1
 12831                           intcon3	equ	0xFF0
 12832                           postinc0	equ	0xFEE
 12833                           fsr0h	equ	0xFEA
 12834                           fsr0l	equ	0xFE9
 12835                           wreg	equ	0xFE8
 12836                           fsr1h	equ	0xFE2
 12837                           fsr1l	equ	0xFE1
 12838                           indf2	equ	0xFDF
 12839                           postinc2	equ	0xFDE
 12840                           postdec2	equ	0xFDD
 12841                           fsr2h	equ	0xFDA
 12842                           fsr2l	equ	0xFD9
 12843                           status	equ	0xFD8
 12844                           
 12845 ;; *************** function i2_I2C_Master_Wait *****************
 12846 ;; Defined at:
 12847 ;;		line 24 in file "I2C.c"
 12848 ;; Parameters:    Size  Location     Type
 12849 ;;		None
 12850 ;; Auto vars:     Size  Location     Type
 12851 ;;		None
 12852 ;; Return value:  Size  Location     Type
 12853 ;;                  1    wreg      void 
 12854 ;; Registers used:
 12855 ;;		wreg, status,2, status,0
 12856 ;; Tracked objects:
 12857 ;;		On entry : 0/0
 12858 ;;		On exit  : 0/0
 12859 ;;		Unchanged: 0/0
 12860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12863 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12864 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12865 ;;Total ram usage:        1 bytes
 12866 ;; Hardware stack levels used:    1
 12867 ;; This function calls:
 12868 ;;		Nothing
 12869 ;; This function is called by:
 12870 ;;		i2_I2C_Master_Start
 12871 ;;		i2_I2C_Master_Stop
 12872 ;;		i2_I2C_Master_Write
 12873 ;;		i2_I2C_Master_Read
 12874 ;; This function uses a non-reentrant model
 12875 ;;
 12876                           
 12877                           	psect	text58
 12878  00357E                     __ptext58:
 12879                           	opt stack 0
 12880  00357E                     i2_I2C_Master_Wait:
 12881                           	opt stack 20
 12882  00357E                     i2l56:
 12883  00357E  B4C7               	btfsc	4039,2,c	;volatile
 12884  003580  D7FE               	goto	i2l56
 12885  003582  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 12886  003586  0E1F               	movlw	31
 12887  003588  1601               	andwf	??i2_I2C_Master_Wait,f,c
 12888  00358A  B4D8               	btfsc	status,2,c
 12889  00358C  0012               	return	
 12890  00358E  D7F7               	goto	i2l56
 12891  003590                     __end_ofi2_I2C_Master_Wait:
 12892                           	opt stack 0
 12893                           pclatu	equ	0xFFB
 12894                           pclath	equ	0xFFA
 12895                           tblptru	equ	0xFF8
 12896                           tblptrh	equ	0xFF7
 12897                           tblptrl	equ	0xFF6
 12898                           tablat	equ	0xFF5
 12899                           prodh	equ	0xFF4
 12900                           prodl	equ	0xFF3
 12901                           intcon	equ	0xFF2
 12902                           intcon2	equ	0xFF1
 12903                           intcon3	equ	0xFF0
 12904                           postinc0	equ	0xFEE
 12905                           fsr0h	equ	0xFEA
 12906                           fsr0l	equ	0xFE9
 12907                           wreg	equ	0xFE8
 12908                           fsr1h	equ	0xFE2
 12909                           fsr1l	equ	0xFE1
 12910                           indf2	equ	0xFDF
 12911                           postinc2	equ	0xFDE
 12912                           postdec2	equ	0xFDD
 12913                           fsr2h	equ	0xFDA
 12914                           fsr2l	equ	0xFD9
 12915                           status	equ	0xFD8
 12916                           
 12917 ;; *************** function i2_print *****************
 12918 ;; Defined at:
 12919 ;;		line 699 in file "main.c"
 12920 ;; Parameters:    Size  Location     Type
 12921 ;;  line1           2   32[COMRAM] PTR unsigned char 
 12922 ;;		 -> STR_42(17), STR_33(17), STR_31(17), STR_29(17), 
 12923 ;;		 -> STR_27(17), STR_25(17), STR_23(17), STR_21(17), 
 12924 ;;		 -> STR_19(17), STR_13(17), STR_7(17), STR_5(19), 
 12925 ;;		 -> STR_3(16), STR_1(17), 
 12926 ;;  line2           2   34[COMRAM] PTR unsigned char 
 12927 ;;		 -> STR_43(17), STR_34(17), STR_32(17), STR_30(17), 
 12928 ;;		 -> STR_28(17), STR_26(17), STR_24(17), STR_22(17), 
 12929 ;;		 -> STR_20(20), STR_14(18), STR_8(17), STR_6(19), 
 12930 ;;		 -> STR_4(17), STR_2(17), 
 12931 ;; Auto vars:     Size  Location     Type
 12932 ;;		None
 12933 ;; Return value:  Size  Location     Type
 12934 ;;                  1    wreg      void 
 12935 ;; Registers used:
 12936 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12937 ;; Tracked objects:
 12938 ;;		On entry : 0/0
 12939 ;;		On exit  : 0/0
 12940 ;;		Unchanged: 0/0
 12941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12942 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12945 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12946 ;;Total ram usage:        4 bytes
 12947 ;; Hardware stack levels used:    1
 12948 ;; Hardware stack levels required when called:    3
 12949 ;; This function calls:
 12950 ;;		i2_lcdInst
 12951 ;;		i2_printf
 12952 ;; This function is called by:
 12953 ;;		_keypressed
 12954 ;; This function uses a non-reentrant model
 12955 ;;
 12956                           
 12957                           	psect	text59
 12958  00332A                     __ptext59:
 12959                           	opt stack 0
 12960  00332A                     i2_print:
 12961                           	opt stack 19
 12962                           
 12963                           ;main.c: 700: if (line2 == ""){
 12964                           
 12965                           ;incstack = 0
 12966  00332A  0E56               	movlw	low (STR_14+17)
 12967  00332C  1823               	xorwf	i2print@line2,w,c
 12968  00332E  E10B               	bnz	i2l4606
 12969  003330  0EFE               	movlw	high (STR_14+17)
 12970  003332  1824               	xorwf	i2print@line2+1,w,c
 12971  003334  A4D8               	btfss	status,2,c
 12972  003336  D007               	goto	i2l4606
 12973                           
 12974                           ;main.c: 701: printf(line1);
 12975  003338  C021  F00D         	movff	i2print@line1,i2printf@f
 12976  00333C  C022  F00E         	movff	i2print@line1+1,i2printf@f+1
 12977  003340  ECD5  F009         	call	i2_printf	;wreg free
 12978                           
 12979                           ;main.c: 702: }
 12980  003344  0012               	return	
 12981  003346                     i2l4606:
 12982                           
 12983                           ;main.c: 703: else{
 12984                           ;main.c: 704: printf(line1);
 12985  003346  C021  F00D         	movff	i2print@line1,i2printf@f
 12986  00334A  C022  F00E         	movff	i2print@line1+1,i2printf@f+1
 12987  00334E  ECD5  F009         	call	i2_printf	;wreg free
 12988                           
 12989                           ;main.c: 705: lcdInst(0b11000000);;
 12990  003352  0EC0               	movlw	192
 12991  003354  ECDA  F01A         	call	i2_lcdInst
 12992                           
 12993                           ;main.c: 706: printf(line2);
 12994  003358  C023  F00D         	movff	i2print@line2,i2printf@f
 12995  00335C  C024  F00E         	movff	i2print@line2+1,i2printf@f+1
 12996  003360  ECD5  F009         	call	i2_printf	;wreg free
 12997  003364  0012               	return	
 12998  003366                     __end_ofi2_print:
 12999                           	opt stack 0
 13000                           pclatu	equ	0xFFB
 13001                           pclath	equ	0xFFA
 13002                           tblptru	equ	0xFF8
 13003                           tblptrh	equ	0xFF7
 13004                           tblptrl	equ	0xFF6
 13005                           tablat	equ	0xFF5
 13006                           prodh	equ	0xFF4
 13007                           prodl	equ	0xFF3
 13008                           intcon	equ	0xFF2
 13009                           intcon2	equ	0xFF1
 13010                           intcon3	equ	0xFF0
 13011                           postinc0	equ	0xFEE
 13012                           fsr0h	equ	0xFEA
 13013                           fsr0l	equ	0xFE9
 13014                           wreg	equ	0xFE8
 13015                           fsr1h	equ	0xFE2
 13016                           fsr1l	equ	0xFE1
 13017                           indf2	equ	0xFDF
 13018                           postinc2	equ	0xFDE
 13019                           postdec2	equ	0xFDD
 13020                           fsr2h	equ	0xFDA
 13021                           fsr2l	equ	0xFD9
 13022                           status	equ	0xFD8
 13023                           
 13024 ;; *************** function i2_printf *****************
 13025 ;; Defined at:
 13026 ;;		line 464 in file "/Applications/microchip/xc8/v1.41/sources/common/doprnt.c"
 13027 ;; Parameters:    Size  Location     Type
 13028 ;;  f               2   12[COMRAM] PTR const unsigned char 
 13029 ;;		 -> STR_43(17), STR_42(17), STR_40(23), STR_39(21), 
 13030 ;;		 -> STR_38(17), STR_37(17), STR_36(19), STR_35(19), 
 13031 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 13032 ;;		 -> STR_30(17), STR_29(17), STR_28(17), STR_27(17), 
 13033 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(17), 
 13034 ;;		 -> STR_22(17), STR_21(17), STR_20(20), STR_19(17), 
 13035 ;;		 -> STR_18(19), STR_17(19), STR_16(19), STR_15(19), 
 13036 ;;		 -> STR_14(18), STR_13(17), STR_12(19), STR_11(19), 
 13037 ;;		 -> STR_10(19), STR_9(19), STR_8(17), STR_7(17), 
 13038 ;;		 -> STR_6(19), STR_5(19), STR_4(17), STR_3(16), 
 13039 ;;		 -> STR_2(17), STR_1(17), 
 13040 ;; Auto vars:     Size  Location     Type
 13041 ;;  printf          4    0        struct .
 13042 ;;  printf          2   29[COMRAM] int 
 13043 ;;  printf          2   26[COMRAM] unsigned int 
 13044 ;;  printf          2   23[COMRAM] unsigned int 
 13045 ;;  printf          2   21[COMRAM] PTR void [1]
 13046 ;;		 -> ?i2_printf(2), ?_printf(2), 
 13047 ;;  printf          2   18[COMRAM] PTR const unsigned char 
 13048 ;;		 -> printf@c(1), 
 13049 ;;  printf          1   31[COMRAM] char 
 13050 ;;  printf          1   28[COMRAM] unsigned char 
 13051 ;;  printf          1   25[COMRAM] char 
 13052 ;;  printf          1   20[COMRAM] unsigned char 
 13053 ;; Return value:  Size  Location     Type
 13054 ;;                  2   12[COMRAM] int 
 13055 ;; Registers used:
 13056 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13057 ;; Tracked objects:
 13058 ;;		On entry : 0/0
 13059 ;;		On exit  : 0/0
 13060 ;;		Unchanged: 0/0
 13061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13062 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13063 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13064 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13065 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13066 ;;Total ram usage:       20 bytes
 13067 ;; Hardware stack levels used:    1
 13068 ;; Hardware stack levels required when called:    2
 13069 ;; This function calls:
 13070 ;;		i2___lwdiv
 13071 ;;		i2___lwmod
 13072 ;;		i2___wmul
 13073 ;;		i2_isdigit
 13074 ;;		i2_putch
 13075 ;; This function is called by:
 13076 ;;		i2_print
 13077 ;; This function uses a non-reentrant model
 13078 ;;
 13079                           
 13080                           	psect	text60
 13081  0013AA                     __ptext60:
 13082                           	opt stack 0
 13083  0013AA                     i2_printf:
 13084                           	opt stack 19
 13085                           
 13086                           ;doprnt.c: 466: va_list ap;
 13087                           ;doprnt.c: 499: signed char c;
 13088                           ;doprnt.c: 501: int width;
 13089                           ;doprnt.c: 506: signed char prec;
 13090                           ;doprnt.c: 508: unsigned char flag;
 13091                           ;doprnt.c: 523: union {
 13092                           ;doprnt.c: 524: unsigned long vd;
 13093                           ;doprnt.c: 525: double integ;
 13094                           ;doprnt.c: 526: } tmpval;
 13095                           ;doprnt.c: 528: unsigned int val;
 13096                           ;doprnt.c: 529: unsigned len;
 13097                           ;doprnt.c: 530: const char * cp;
 13098                           ;doprnt.c: 533: *ap = __va_start();
 13099                           
 13100                           ;incstack = 0
 13101  0013AA  0E0F               	movlw	low (?i2_printf+2)
 13102  0013AC  6E16               	movwf	i2printf@ap,c
 13103  0013AE  0E00               	movlw	high (?i2_printf+2)
 13104  0013B0  6E17               	movwf	i2printf@ap+1,c
 13105                           
 13106                           ;doprnt.c: 536: while(c = *f++) {
 13107  0013B2  D1AB               	goto	i2l4392
 13108  0013B4                     i2l4246:
 13109                           
 13110                           ;doprnt.c: 538: if(c != '%')
 13111  0013B4  0E25               	movlw	37
 13112  0013B6  1820               	xorwf	i2printf@c,w,c
 13113  0013B8  B4D8               	btfsc	status,2,c
 13114  0013BA  D004               	goto	i2l4250
 13115                           
 13116                           ;doprnt.c: 540: {
 13117                           ;doprnt.c: 541: (putch(c) );
 13118  0013BC  5020               	movf	i2printf@c,w,c
 13119  0013BE  ECD4  F01A         	call	i2_putch
 13120                           
 13121                           ;doprnt.c: 542: continue;
 13122  0013C2  D1A3               	goto	i2l4392
 13123  0013C4                     i2l4250:
 13124                           
 13125                           ;doprnt.c: 543: }
 13126                           ;doprnt.c: 546: width = 0;
 13127  0013C4  0E00               	movlw	0
 13128  0013C6  6E1F               	movwf	i2printf@width+1,c
 13129  0013C8  0E00               	movlw	0
 13130  0013CA  6E1E               	movwf	i2printf@width,c
 13131                           
 13132                           ;doprnt.c: 548: flag = 0;
 13133  0013CC  0E00               	movlw	0
 13134  0013CE  6E1D               	movwf	i2printf@flag,c
 13135                           
 13136                           ;doprnt.c: 551: switch(*f) {
 13137                           
 13138                           ;doprnt.c: 550: for(;;) {
 13139  0013D0  D003               	goto	i2l4256
 13140  0013D2                     i2l4252:
 13141                           
 13142                           ;doprnt.c: 580: flag |= 0x04;
 13143  0013D2  841D               	bsf	i2printf@flag,2,c
 13144                           
 13145                           ;doprnt.c: 581: f++;
 13146  0013D4  4A0D               	infsnz	i2printf@f,f,c
 13147  0013D6  2A0E               	incf	i2printf@f+1,f,c
 13148  0013D8                     i2l4256:
 13149  0013D8  C00D  FFF6         	movff	i2printf@f,tblptrl
 13150  0013DC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 13151  0013E0                     	if	0	;tblptru may be non-zero
 13152  0013E0                     	endif
 13153  0013E0                     	if	0	;tblptru may be non-zero
 13154  0013E0                     	endif
 13155  0013E0  0008               	tblrd		*
 13156  0013E2  50F5               	movf	tablat,w,c
 13157                           
 13158                           ; Switch size 1, requested type "space"
 13159                           ; Number of cases is 1, Range of values is 48 to 48
 13160                           ; switch strategies available:
 13161                           ; Name         Instructions Cycles
 13162                           ; simple_byte            4     3 (average)
 13163                           ;	Chosen strategy is simple_byte
 13164  0013E4  0A30               	xorlw	48	; case 48
 13165  0013E6  B4D8               	btfsc	status,2,c
 13166  0013E8  D7F4               	goto	i2l4252
 13167                           
 13168                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 13169                           
 13170                           ;doprnt.c: 586: }
 13171                           
 13172                           ;doprnt.c: 585: break;
 13173  0013EA  C00D  FFF6         	movff	i2printf@f,tblptrl
 13174  0013EE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 13175  0013F2                     	if	0	;tblptru may be non-zero
 13176  0013F2                     	endif
 13177  0013F2                     	if	0	;tblptru may be non-zero
 13178  0013F2                     	endif
 13179  0013F2  0008               	tblrd		*
 13180  0013F4  50F5               	movf	tablat,w,c
 13181  0013F6  EC84  F01A         	call	i2_isdigit
 13182  0013FA  A0D8               	btfss	status,0,c
 13183  0013FC  D06C               	goto	i2l4294
 13184                           
 13185                           ;doprnt.c: 598: width = 0;
 13186  0013FE  0E00               	movlw	0
 13187  001400  6E1F               	movwf	i2printf@width+1,c
 13188  001402  0E00               	movlw	0
 13189  001404  6E1E               	movwf	i2printf@width,c
 13190  001406                     i2l4262:
 13191                           
 13192                           ;doprnt.c: 600: width *= 10;
 13193  001406  C01E  F001         	movff	i2printf@width,i2___wmul@multiplier
 13194  00140A  C01F  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 13195  00140E  0E00               	movlw	0
 13196  001410  6E04               	movwf	i2___wmul@multiplicand+1,c
 13197  001412  0E0A               	movlw	10
 13198  001414  6E03               	movwf	i2___wmul@multiplicand,c
 13199  001416  EC2F  F01A         	call	i2___wmul	;wreg free
 13200  00141A  C001  F01E         	movff	?i2___wmul,i2printf@width
 13201  00141E  C002  F01F         	movff	?i2___wmul+1,i2printf@width+1
 13202                           
 13203                           ;doprnt.c: 601: width += *f++ - '0';
 13204  001422  0ED0               	movlw	208
 13205  001424  6E0F               	movwf	??i2_printf& (0+255),c
 13206  001426  0EFF               	movlw	255
 13207  001428  6E10               	movwf	(??i2_printf+1)& (0+255),c
 13208  00142A  C00D  FFF6         	movff	i2printf@f,tblptrl
 13209  00142E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 13210  001432                     	if	0	;tblptru may be non-zero
 13211  001432                     	endif
 13212  001432                     	if	0	;tblptru may be non-zero
 13213  001432                     	endif
 13214  001432  0008               	tblrd		*
 13215  001434  50F5               	movf	tablat,w,c
 13216  001436  6E11               	movwf	(??i2_printf+2)& (0+255),c
 13217  001438  6A12               	clrf	(??i2_printf+3)& (0+255),c
 13218  00143A  500F               	movf	??i2_printf,w,c
 13219  00143C  2611               	addwf	??i2_printf+2,f,c
 13220  00143E  5010               	movf	??i2_printf+1,w,c
 13221  001440  2212               	addwfc	??i2_printf+3,f,c
 13222  001442  5011               	movf	??i2_printf+2,w,c
 13223  001444  261E               	addwf	i2printf@width,f,c
 13224  001446  5012               	movf	??i2_printf+3,w,c
 13225  001448  221F               	addwfc	i2printf@width+1,f,c
 13226  00144A  4A0D               	infsnz	i2printf@f,f,c
 13227  00144C  2A0E               	incf	i2printf@f+1,f,c
 13228                           
 13229                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 13230  00144E  C00D  FFF6         	movff	i2printf@f,tblptrl
 13231  001452  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 13232  001456                     	if	0	;tblptru may be non-zero
 13233  001456                     	endif
 13234  001456                     	if	0	;tblptru may be non-zero
 13235  001456                     	endif
 13236  001456  0008               	tblrd		*
 13237  001458  50F5               	movf	tablat,w,c
 13238  00145A  EC84  F01A         	call	i2_isdigit
 13239  00145E  A0D8               	btfss	status,0,c
 13240  001460  D03A               	goto	i2l4294
 13241  001462  D7D1               	goto	i2l4262
 13242  001464                     i2l4270:
 13243                           
 13244                           ;doprnt.c: 721: flag |= 0x80;
 13245  001464  8E1D               	bsf	i2printf@flag,7,c
 13246                           
 13247                           ;doprnt.c: 723: break;
 13248  001466  D04E               	goto	i2l522
 13249  001468                     i2l4272:
 13250                           
 13251                           ;doprnt.c: 757: if(width > len)
 13252  001468  501E               	movf	i2printf@width,w,c
 13253  00146A  5C18               	subwf	i2printf@len,w,c
 13254  00146C  501F               	movf	i2printf@width+1,w,c
 13255  00146E  5819               	subwfb	i2printf@len+1,w,c
 13256  001470  B0D8               	btfsc	status,0,c
 13257  001472  D005               	goto	i2l4276
 13258                           
 13259                           ;doprnt.c: 758: width -= len;
 13260  001474  5018               	movf	i2printf@len,w,c
 13261  001476  5E1E               	subwf	i2printf@width,f,c
 13262  001478  5019               	movf	i2printf@len+1,w,c
 13263  00147A  5A1F               	subwfb	i2printf@width+1,f,c
 13264  00147C  D008               	goto	i2l4280
 13265  00147E                     i2l4276:
 13266                           
 13267                           ;doprnt.c: 759: else
 13268                           ;doprnt.c: 760: width = 0;
 13269  00147E  0E00               	movlw	0
 13270  001480  6E1F               	movwf	i2printf@width+1,c
 13271  001482  0E00               	movlw	0
 13272  001484  6E1E               	movwf	i2printf@width,c
 13273                           
 13274                           ;doprnt.c: 764: while(width--)
 13275  001486  D003               	goto	i2l4280
 13276  001488                     i2l4278:
 13277                           
 13278                           ;doprnt.c: 765: (putch(' ') );
 13279  001488  0E20               	movlw	32
 13280  00148A  ECD4  F01A         	call	i2_putch
 13281  00148E                     i2l4280:
 13282  00148E  061E               	decf	i2printf@width,f,c
 13283  001490  A0D8               	btfss	status,0,c
 13284  001492  061F               	decf	i2printf@width+1,f,c
 13285  001494  281E               	incf	i2printf@width,w,c
 13286  001496  E1F8               	bnz	i2l4278
 13287  001498  281F               	incf	i2printf@width+1,w,c
 13288  00149A  B4D8               	btfsc	status,2,c
 13289  00149C  D00A               	goto	i2l4286
 13290  00149E  D7F4               	goto	i2l4278
 13291  0014A0                     i2l4282:
 13292                           
 13293                           ;doprnt.c: 768: (putch(*cp++) );
 13294  0014A0  C013  FFD9         	movff	i2printf@cp,fsr2l
 13295  0014A4  C014  FFDA         	movff	i2printf@cp+1,fsr2h
 13296  0014A8  50DF               	movf	indf2,w,c
 13297  0014AA  ECD4  F01A         	call	i2_putch
 13298  0014AE  4A13               	infsnz	i2printf@cp,f,c
 13299  0014B0  2A14               	incf	i2printf@cp+1,f,c
 13300  0014B2                     i2l4286:
 13301  0014B2  0618               	decf	i2printf@len,f,c
 13302  0014B4  A0D8               	btfss	status,0,c
 13303  0014B6  0619               	decf	i2printf@len+1,f,c
 13304  0014B8  2818               	incf	i2printf@len,w,c
 13305  0014BA  E1F2               	bnz	i2l4282
 13306  0014BC  2819               	incf	i2printf@len+1,w,c
 13307  0014BE  B4D8               	btfsc	status,2,c
 13308  0014C0  D124               	goto	i2l4392
 13309  0014C2  D7EE               	goto	i2l4282
 13310  0014C4                     i2l4288:
 13311                           
 13312                           ;doprnt.c: 805: cp = (char *)&c;
 13313  0014C4  0E20               	movlw	low i2printf@c
 13314  0014C6  6E13               	movwf	i2printf@cp,c
 13315  0014C8  0E00               	movlw	high i2printf@c
 13316  0014CA  6E14               	movwf	i2printf@cp+1,c
 13317                           
 13318                           ;doprnt.c: 806: len = 1;
 13319  0014CC  0E00               	movlw	0
 13320  0014CE  6E19               	movwf	i2printf@len+1,c
 13321  0014D0  0E01               	movlw	1
 13322  0014D2  6E18               	movwf	i2printf@len,c
 13323                           
 13324                           ;doprnt.c: 807: goto dostring;
 13325  0014D4  D7C9               	goto	i2l4272
 13326  0014D6                     i2l4294:
 13327  0014D6  C00D  FFF6         	movff	i2printf@f,tblptrl
 13328  0014DA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 13329  0014DE  4A0D               	infsnz	i2printf@f,f,c
 13330  0014E0  2A0E               	incf	i2printf@f+1,f,c
 13331  0014E2                     	if	0	;tblptru may be non-zero
 13332  0014E2                     	endif
 13333  0014E2                     	if	0	;tblptru may be non-zero
 13334  0014E2                     	endif
 13335  0014E2  0008               	tblrd		*
 13336  0014E4  CFF5 F020          	movff	tablat,i2printf@c
 13337  0014E8  5020               	movf	i2printf@c,w,c
 13338                           
 13339                           ; Switch size 1, requested type "space"
 13340                           ; Number of cases is 4, Range of values is 0 to 120
 13341                           ; switch strategies available:
 13342                           ; Name         Instructions Cycles
 13343                           ; simple_byte           13     7 (average)
 13344                           ;	Chosen strategy is simple_byte
 13345  0014EA  0A00               	xorlw	0	; case 0
 13346  0014EC  B4D8               	btfsc	status,2,c
 13347  0014EE  0012               	return	
 13348  0014F0  0A64               	xorlw	100	; case 100
 13349  0014F2  B4D8               	btfsc	status,2,c
 13350  0014F4  D007               	goto	i2l522
 13351  0014F6  0A0D               	xorlw	13	; case 105
 13352  0014F8  B4D8               	btfsc	status,2,c
 13353  0014FA  D004               	goto	i2l522
 13354  0014FC  0A11               	xorlw	17	; case 120
 13355  0014FE  B4D8               	btfsc	status,2,c
 13356  001500  D7B1               	goto	i2l4270
 13357  001502  D7E0               	goto	i2l4288
 13358  001504                     i2l522:
 13359                           
 13360                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 13361  001504  BE1D               	btfsc	i2printf@flag,7,c
 13362  001506  D015               	goto	i2l4306
 13363                           
 13364                           ;doprnt.c: 1253: {
 13365                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 13366  001508  C016  FFD9         	movff	i2printf@ap,fsr2l
 13367  00150C  C017  FFDA         	movff	i2printf@ap+1,fsr2h
 13368  001510  CFDE F01B          	movff	postinc2,i2printf@val
 13369  001514  CFDD F01C          	movff	postdec2,i2printf@val+1
 13370  001518  0E02               	movlw	2
 13371  00151A  2616               	addwf	i2printf@ap,f,c
 13372  00151C  0E00               	movlw	0
 13373  00151E  2217               	addwfc	i2printf@ap+1,f,c
 13374                           
 13375                           ;doprnt.c: 1261: if((int)val < 0) {
 13376  001520  AE1C               	btfss	i2printf@val+1,7,c
 13377  001522  D044               	goto	i2l4340
 13378                           
 13379                           ;doprnt.c: 1262: flag |= 0x03;
 13380  001524  0E03               	movlw	3
 13381  001526  121D               	iorwf	i2printf@flag,f,c
 13382                           
 13383                           ;doprnt.c: 1263: val = -val;
 13384  001528  6C1B               	negf	i2printf@val,c
 13385  00152A  1E1C               	comf	i2printf@val+1,f,c
 13386  00152C  B0D8               	btfsc	status,0,c
 13387  00152E  2A1C               	incf	i2printf@val+1,f,c
 13388                           
 13389                           ;doprnt.c: 1264: }
 13390                           ;doprnt.c: 1266: }
 13391  001530  D03D               	goto	i2l4340
 13392  001532                     i2l4306:
 13393                           
 13394                           ;doprnt.c: 1268: else
 13395                           ;doprnt.c: 1273: {
 13396                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 13397  001532  C016  FFD9         	movff	i2printf@ap,fsr2l
 13398  001536  C017  FFDA         	movff	i2printf@ap+1,fsr2h
 13399  00153A  CFDE F01B          	movff	postinc2,i2printf@val
 13400  00153E  CFDD F01C          	movff	postdec2,i2printf@val+1
 13401  001542  0E02               	movlw	2
 13402  001544  2616               	addwf	i2printf@ap,f,c
 13403  001546  0E00               	movlw	0
 13404  001548  2217               	addwfc	i2printf@ap+1,f,c
 13405                           
 13406                           ;doprnt.c: 1287: }
 13407                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 13408  00154A  D030               	goto	i2l4340
 13409  00154C                     i2l4310:
 13410                           
 13411                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13412  00154C  0E01               	movlw	1
 13413  00154E  6E20               	movwf	i2printf@c,c
 13414  001550                     i2l4312:
 13415  001550  0E05               	movlw	5
 13416  001552  1820               	xorwf	i2printf@c,w,c
 13417  001554  B4D8               	btfsc	status,2,c
 13418  001556  D032               	goto	i2l4342
 13419                           
 13420                           ;doprnt.c: 1306: if(val < dpowers[c])
 13421  001558  5020               	movf	i2printf@c,w,c
 13422  00155A  0D02               	mullw	2
 13423  00155C  0E54               	movlw	low _dpowers
 13424  00155E  24F3               	addwf	prodl,w,c
 13425  001560  6EF6               	movwf	tblptrl,c
 13426  001562  0EFD               	movlw	high _dpowers
 13427  001564  20F4               	addwfc	prodh,w,c
 13428  001566  6EF7               	movwf	tblptrh,c
 13429  001568                     	if	0	;There are less than 3 active tblptr bytes
 13430  001568                     	endif
 13431  001568  0009               	tblrd		*+
 13432  00156A  50F5               	movf	tablat,w,c
 13433  00156C  5C1B               	subwf	i2printf@val,w,c
 13434  00156E  0009               	tblrd		*+
 13435  001570  50F5               	movf	tablat,w,c
 13436  001572  581C               	subwfb	i2printf@val+1,w,c
 13437  001574  A0D8               	btfss	status,0,c
 13438  001576  D022               	goto	i2l4342
 13439                           
 13440                           ;doprnt.c: 1307: break;
 13441  001578  2A20               	incf	i2printf@c,f,c
 13442  00157A  D7EA               	goto	i2l4312
 13443  00157C                     i2l4324:
 13444                           
 13445                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 13446  00157C  0E01               	movlw	1
 13447  00157E  6E20               	movwf	i2printf@c,c
 13448  001580                     i2l4326:
 13449  001580  0E04               	movlw	4
 13450  001582  1820               	xorwf	i2printf@c,w,c
 13451  001584  B4D8               	btfsc	status,2,c
 13452  001586  D01A               	goto	i2l4342
 13453                           
 13454                           ;doprnt.c: 1317: if(val < hexpowers[c])
 13455  001588  5020               	movf	i2printf@c,w,c
 13456  00158A  0D02               	mullw	2
 13457  00158C  0E5E               	movlw	low _hexpowers
 13458  00158E  24F3               	addwf	prodl,w,c
 13459  001590  6EF6               	movwf	tblptrl,c
 13460  001592  0EFD               	movlw	high _hexpowers
 13461  001594  20F4               	addwfc	prodh,w,c
 13462  001596  6EF7               	movwf	tblptrh,c
 13463  001598                     	if	0	;There are less than 3 active tblptr bytes
 13464  001598                     	endif
 13465  001598  0009               	tblrd		*+
 13466  00159A  50F5               	movf	tablat,w,c
 13467  00159C  5C1B               	subwf	i2printf@val,w,c
 13468  00159E  0009               	tblrd		*+
 13469  0015A0  50F5               	movf	tablat,w,c
 13470  0015A2  581C               	subwfb	i2printf@val+1,w,c
 13471  0015A4  A0D8               	btfss	status,0,c
 13472  0015A6  D00A               	goto	i2l4342
 13473                           
 13474                           ;doprnt.c: 1318: break;
 13475  0015A8  2A20               	incf	i2printf@c,f,c
 13476  0015AA  D7EA               	goto	i2l4326
 13477  0015AC                     i2l4340:
 13478  0015AC  501D               	movf	i2printf@flag,w,c
 13479  0015AE  0B80               	andlw	128
 13480                           
 13481                           ; Switch size 1, requested type "space"
 13482                           ; Number of cases is 2, Range of values is 0 to 128
 13483                           ; switch strategies available:
 13484                           ; Name         Instructions Cycles
 13485                           ; simple_byte            7     4 (average)
 13486                           ;	Chosen strategy is simple_byte
 13487  0015B0  0A00               	xorlw	0	; case 0
 13488  0015B2  B4D8               	btfsc	status,2,c
 13489  0015B4  D7CB               	goto	i2l4310
 13490  0015B6  0A80               	xorlw	128	; case 128
 13491  0015B8  B4D8               	btfsc	status,2,c
 13492  0015BA  D7E0               	goto	i2l4324
 13493  0015BC                     i2l4342:
 13494                           
 13495                           ;doprnt.c: 1345: if(width && flag & 0x03)
 13496  0015BC  501E               	movf	i2printf@width,w,c
 13497  0015BE  101F               	iorwf	i2printf@width+1,w,c
 13498  0015C0  B4D8               	btfsc	status,2,c
 13499  0015C2  D009               	goto	i2l4348
 13500  0015C4  C01D  F00F         	movff	i2printf@flag,??i2_printf
 13501  0015C8  0E03               	movlw	3
 13502  0015CA  160F               	andwf	??i2_printf,f,c
 13503  0015CC  B4D8               	btfsc	status,2,c
 13504  0015CE  D003               	goto	i2l4348
 13505                           
 13506                           ;doprnt.c: 1346: width--;
 13507  0015D0  061E               	decf	i2printf@width,f,c
 13508  0015D2  A0D8               	btfss	status,0,c
 13509  0015D4  061F               	decf	i2printf@width+1,f,c
 13510  0015D6                     i2l4348:
 13511                           
 13512                           ;doprnt.c: 1381: if(width > c)
 13513  0015D6  0E80               	movlw	128
 13514  0015D8  BE20               	btfsc	i2printf@c,7,c
 13515  0015DA  0E7F               	movlw	127
 13516  0015DC  6E0F               	movwf	??i2_printf& (0+255),c
 13517  0015DE  501E               	movf	i2printf@width,w,c
 13518  0015E0  5C20               	subwf	i2printf@c,w,c
 13519  0015E2  501F               	movf	i2printf@width+1,w,c
 13520  0015E4  0A80               	xorlw	128
 13521  0015E6  580F               	subwfb	??i2_printf& (0+255),w,c
 13522  0015E8  B0D8               	btfsc	status,0,c
 13523  0015EA  D007               	goto	i2l4352
 13524                           
 13525                           ;doprnt.c: 1382: width -= c;
 13526  0015EC  5020               	movf	i2printf@c,w,c
 13527  0015EE  5E1E               	subwf	i2printf@width,f,c
 13528  0015F0  0E00               	movlw	0
 13529  0015F2  BE20               	btfsc	i2printf@c,7,c
 13530  0015F4  0EFF               	movlw	255
 13531  0015F6  5A1F               	subwfb	i2printf@width+1,f,c
 13532  0015F8  D004               	goto	i2l4354
 13533  0015FA                     i2l4352:
 13534                           
 13535                           ;doprnt.c: 1383: else
 13536                           ;doprnt.c: 1384: width = 0;
 13537  0015FA  0E00               	movlw	0
 13538  0015FC  6E1F               	movwf	i2printf@width+1,c
 13539  0015FE  0E00               	movlw	0
 13540  001600  6E1E               	movwf	i2printf@width,c
 13541  001602                     i2l4354:
 13542                           
 13543                           ;doprnt.c: 1387: if(flag & 0x04) {
 13544  001602  A41D               	btfss	i2printf@flag,2,c
 13545  001604  D014               	goto	i2l4366
 13546                           
 13547                           ;doprnt.c: 1392: if(flag & 0x03)
 13548  001606  C01D  F00F         	movff	i2printf@flag,??i2_printf
 13549  00160A  0E03               	movlw	3
 13550  00160C  160F               	andwf	??i2_printf,f,c
 13551  00160E  B4D8               	btfsc	status,2,c
 13552  001610  D003               	goto	i2l4360
 13553                           
 13554                           ;doprnt.c: 1393: (putch('-') );
 13555  001612  0E2D               	movlw	45
 13556  001614  ECD4  F01A         	call	i2_putch
 13557  001618                     i2l4360:
 13558                           
 13559                           ;doprnt.c: 1415: if(width)
 13560  001618  501E               	movf	i2printf@width,w,c
 13561  00161A  101F               	iorwf	i2printf@width+1,w,c
 13562  00161C  B4D8               	btfsc	status,2,c
 13563  00161E  D01E               	goto	i2l4376
 13564                           
 13565                           ;doprnt.c: 1417: (putch('0') );
 13566                           
 13567                           ;doprnt.c: 1416: do
 13568  001620  0E30               	movlw	48
 13569  001622  ECD4  F01A         	call	i2_putch
 13570                           
 13571                           ;doprnt.c: 1418: while(--width);
 13572  001626  061E               	decf	i2printf@width,f,c
 13573  001628  A0D8               	btfss	status,0,c
 13574  00162A  061F               	decf	i2printf@width+1,f,c
 13575  00162C  D7F5               	goto	i2l4360
 13576  00162E                     i2l4366:
 13577                           
 13578                           ;doprnt.c: 1422: {
 13579                           ;doprnt.c: 1424: if(width
 13580                           ;doprnt.c: 1428: )
 13581  00162E  501E               	movf	i2printf@width,w,c
 13582  001630  101F               	iorwf	i2printf@width+1,w,c
 13583  001632  B4D8               	btfsc	status,2,c
 13584  001634  D00A               	goto	i2l4372
 13585  001636                     i2l4368:
 13586                           
 13587                           ;doprnt.c: 1430: (putch(' ') );
 13588  001636  0E20               	movlw	32
 13589  001638  ECD4  F01A         	call	i2_putch
 13590                           
 13591                           ;doprnt.c: 1431: while(--width);
 13592  00163C  061E               	decf	i2printf@width,f,c
 13593  00163E  A0D8               	btfss	status,0,c
 13594  001640  061F               	decf	i2printf@width+1,f,c
 13595  001642  501E               	movf	i2printf@width,w,c
 13596  001644  101F               	iorwf	i2printf@width+1,w,c
 13597  001646  A4D8               	btfss	status,2,c
 13598  001648  D7F6               	goto	i2l4368
 13599  00164A                     i2l4372:
 13600                           
 13601                           ;doprnt.c: 1438: if(flag & 0x03)
 13602  00164A  C01D  F00F         	movff	i2printf@flag,??i2_printf
 13603  00164E  0E03               	movlw	3
 13604  001650  160F               	andwf	??i2_printf,f,c
 13605  001652  B4D8               	btfsc	status,2,c
 13606  001654  D003               	goto	i2l4376
 13607                           
 13608                           ;doprnt.c: 1439: (putch('-') );
 13609  001656  0E2D               	movlw	45
 13610  001658  ECD4  F01A         	call	i2_putch
 13611  00165C                     i2l4376:
 13612                           
 13613                           ;doprnt.c: 1469: }
 13614                           ;doprnt.c: 1472: prec = c;
 13615  00165C  C020  F01A         	movff	i2printf@c,i2printf@prec
 13616                           
 13617                           ;doprnt.c: 1474: while(prec--) {
 13618  001660  D050               	goto	i2l4390
 13619  001662                     i2l4378:
 13620                           
 13621                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13622  001662  501A               	movf	i2printf@prec,w,c
 13623  001664  0D02               	mullw	2
 13624  001666  0E54               	movlw	low _dpowers
 13625  001668  24F3               	addwf	prodl,w,c
 13626  00166A  6EF6               	movwf	tblptrl,c
 13627  00166C  0EFD               	movlw	high _dpowers
 13628  00166E  20F4               	addwfc	prodh,w,c
 13629  001670  6EF7               	movwf	tblptrh,c
 13630  001672                     	if	0	;There are less than 3 active tblptr bytes
 13631  001672                     	endif
 13632  001672  0009               	tblrd		*+
 13633  001674  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 13634  001678  000A               	tblrd		*-
 13635  00167A  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 13636  00167E  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
 13637  001682  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 13638  001686  EC75  F017         	call	i2___lwdiv	;wreg free
 13639  00168A  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 13640  00168E  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 13641  001692  0E00               	movlw	0
 13642  001694  6E0B               	movwf	i2___lwmod@divisor+1,c
 13643  001696  0E0A               	movlw	10
 13644  001698  6E0A               	movwf	i2___lwmod@divisor,c
 13645  00169A  EC9A  F018         	call	i2___lwmod	;wreg free
 13646  00169E  5008               	movf	?i2___lwmod,w,c
 13647  0016A0  0F30               	addlw	48
 13648  0016A2  6E20               	movwf	i2printf@c,c
 13649                           
 13650                           ;doprnt.c: 1491: break;
 13651  0016A4  D02B               	goto	i2l4388
 13652  0016A6                     i2l4380:
 13653                           
 13654                           ;doprnt.c: 1499: {
 13655                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 13656  0016A6  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
 13657  0016AA  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 13658  0016AE  501A               	movf	i2printf@prec,w,c
 13659  0016B0  0D02               	mullw	2
 13660  0016B2  0E5E               	movlw	low _hexpowers
 13661  0016B4  24F3               	addwf	prodl,w,c
 13662  0016B6  6EF6               	movwf	tblptrl,c
 13663  0016B8  0EFD               	movlw	high _hexpowers
 13664  0016BA  20F4               	addwfc	prodh,w,c
 13665  0016BC  6EF7               	movwf	tblptrh,c
 13666  0016BE                     	if	0	;There are less than 3 active tblptr bytes
 13667  0016BE                     	endif
 13668  0016BE  0009               	tblrd		*+
 13669  0016C0  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 13670  0016C4  000A               	tblrd		*-
 13671  0016C6  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 13672  0016CA  EC75  F017         	call	i2___lwdiv	;wreg free
 13673  0016CE  5001               	movf	?i2___lwdiv,w,c
 13674  0016D0  0B0F               	andlw	15
 13675  0016D2  6E15               	movwf	i2printf@idx,c
 13676                           
 13677                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 13678  0016D4  5015               	movf	i2printf@idx,w,c
 13679  0016D6  0D01               	mullw	1
 13680  0016D8  0E57               	movlw	low STR_44
 13681  0016DA  24F3               	addwf	prodl,w,c
 13682  0016DC  6EF6               	movwf	tblptrl,c
 13683  0016DE  0EFE               	movlw	high STR_44
 13684  0016E0  20F4               	addwfc	prodh,w,c
 13685  0016E2  6EF7               	movwf	tblptrh,c
 13686  0016E4                     	if	0	;There are less than 3 active tblptr bytes
 13687  0016E4                     	endif
 13688  0016E4  0008               	tblrd		*
 13689  0016E6  CFF5 F020          	movff	tablat,i2printf@c
 13690                           
 13691                           ;doprnt.c: 1523: }
 13692                           
 13693                           ;doprnt.c: 1508: }
 13694                           ;doprnt.c: 1510: break;
 13695  0016EA  D008               	goto	i2l4388
 13696  0016EC                     i2l4386:
 13697  0016EC  501D               	movf	i2printf@flag,w,c
 13698  0016EE  0B80               	andlw	128
 13699                           
 13700                           ; Switch size 1, requested type "space"
 13701                           ; Number of cases is 2, Range of values is 0 to 128
 13702                           ; switch strategies available:
 13703                           ; Name         Instructions Cycles
 13704                           ; simple_byte            7     4 (average)
 13705                           ;	Chosen strategy is simple_byte
 13706  0016F0  0A00               	xorlw	0	; case 0
 13707  0016F2  B4D8               	btfsc	status,2,c
 13708  0016F4  D7B6               	goto	i2l4378
 13709  0016F6  0A80               	xorlw	128	; case 128
 13710  0016F8  B4D8               	btfsc	status,2,c
 13711  0016FA  D7D5               	goto	i2l4380
 13712  0016FC                     i2l4388:
 13713                           
 13714                           ;doprnt.c: 1524: (putch(c) );
 13715  0016FC  5020               	movf	i2printf@c,w,c
 13716  0016FE  ECD4  F01A         	call	i2_putch
 13717  001702                     i2l4390:
 13718  001702  061A               	decf	i2printf@prec,f,c
 13719  001704  281A               	incf	i2printf@prec,w,c
 13720  001706  A4D8               	btfss	status,2,c
 13721  001708  D7F1               	goto	i2l4386
 13722  00170A                     i2l4392:
 13723  00170A  C00D  FFF6         	movff	i2printf@f,tblptrl
 13724  00170E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 13725  001712  4A0D               	infsnz	i2printf@f,f,c
 13726  001714  2A0E               	incf	i2printf@f+1,f,c
 13727  001716                     	if	0	;tblptru may be non-zero
 13728  001716                     	endif
 13729  001716                     	if	0	;tblptru may be non-zero
 13730  001716                     	endif
 13731  001716  0008               	tblrd		*
 13732  001718  CFF5 F020          	movff	tablat,i2printf@c
 13733  00171C  5020               	movf	i2printf@c,w,c
 13734  00171E  B4D8               	btfsc	status,2,c
 13735  001720  0012               	return	
 13736  001722  D648               	goto	i2l4246
 13737  001724                     __end_ofi2_printf:
 13738                           	opt stack 0
 13739                           pclatu	equ	0xFFB
 13740                           pclath	equ	0xFFA
 13741                           tblptru	equ	0xFF8
 13742                           tblptrh	equ	0xFF7
 13743                           tblptrl	equ	0xFF6
 13744                           tablat	equ	0xFF5
 13745                           prodh	equ	0xFF4
 13746                           prodl	equ	0xFF3
 13747                           intcon	equ	0xFF2
 13748                           intcon2	equ	0xFF1
 13749                           intcon3	equ	0xFF0
 13750                           postinc0	equ	0xFEE
 13751                           fsr0h	equ	0xFEA
 13752                           fsr0l	equ	0xFE9
 13753                           wreg	equ	0xFE8
 13754                           fsr1h	equ	0xFE2
 13755                           fsr1l	equ	0xFE1
 13756                           indf2	equ	0xFDF
 13757                           postinc2	equ	0xFDE
 13758                           postdec2	equ	0xFDD
 13759                           fsr2h	equ	0xFDA
 13760                           fsr2l	equ	0xFD9
 13761                           status	equ	0xFD8
 13762                           
 13763 ;; *************** function i2_putch *****************
 13764 ;; Defined at:
 13765 ;;		line 31 in file "lcd.c"
 13766 ;; Parameters:    Size  Location     Type
 13767 ;;  data            1    wreg     unsigned char 
 13768 ;; Auto vars:     Size  Location     Type
 13769 ;;  data            1    2[COMRAM] unsigned char 
 13770 ;; Return value:  Size  Location     Type
 13771 ;;                  1    wreg      void 
 13772 ;; Registers used:
 13773 ;;		wreg, status,2, status,0, cstack
 13774 ;; Tracked objects:
 13775 ;;		On entry : 0/0
 13776 ;;		On exit  : 0/0
 13777 ;;		Unchanged: 0/0
 13778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13780 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13782 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13783 ;;Total ram usage:        1 bytes
 13784 ;; Hardware stack levels used:    1
 13785 ;; Hardware stack levels required when called:    1
 13786 ;; This function calls:
 13787 ;;		i2_lcdNibble
 13788 ;; This function is called by:
 13789 ;;		i2_printf
 13790 ;; This function uses a non-reentrant model
 13791 ;;
 13792                           
 13793                           	psect	text61
 13794  0035A8                     __ptext61:
 13795                           	opt stack 0
 13796  0035A8                     i2_putch:
 13797                           	opt stack 19
 13798                           
 13799                           ;incstack = 0
 13800                           ;i2putch@data stored from wreg
 13801  0035A8  6E03               	movwf	i2putch@data,c
 13802                           
 13803                           ;lcd.c: 32: LATDbits.LATD2 = 1;
 13804  0035AA  848C               	bsf	3980,2,c	;volatile
 13805                           
 13806                           ;lcd.c: 33: lcdNibble(data);
 13807  0035AC  5003               	movf	i2putch@data,w,c
 13808  0035AE  ECC5  F017         	call	i2_lcdNibble
 13809  0035B2  0012               	return		;funcret
 13810  0035B4                     __end_ofi2_putch:
 13811                           	opt stack 0
 13812                           pclatu	equ	0xFFB
 13813                           pclath	equ	0xFFA
 13814                           tblptru	equ	0xFF8
 13815                           tblptrh	equ	0xFF7
 13816                           tblptrl	equ	0xFF6
 13817                           tablat	equ	0xFF5
 13818                           prodh	equ	0xFF4
 13819                           prodl	equ	0xFF3
 13820                           intcon	equ	0xFF2
 13821                           intcon2	equ	0xFF1
 13822                           intcon3	equ	0xFF0
 13823                           postinc0	equ	0xFEE
 13824                           fsr0h	equ	0xFEA
 13825                           fsr0l	equ	0xFE9
 13826                           wreg	equ	0xFE8
 13827                           fsr1h	equ	0xFE2
 13828                           fsr1l	equ	0xFE1
 13829                           indf2	equ	0xFDF
 13830                           postinc2	equ	0xFDE
 13831                           postdec2	equ	0xFDD
 13832                           fsr2h	equ	0xFDA
 13833                           fsr2l	equ	0xFD9
 13834                           status	equ	0xFD8
 13835                           
 13836 ;; *************** function i2_isdigit *****************
 13837 ;; Defined at:
 13838 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/isdigit.c"
 13839 ;; Parameters:    Size  Location     Type
 13840 ;;  c               1    wreg     unsigned char 
 13841 ;; Auto vars:     Size  Location     Type
 13842 ;;  c               1    2[COMRAM] unsigned char 
 13843 ;; Return value:  Size  Location     Type
 13844 ;;		None               void
 13845 ;; Registers used:
 13846 ;;		wreg, status,2, status,0
 13847 ;; Tracked objects:
 13848 ;;		On entry : 0/0
 13849 ;;		On exit  : 0/0
 13850 ;;		Unchanged: 0/0
 13851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13853 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13854 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13855 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13856 ;;Total ram usage:        3 bytes
 13857 ;; Hardware stack levels used:    1
 13858 ;; This function calls:
 13859 ;;		Nothing
 13860 ;; This function is called by:
 13861 ;;		i2_printf
 13862 ;; This function uses a non-reentrant model
 13863 ;;
 13864                           
 13865                           	psect	text62
 13866  003508                     __ptext62:
 13867                           	opt stack 0
 13868  003508                     i2_isdigit:
 13869                           	opt stack 20
 13870                           
 13871                           ;incstack = 0
 13872                           ;i2isdigit@c stored from wreg
 13873  003508  6E03               	movwf	i2isdigit@c,c
 13874  00350A  0E00               	movlw	0
 13875  00350C  6E02               	movwf	i2_isdigit$1143,c
 13876  00350E  0E3A               	movlw	58
 13877  003510  6003               	cpfslt	i2isdigit@c,c
 13878  003512  D005               	goto	i2l3960
 13879  003514  0E2F               	movlw	47
 13880  003516  6403               	cpfsgt	i2isdigit@c,c
 13881  003518  D002               	goto	i2l3960
 13882  00351A  0E01               	movlw	1
 13883  00351C  6E02               	movwf	i2_isdigit$1143,c
 13884  00351E                     i2l3960:
 13885  00351E  C002  F001         	movff	i2_isdigit$1143,??i2_isdigit
 13886  003522  3001               	rrcf	??i2_isdigit,w,c
 13887  003524  0012               	return	
 13888  003526                     __end_ofi2_isdigit:
 13889                           	opt stack 0
 13890                           pclatu	equ	0xFFB
 13891                           pclath	equ	0xFFA
 13892                           tblptru	equ	0xFF8
 13893                           tblptrh	equ	0xFF7
 13894                           tblptrl	equ	0xFF6
 13895                           tablat	equ	0xFF5
 13896                           prodh	equ	0xFF4
 13897                           prodl	equ	0xFF3
 13898                           intcon	equ	0xFF2
 13899                           intcon2	equ	0xFF1
 13900                           intcon3	equ	0xFF0
 13901                           postinc0	equ	0xFEE
 13902                           fsr0h	equ	0xFEA
 13903                           fsr0l	equ	0xFE9
 13904                           wreg	equ	0xFE8
 13905                           fsr1h	equ	0xFE2
 13906                           fsr1l	equ	0xFE1
 13907                           indf2	equ	0xFDF
 13908                           postinc2	equ	0xFDE
 13909                           postdec2	equ	0xFDD
 13910                           fsr2h	equ	0xFDA
 13911                           fsr2l	equ	0xFD9
 13912                           status	equ	0xFD8
 13913                           
 13914 ;; *************** function i2___wmul *****************
 13915 ;; Defined at:
 13916 ;;		line 15 in file "/Applications/microchip/xc8/v1.41/sources/common/Umul16.c"
 13917 ;; Parameters:    Size  Location     Type
 13918 ;;  multiplier      2    0[COMRAM] unsigned int 
 13919 ;;  multiplicand    2    2[COMRAM] unsigned int 
 13920 ;; Auto vars:     Size  Location     Type
 13921 ;;  __wmul          2    4[COMRAM] unsigned int 
 13922 ;; Return value:  Size  Location     Type
 13923 ;;                  2    0[COMRAM] unsigned int 
 13924 ;; Registers used:
 13925 ;;		wreg, status,2, status,0, prodl, prodh
 13926 ;; Tracked objects:
 13927 ;;		On entry : 0/0
 13928 ;;		On exit  : 0/0
 13929 ;;		Unchanged: 0/0
 13930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13931 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13932 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13934 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13935 ;;Total ram usage:        6 bytes
 13936 ;; Hardware stack levels used:    1
 13937 ;; This function calls:
 13938 ;;		Nothing
 13939 ;; This function is called by:
 13940 ;;		i2_printf
 13941 ;; This function uses a non-reentrant model
 13942 ;;
 13943                           
 13944                           	psect	text63
 13945  00345E                     __ptext63:
 13946                           	opt stack 0
 13947  00345E                     i2___wmul:
 13948                           	opt stack 20
 13949                           
 13950                           ;incstack = 0
 13951  00345E  5001               	movf	i2___wmul@multiplier,w,c
 13952  003460  0203               	mulwf	i2___wmul@multiplicand,c
 13953  003462  CFF3 F005          	movff	prodl,i2___wmul@product
 13954  003466  CFF4 F006          	movff	prodh,i2___wmul@product+1
 13955  00346A  5001               	movf	i2___wmul@multiplier,w,c
 13956  00346C  0204               	mulwf	i2___wmul@multiplicand+1,c
 13957  00346E  50F3               	movf	prodl,w,c
 13958  003470  2606               	addwf	i2___wmul@product+1,f,c
 13959  003472  5002               	movf	i2___wmul@multiplier+1,w,c
 13960  003474  0203               	mulwf	i2___wmul@multiplicand,c
 13961  003476  50F3               	movf	prodl,w,c
 13962  003478  2606               	addwf	i2___wmul@product+1,f,c
 13963  00347A  C005  F001         	movff	i2___wmul@product,?i2___wmul
 13964  00347E  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 13965  003482  0012               	return	
 13966  003484                     __end_ofi2___wmul:
 13967                           	opt stack 0
 13968                           pclatu	equ	0xFFB
 13969                           pclath	equ	0xFFA
 13970                           tblptru	equ	0xFF8
 13971                           tblptrh	equ	0xFF7
 13972                           tblptrl	equ	0xFF6
 13973                           tablat	equ	0xFF5
 13974                           prodh	equ	0xFF4
 13975                           prodl	equ	0xFF3
 13976                           intcon	equ	0xFF2
 13977                           intcon2	equ	0xFF1
 13978                           intcon3	equ	0xFF0
 13979                           postinc0	equ	0xFEE
 13980                           fsr0h	equ	0xFEA
 13981                           fsr0l	equ	0xFE9
 13982                           wreg	equ	0xFE8
 13983                           fsr1h	equ	0xFE2
 13984                           fsr1l	equ	0xFE1
 13985                           indf2	equ	0xFDF
 13986                           postinc2	equ	0xFDE
 13987                           postdec2	equ	0xFDD
 13988                           fsr2h	equ	0xFDA
 13989                           fsr2l	equ	0xFD9
 13990                           status	equ	0xFD8
 13991                           
 13992 ;; *************** function i2___lwmod *****************
 13993 ;; Defined at:
 13994 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwmod.c"
 13995 ;; Parameters:    Size  Location     Type
 13996 ;;  dividend        2    7[COMRAM] unsigned int 
 13997 ;;  divisor         2    9[COMRAM] unsigned int 
 13998 ;; Auto vars:     Size  Location     Type
 13999 ;;  __lwmod         1   11[COMRAM] unsigned char 
 14000 ;; Return value:  Size  Location     Type
 14001 ;;                  2    7[COMRAM] unsigned int 
 14002 ;; Registers used:
 14003 ;;		wreg, status,2, status,0
 14004 ;; Tracked objects:
 14005 ;;		On entry : 0/0
 14006 ;;		On exit  : 0/0
 14007 ;;		Unchanged: 0/0
 14008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14009 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14010 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14012 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14013 ;;Total ram usage:        5 bytes
 14014 ;; Hardware stack levels used:    1
 14015 ;; This function calls:
 14016 ;;		Nothing
 14017 ;; This function is called by:
 14018 ;;		i2_printf
 14019 ;; This function uses a non-reentrant model
 14020 ;;
 14021                           
 14022                           	psect	text64
 14023  003134                     __ptext64:
 14024                           	opt stack 0
 14025  003134                     i2___lwmod:
 14026                           	opt stack 20
 14027                           
 14028                           ;incstack = 0
 14029  003134  500A               	movf	i2___lwmod@divisor,w,c
 14030  003136  100B               	iorwf	i2___lwmod@divisor+1,w,c
 14031  003138  B4D8               	btfsc	status,2,c
 14032  00313A  D018               	goto	i2l986
 14033  00313C  0E01               	movlw	1
 14034  00313E  6E0C               	movwf	i2___lwmod@counter,c
 14035  003140  D004               	goto	i2l3992
 14036  003142                     i2l3990:
 14037  003142  90D8               	bcf	status,0,c
 14038  003144  360A               	rlcf	i2___lwmod@divisor,f,c
 14039  003146  360B               	rlcf	i2___lwmod@divisor+1,f,c
 14040  003148  2A0C               	incf	i2___lwmod@counter,f,c
 14041  00314A                     i2l3992:
 14042  00314A  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 14043  00314C  D7FA               	goto	i2l3990
 14044  00314E                     i2l3994:
 14045  00314E  500A               	movf	i2___lwmod@divisor,w,c
 14046  003150  5C08               	subwf	i2___lwmod@dividend,w,c
 14047  003152  500B               	movf	i2___lwmod@divisor+1,w,c
 14048  003154  5809               	subwfb	i2___lwmod@dividend+1,w,c
 14049  003156  A0D8               	btfss	status,0,c
 14050  003158  D004               	goto	i2l3998
 14051  00315A  500A               	movf	i2___lwmod@divisor,w,c
 14052  00315C  5E08               	subwf	i2___lwmod@dividend,f,c
 14053  00315E  500B               	movf	i2___lwmod@divisor+1,w,c
 14054  003160  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 14055  003162                     i2l3998:
 14056  003162  90D8               	bcf	status,0,c
 14057  003164  320B               	rrcf	i2___lwmod@divisor+1,f,c
 14058  003166  320A               	rrcf	i2___lwmod@divisor,f,c
 14059  003168  2E0C               	decfsz	i2___lwmod@counter,f,c
 14060  00316A  D7F1               	goto	i2l3994
 14061  00316C                     i2l986:
 14062  00316C  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 14063  003170  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 14064  003174  0012               	return		;funcret
 14065  003176                     __end_ofi2___lwmod:
 14066                           	opt stack 0
 14067                           pclatu	equ	0xFFB
 14068                           pclath	equ	0xFFA
 14069                           tblptru	equ	0xFF8
 14070                           tblptrh	equ	0xFF7
 14071                           tblptrl	equ	0xFF6
 14072                           tablat	equ	0xFF5
 14073                           prodh	equ	0xFF4
 14074                           prodl	equ	0xFF3
 14075                           intcon	equ	0xFF2
 14076                           intcon2	equ	0xFF1
 14077                           intcon3	equ	0xFF0
 14078                           postinc0	equ	0xFEE
 14079                           fsr0h	equ	0xFEA
 14080                           fsr0l	equ	0xFE9
 14081                           wreg	equ	0xFE8
 14082                           fsr1h	equ	0xFE2
 14083                           fsr1l	equ	0xFE1
 14084                           indf2	equ	0xFDF
 14085                           postinc2	equ	0xFDE
 14086                           postdec2	equ	0xFDD
 14087                           fsr2h	equ	0xFDA
 14088                           fsr2l	equ	0xFD9
 14089                           status	equ	0xFD8
 14090                           
 14091 ;; *************** function i2___lwdiv *****************
 14092 ;; Defined at:
 14093 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwdiv.c"
 14094 ;; Parameters:    Size  Location     Type
 14095 ;;  dividend        2    0[COMRAM] unsigned int 
 14096 ;;  divisor         2    2[COMRAM] unsigned int 
 14097 ;; Auto vars:     Size  Location     Type
 14098 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 14099 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 14100 ;; Return value:  Size  Location     Type
 14101 ;;                  2    0[COMRAM] unsigned int 
 14102 ;; Registers used:
 14103 ;;		wreg, status,2, status,0
 14104 ;; Tracked objects:
 14105 ;;		On entry : 0/0
 14106 ;;		On exit  : 0/0
 14107 ;;		Unchanged: 0/0
 14108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14109 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14110 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14112 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14113 ;;Total ram usage:        7 bytes
 14114 ;; Hardware stack levels used:    1
 14115 ;; This function calls:
 14116 ;;		Nothing
 14117 ;; This function is called by:
 14118 ;;		i2_printf
 14119 ;; This function uses a non-reentrant model
 14120 ;;
 14121                           
 14122                           	psect	text65
 14123  002EEA                     __ptext65:
 14124                           	opt stack 0
 14125  002EEA                     i2___lwdiv:
 14126                           	opt stack 20
 14127                           
 14128                           ;incstack = 0
 14129  002EEA  0E00               	movlw	0
 14130  002EEC  6E06               	movwf	i2___lwdiv@quotient+1,c
 14131  002EEE  0E00               	movlw	0
 14132  002EF0  6E05               	movwf	i2___lwdiv@quotient,c
 14133  002EF2  5003               	movf	i2___lwdiv@divisor,w,c
 14134  002EF4  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 14135  002EF6  B4D8               	btfsc	status,2,c
 14136  002EF8  D01C               	goto	i2l976
 14137  002EFA  0E01               	movlw	1
 14138  002EFC  6E07               	movwf	i2___lwdiv@counter,c
 14139  002EFE  D004               	goto	i2l3972
 14140  002F00                     i2l3970:
 14141  002F00  90D8               	bcf	status,0,c
 14142  002F02  3603               	rlcf	i2___lwdiv@divisor,f,c
 14143  002F04  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 14144  002F06  2A07               	incf	i2___lwdiv@counter,f,c
 14145  002F08                     i2l3972:
 14146  002F08  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 14147  002F0A  D7FA               	goto	i2l3970
 14148  002F0C                     i2l3974:
 14149  002F0C  90D8               	bcf	status,0,c
 14150  002F0E  3605               	rlcf	i2___lwdiv@quotient,f,c
 14151  002F10  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 14152  002F12  5003               	movf	i2___lwdiv@divisor,w,c
 14153  002F14  5C01               	subwf	i2___lwdiv@dividend,w,c
 14154  002F16  5004               	movf	i2___lwdiv@divisor+1,w,c
 14155  002F18  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 14156  002F1A  A0D8               	btfss	status,0,c
 14157  002F1C  D005               	goto	i2l3982
 14158  002F1E  5003               	movf	i2___lwdiv@divisor,w,c
 14159  002F20  5E01               	subwf	i2___lwdiv@dividend,f,c
 14160  002F22  5004               	movf	i2___lwdiv@divisor+1,w,c
 14161  002F24  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 14162  002F26  8005               	bsf	i2___lwdiv@quotient,0,c
 14163  002F28                     i2l3982:
 14164  002F28  90D8               	bcf	status,0,c
 14165  002F2A  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 14166  002F2C  3203               	rrcf	i2___lwdiv@divisor,f,c
 14167  002F2E  2E07               	decfsz	i2___lwdiv@counter,f,c
 14168  002F30  D7ED               	goto	i2l3974
 14169  002F32                     i2l976:
 14170  002F32  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 14171  002F36  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 14172  002F3A  0012               	return		;funcret
 14173  002F3C                     __end_ofi2___lwdiv:
 14174                           	opt stack 0
 14175                           pclatu	equ	0xFFB
 14176                           pclath	equ	0xFFA
 14177                           tblptru	equ	0xFF8
 14178                           tblptrh	equ	0xFF7
 14179                           tblptrl	equ	0xFF6
 14180                           tablat	equ	0xFF5
 14181                           prodh	equ	0xFF4
 14182                           prodl	equ	0xFF3
 14183                           intcon	equ	0xFF2
 14184                           intcon2	equ	0xFF1
 14185                           intcon3	equ	0xFF0
 14186                           postinc0	equ	0xFEE
 14187                           fsr0h	equ	0xFEA
 14188                           fsr0l	equ	0xFE9
 14189                           wreg	equ	0xFE8
 14190                           fsr1h	equ	0xFE2
 14191                           fsr1l	equ	0xFE1
 14192                           indf2	equ	0xFDF
 14193                           postinc2	equ	0xFDE
 14194                           postdec2	equ	0xFDD
 14195                           fsr2h	equ	0xFDA
 14196                           fsr2l	equ	0xFD9
 14197                           status	equ	0xFD8
 14198                           
 14199 ;; *************** function i2_opentoplid *****************
 14200 ;; Defined at:
 14201 ;;		line 751 in file "main.c"
 14202 ;; Parameters:    Size  Location     Type
 14203 ;;		None
 14204 ;; Auto vars:     Size  Location     Type
 14205 ;;  opentoplid      2    1[COMRAM] unsigned int 
 14206 ;; Return value:  Size  Location     Type
 14207 ;;                  1    wreg      void 
 14208 ;; Registers used:
 14209 ;;		wreg, status,2, status,0
 14210 ;; Tracked objects:
 14211 ;;		On entry : 0/0
 14212 ;;		On exit  : 0/0
 14213 ;;		Unchanged: 0/0
 14214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14216 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14217 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14218 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14219 ;;Total ram usage:        3 bytes
 14220 ;; Hardware stack levels used:    1
 14221 ;; This function calls:
 14222 ;;		Nothing
 14223 ;; This function is called by:
 14224 ;;		_keypressed
 14225 ;; This function uses a non-reentrant model
 14226 ;;
 14227                           
 14228                           	psect	text66
 14229  0032AE                     __ptext66:
 14230                           	opt stack 0
 14231  0032AE                     i2_opentoplid:
 14232                           	opt stack 22
 14233                           
 14234                           ;main.c: 753: unsigned int i;
 14235                           ;main.c: 754: for(i=0;i<50;i++)
 14236                           
 14237                           ;incstack = 0
 14238  0032AE  0E00               	movlw	0
 14239  0032B0  6E03               	movwf	i2opentoplid@i+1,c
 14240  0032B2  0E00               	movlw	0
 14241  0032B4  6E02               	movwf	i2opentoplid@i,c
 14242  0032B6                     i2l4614:
 14243  0032B6  5003               	movf	i2opentoplid@i+1,w,c
 14244  0032B8  E118               	bnz	i2l463
 14245  0032BA  0E32               	movlw	50
 14246  0032BC  5C02               	subwf	i2opentoplid@i,w,c
 14247  0032BE  B0D8               	btfsc	status,0,c
 14248  0032C0  0012               	return	
 14249                           
 14250                           ;main.c: 755: {
 14251                           ;main.c: 756: PORTAbits.RA5 = 1;
 14252  0032C2  8A80               	bsf	3968,5,c	;volatile
 14253                           
 14254                           ;main.c: 757: _delay((unsigned long)((1200)*(8000000/4000000.0)));
 14255  0032C4  0E04               	movlw	4
 14256  0032C6  6E01               	movwf	??i2_opentoplid& (0+255),c
 14257  0032C8  0E1C               	movlw	28
 14258  0032CA                     i2u758_47:
 14259  0032CA  2EE8               	decfsz	wreg,f,c
 14260  0032CC  D7FE               	bra	i2u758_47
 14261  0032CE  2E01               	decfsz	??i2_opentoplid& (0+255),f,c
 14262  0032D0  D7FC               	bra	i2u758_47
 14263  0032D2  D000               	nop2	
 14264                           
 14265                           ;main.c: 758: PORTAbits.RA5 = 0;
 14266  0032D4  9A80               	bcf	3968,5,c	;volatile
 14267                           
 14268                           ;main.c: 759: _delay((unsigned long)((18800)*(8000000/4000000.0)));
 14269  0032D6  0E31               	movlw	49
 14270  0032D8  6E01               	movwf	??i2_opentoplid& (0+255),c
 14271  0032DA  0ED4               	movlw	212
 14272  0032DC                     i2u759_47:
 14273  0032DC  2EE8               	decfsz	wreg,f,c
 14274  0032DE  D7FE               	bra	i2u759_47
 14275  0032E0  2E01               	decfsz	??i2_opentoplid& (0+255),f,c
 14276  0032E2  D7FC               	bra	i2u759_47
 14277  0032E4  4A02               	infsnz	i2opentoplid@i,f,c
 14278  0032E6  2A03               	incf	i2opentoplid@i+1,f,c
 14279  0032E8  D7E6               	goto	i2l4614
 14280  0032EA                     i2l463:
 14281  0032EA  0012               	return		;funcret
 14282  0032EC                     __end_ofi2_opentoplid:
 14283                           	opt stack 0
 14284                           pclatu	equ	0xFFB
 14285                           pclath	equ	0xFFA
 14286                           tblptru	equ	0xFF8
 14287                           tblptrh	equ	0xFF7
 14288                           tblptrl	equ	0xFF6
 14289                           tablat	equ	0xFF5
 14290                           prodh	equ	0xFF4
 14291                           prodl	equ	0xFF3
 14292                           intcon	equ	0xFF2
 14293                           intcon2	equ	0xFF1
 14294                           intcon3	equ	0xFF0
 14295                           postinc0	equ	0xFEE
 14296                           fsr0h	equ	0xFEA
 14297                           fsr0l	equ	0xFE9
 14298                           wreg	equ	0xFE8
 14299                           fsr1h	equ	0xFE2
 14300                           fsr1l	equ	0xFE1
 14301                           indf2	equ	0xFDF
 14302                           postinc2	equ	0xFDE
 14303                           postdec2	equ	0xFDD
 14304                           fsr2h	equ	0xFDA
 14305                           fsr2l	equ	0xFD9
 14306                           status	equ	0xFD8
 14307                           
 14308 ;; *************** function i2_lcdclear *****************
 14309 ;; Defined at:
 14310 ;;		line 590 in file "main.c"
 14311 ;; Parameters:    Size  Location     Type
 14312 ;;		None
 14313 ;; Auto vars:     Size  Location     Type
 14314 ;;		None
 14315 ;; Return value:  Size  Location     Type
 14316 ;;                  1    wreg      void 
 14317 ;; Registers used:
 14318 ;;		wreg, status,2, status,0, cstack
 14319 ;; Tracked objects:
 14320 ;;		On entry : 0/0
 14321 ;;		On exit  : 0/0
 14322 ;;		Unchanged: 0/0
 14323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14326 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14327 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14328 ;;Total ram usage:        1 bytes
 14329 ;; Hardware stack levels used:    1
 14330 ;; Hardware stack levels required when called:    2
 14331 ;; This function calls:
 14332 ;;		i2_lcdInst
 14333 ;; This function is called by:
 14334 ;;		_keypressed
 14335 ;; This function uses a non-reentrant model
 14336 ;;
 14337                           
 14338                           	psect	text67
 14339  00353E                     __ptext67:
 14340                           	opt stack 0
 14341  00353E                     i2_lcdclear:
 14342                           	opt stack 20
 14343                           
 14344                           ;main.c: 591: lcdInst(0b00000001);;
 14345                           
 14346                           ;incstack = 0
 14347  00353E  0E01               	movlw	1
 14348  003540  ECDA  F01A         	call	i2_lcdInst
 14349                           
 14350                           ;main.c: 592: _delay((unsigned long)((2)*(8000000/4000.0)));
 14351  003544  0E06               	movlw	6
 14352  003546  6E04               	movwf	??i2_lcdclear& (0+255),c
 14353  003548  0E30               	movlw	48
 14354  00354A                     i2u760_47:
 14355  00354A  2EE8               	decfsz	wreg,f,c
 14356  00354C  D7FE               	bra	i2u760_47
 14357  00354E  2E04               	decfsz	??i2_lcdclear& (0+255),f,c
 14358  003550  D7FC               	bra	i2u760_47
 14359  003552  D000               	nop2	
 14360  003554  0012               	return		;funcret
 14361  003556                     __end_ofi2_lcdclear:
 14362                           	opt stack 0
 14363                           pclatu	equ	0xFFB
 14364                           pclath	equ	0xFFA
 14365                           tblptru	equ	0xFF8
 14366                           tblptrh	equ	0xFF7
 14367                           tblptrl	equ	0xFF6
 14368                           tablat	equ	0xFF5
 14369                           prodh	equ	0xFF4
 14370                           prodl	equ	0xFF3
 14371                           intcon	equ	0xFF2
 14372                           intcon2	equ	0xFF1
 14373                           intcon3	equ	0xFF0
 14374                           postinc0	equ	0xFEE
 14375                           fsr0h	equ	0xFEA
 14376                           fsr0l	equ	0xFE9
 14377                           wreg	equ	0xFE8
 14378                           fsr1h	equ	0xFE2
 14379                           fsr1l	equ	0xFE1
 14380                           indf2	equ	0xFDF
 14381                           postinc2	equ	0xFDE
 14382                           postdec2	equ	0xFDD
 14383                           fsr2h	equ	0xFDA
 14384                           fsr2l	equ	0xFD9
 14385                           status	equ	0xFD8
 14386                           
 14387 ;; *************** function i2_lcdInst *****************
 14388 ;; Defined at:
 14389 ;;		line 26 in file "lcd.c"
 14390 ;; Parameters:    Size  Location     Type
 14391 ;;  data            1    wreg     unsigned char 
 14392 ;; Auto vars:     Size  Location     Type
 14393 ;;  data            1    2[COMRAM] unsigned char 
 14394 ;; Return value:  Size  Location     Type
 14395 ;;                  1    wreg      void 
 14396 ;; Registers used:
 14397 ;;		wreg, status,2, status,0, cstack
 14398 ;; Tracked objects:
 14399 ;;		On entry : 0/0
 14400 ;;		On exit  : 0/0
 14401 ;;		Unchanged: 0/0
 14402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14404 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14406 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14407 ;;Total ram usage:        1 bytes
 14408 ;; Hardware stack levels used:    1
 14409 ;; Hardware stack levels required when called:    1
 14410 ;; This function calls:
 14411 ;;		i2_lcdNibble
 14412 ;; This function is called by:
 14413 ;;		i2_lcdclear
 14414 ;;		i2_print
 14415 ;; This function uses a non-reentrant model
 14416 ;;
 14417                           
 14418                           	psect	text68
 14419  0035B4                     __ptext68:
 14420                           	opt stack 0
 14421  0035B4                     i2_lcdInst:
 14422                           	opt stack 20
 14423                           
 14424                           ;incstack = 0
 14425                           ;i2lcdInst@data stored from wreg
 14426  0035B4  6E03               	movwf	i2lcdInst@data,c
 14427                           
 14428                           ;lcd.c: 27: LATDbits.LATD2 = 0;
 14429  0035B6  948C               	bcf	3980,2,c	;volatile
 14430                           
 14431                           ;lcd.c: 28: lcdNibble(data);
 14432  0035B8  5003               	movf	i2lcdInst@data,w,c
 14433  0035BA  ECC5  F017         	call	i2_lcdNibble
 14434  0035BE  0012               	return		;funcret
 14435  0035C0                     __end_ofi2_lcdInst:
 14436                           	opt stack 0
 14437                           pclatu	equ	0xFFB
 14438                           pclath	equ	0xFFA
 14439                           tblptru	equ	0xFF8
 14440                           tblptrh	equ	0xFF7
 14441                           tblptrl	equ	0xFF6
 14442                           tablat	equ	0xFF5
 14443                           prodh	equ	0xFF4
 14444                           prodl	equ	0xFF3
 14445                           intcon	equ	0xFF2
 14446                           intcon2	equ	0xFF1
 14447                           intcon3	equ	0xFF0
 14448                           postinc0	equ	0xFEE
 14449                           fsr0h	equ	0xFEA
 14450                           fsr0l	equ	0xFE9
 14451                           wreg	equ	0xFE8
 14452                           fsr1h	equ	0xFE2
 14453                           fsr1l	equ	0xFE1
 14454                           indf2	equ	0xFDF
 14455                           postinc2	equ	0xFDE
 14456                           postdec2	equ	0xFDD
 14457                           fsr2h	equ	0xFDA
 14458                           fsr2l	equ	0xFD9
 14459                           status	equ	0xFD8
 14460                           
 14461 ;; *************** function i2_lcdNibble *****************
 14462 ;; Defined at:
 14463 ;;		line 36 in file "lcd.c"
 14464 ;; Parameters:    Size  Location     Type
 14465 ;;  data            1    wreg     unsigned char 
 14466 ;; Auto vars:     Size  Location     Type
 14467 ;;  data            1    1[COMRAM] unsigned char 
 14468 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 14469 ;; Return value:  Size  Location     Type
 14470 ;;                  1    wreg      void 
 14471 ;; Registers used:
 14472 ;;		wreg, status,2, status,0
 14473 ;; Tracked objects:
 14474 ;;		On entry : 0/0
 14475 ;;		On exit  : 0/0
 14476 ;;		Unchanged: 0/0
 14477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14479 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14481 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14482 ;;Total ram usage:        2 bytes
 14483 ;; Hardware stack levels used:    1
 14484 ;; This function calls:
 14485 ;;		Nothing
 14486 ;; This function is called by:
 14487 ;;		i2_lcdInst
 14488 ;;		i2_putch
 14489 ;; This function uses a non-reentrant model
 14490 ;;
 14491                           
 14492                           	psect	text69
 14493  002F8A                     __ptext69:
 14494                           	opt stack 0
 14495  002F8A                     i2_lcdNibble:
 14496                           	opt stack 19
 14497                           
 14498                           ;incstack = 0
 14499                           ;i2lcdNibble@data stored from wreg
 14500  002F8A  6E02               	movwf	i2lcdNibble@data,c
 14501                           
 14502                           ;lcd.c: 38: char temp = data & 0xF0;
 14503  002F8C  5002               	movf	i2lcdNibble@data,w,c
 14504  002F8E  0BF0               	andlw	240
 14505  002F90  6E01               	movwf	i2lcdNibble@temp,c
 14506                           
 14507                           ;lcd.c: 39: LATD = LATD & 0x0F;
 14508  002F92  508C               	movf	3980,w,c	;volatile
 14509  002F94  0B0F               	andlw	15
 14510  002F96  6E8C               	movwf	3980,c	;volatile
 14511                           
 14512                           ;lcd.c: 40: LATD = temp | LATD;
 14513  002F98  5001               	movf	i2lcdNibble@temp,w,c
 14514  002F9A  108C               	iorwf	3980,w,c	;volatile
 14515  002F9C  6E8C               	movwf	3980,c	;volatile
 14516                           
 14517                           ;lcd.c: 42: LATDbits.LATD3 = 0;
 14518  002F9E  968C               	bcf	3980,3,c	;volatile
 14519                           
 14520                           ;lcd.c: 43: _delay((unsigned long)((30)*(8000000/4000000.0)));
 14521  002FA0  0E14               	movlw	20
 14522  002FA2                     i2u761_47:
 14523  002FA2  2EE8               	decfsz	wreg,f,c
 14524  002FA4  D7FE               	bra	i2u761_47
 14525                           
 14526                           ;lcd.c: 44: LATDbits.LATD3 = 1;
 14527  002FA6  868C               	bsf	3980,3,c	;volatile
 14528                           
 14529                           ;lcd.c: 45: _delay((unsigned long)((30)*(8000000/4000000.0)));
 14530  002FA8  0E14               	movlw	20
 14531  002FAA                     i2u762_47:
 14532  002FAA  2EE8               	decfsz	wreg,f,c
 14533  002FAC  D7FE               	bra	i2u762_47
 14534                           
 14535                           ;lcd.c: 47: data = data << 4;
 14536  002FAE  3802               	swapf	i2lcdNibble@data,w,c
 14537  002FB0  0BF0               	andlw	240
 14538  002FB2  6E02               	movwf	i2lcdNibble@data,c
 14539                           
 14540                           ;lcd.c: 49: temp = data & 0xF0;
 14541  002FB4  5002               	movf	i2lcdNibble@data,w,c
 14542  002FB6  0BF0               	andlw	240
 14543  002FB8  6E01               	movwf	i2lcdNibble@temp,c
 14544                           
 14545                           ;lcd.c: 50: LATD = LATD & 0x0F;
 14546  002FBA  508C               	movf	3980,w,c	;volatile
 14547  002FBC  0B0F               	andlw	15
 14548  002FBE  6E8C               	movwf	3980,c	;volatile
 14549                           
 14550                           ;lcd.c: 51: LATD = temp | LATD;
 14551  002FC0  5001               	movf	i2lcdNibble@temp,w,c
 14552  002FC2  108C               	iorwf	3980,w,c	;volatile
 14553  002FC4  6E8C               	movwf	3980,c	;volatile
 14554                           
 14555                           ;lcd.c: 53: LATDbits.LATD3 = 0;
 14556  002FC6  968C               	bcf	3980,3,c	;volatile
 14557                           
 14558                           ;lcd.c: 54: _delay((unsigned long)((30)*(8000000/4000000.0)));
 14559  002FC8  0E14               	movlw	20
 14560  002FCA                     i2u763_47:
 14561  002FCA  2EE8               	decfsz	wreg,f,c
 14562  002FCC  D7FE               	bra	i2u763_47
 14563                           
 14564                           ;lcd.c: 55: LATDbits.LATD3 = 1;
 14565  002FCE  868C               	bsf	3980,3,c	;volatile
 14566                           
 14567                           ;lcd.c: 56: _delay((unsigned long)((30)*(8000000/4000000.0)));
 14568  002FD0  0E14               	movlw	20
 14569  002FD2                     i2u764_47:
 14570  002FD2  2EE8               	decfsz	wreg,f,c
 14571  002FD4  D7FE               	bra	i2u764_47
 14572  002FD6  0012               	return		;funcret
 14573  002FD8                     __end_ofi2_lcdNibble:
 14574                           	opt stack 0
 14575                           pclatu	equ	0xFFB
 14576                           pclath	equ	0xFFA
 14577                           tblptru	equ	0xFF8
 14578                           tblptrh	equ	0xFF7
 14579                           tblptrl	equ	0xFF6
 14580                           tablat	equ	0xFF5
 14581                           prodh	equ	0xFF4
 14582                           prodl	equ	0xFF3
 14583                           intcon	equ	0xFF2
 14584                           intcon2	equ	0xFF1
 14585                           intcon3	equ	0xFF0
 14586                           postinc0	equ	0xFEE
 14587                           fsr0h	equ	0xFEA
 14588                           fsr0l	equ	0xFE9
 14589                           wreg	equ	0xFE8
 14590                           fsr1h	equ	0xFE2
 14591                           fsr1l	equ	0xFE1
 14592                           indf2	equ	0xFDF
 14593                           postinc2	equ	0xFDE
 14594                           postdec2	equ	0xFDD
 14595                           fsr2h	equ	0xFDA
 14596                           fsr2l	equ	0xFD9
 14597                           status	equ	0xFD8
 14598                           
 14599 ;; *************** function i2_delay *****************
 14600 ;; Defined at:
 14601 ;;		line 654 in file "main.c"
 14602 ;; Parameters:    Size  Location     Type
 14603 ;;  seconds         2    0[COMRAM] int 
 14604 ;; Auto vars:     Size  Location     Type
 14605 ;;  delay           2    3[COMRAM] int 
 14606 ;;  delay           1    5[COMRAM] unsigned char 
 14607 ;; Return value:  Size  Location     Type
 14608 ;;                  1    wreg      void 
 14609 ;; Registers used:
 14610 ;;		wreg, status,2, status,0
 14611 ;; Tracked objects:
 14612 ;;		On entry : 0/0
 14613 ;;		On exit  : 0/0
 14614 ;;		Unchanged: 0/0
 14615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14616 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14617 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14618 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14619 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14620 ;;Total ram usage:        6 bytes
 14621 ;; Hardware stack levels used:    1
 14622 ;; This function calls:
 14623 ;;		Nothing
 14624 ;; This function is called by:
 14625 ;;		_keypressed
 14626 ;; This function uses a non-reentrant model
 14627 ;;
 14628                           
 14629                           	psect	text70
 14630  0030AE                     __ptext70:
 14631                           	opt stack 0
 14632  0030AE                     i2_delay:
 14633                           	opt stack 22
 14634                           
 14635                           ;main.c: 655: for (int i = 0; i <= seconds; i ++) {
 14636                           
 14637                           ;incstack = 0
 14638  0030AE  0E00               	movlw	0
 14639  0030B0  6E05               	movwf	i2delay@i+1,c
 14640  0030B2  0E00               	movlw	0
 14641  0030B4  6E04               	movwf	i2delay@i,c
 14642  0030B6  D012               	goto	i2l4600
 14643  0030B8                     i2l4588:
 14644                           
 14645                           ;main.c: 656: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(8000000/4000.0)));};
 14646  0030B8  0E00               	movlw	0
 14647  0030BA  6E06               	movwf	i2delay@i_822,c
 14648  0030BC                     i2l4590:
 14649  0030BC  0E63               	movlw	99
 14650  0030BE  6406               	cpfsgt	i2delay@i_822,c
 14651  0030C0  D001               	goto	i2l4594
 14652  0030C2  D00A               	goto	i2l4598
 14653  0030C4                     i2l4594:
 14654  0030C4  0E1A               	movlw	26
 14655  0030C6  6E03               	movwf	??i2_delay& (0+255),c
 14656  0030C8  0EF8               	movlw	248
 14657  0030CA                     i2u765_47:
 14658  0030CA  2EE8               	decfsz	wreg,f,c
 14659  0030CC  D7FE               	bra	i2u765_47
 14660  0030CE  2E03               	decfsz	??i2_delay& (0+255),f,c
 14661  0030D0  D7FC               	bra	i2u765_47
 14662  0030D2  D000               	nop2	
 14663  0030D4  2A06               	incf	i2delay@i_822,f,c
 14664  0030D6  D7F2               	goto	i2l4590
 14665  0030D8                     i2l4598:
 14666  0030D8  4A04               	infsnz	i2delay@i,f,c
 14667  0030DA  2A05               	incf	i2delay@i+1,f,c
 14668  0030DC                     i2l4600:
 14669  0030DC  5004               	movf	i2delay@i,w,c
 14670  0030DE  5C01               	subwf	i2delay@seconds,w,c
 14671  0030E0  5002               	movf	i2delay@seconds+1,w,c
 14672  0030E2  0A80               	xorlw	128
 14673  0030E4  6E03               	movwf	??i2_delay& (0+255),c
 14674  0030E6  5005               	movf	i2delay@i+1,w,c
 14675  0030E8  0A80               	xorlw	128
 14676  0030EA  5803               	subwfb	??i2_delay& (0+255),w,c
 14677  0030EC  A0D8               	btfss	status,0,c
 14678  0030EE  0012               	return	
 14679  0030F0  D7E3               	goto	i2l4588
 14680  0030F2                     __end_ofi2_delay:
 14681                           	opt stack 0
 14682                           pclatu	equ	0xFFB
 14683                           pclath	equ	0xFFA
 14684                           tblptru	equ	0xFF8
 14685                           tblptrh	equ	0xFF7
 14686                           tblptrl	equ	0xFF6
 14687                           tablat	equ	0xFF5
 14688                           prodh	equ	0xFF4
 14689                           prodl	equ	0xFF3
 14690                           intcon	equ	0xFF2
 14691                           intcon2	equ	0xFF1
 14692                           intcon3	equ	0xFF0
 14693                           postinc0	equ	0xFEE
 14694                           fsr0h	equ	0xFEA
 14695                           fsr0l	equ	0xFE9
 14696                           wreg	equ	0xFE8
 14697                           fsr1h	equ	0xFE2
 14698                           fsr1l	equ	0xFE1
 14699                           indf2	equ	0xFDF
 14700                           postinc2	equ	0xFDE
 14701                           postdec2	equ	0xFDD
 14702                           fsr2h	equ	0xFDA
 14703                           fsr2l	equ	0xFD9
 14704                           status	equ	0xFD8
 14705                           
 14706 ;; *************** function i2_closebotlid *****************
 14707 ;; Defined at:
 14708 ;;		line 787 in file "main.c"
 14709 ;; Parameters:    Size  Location     Type
 14710 ;;		None
 14711 ;; Auto vars:     Size  Location     Type
 14712 ;;  closebotlid     2    1[COMRAM] unsigned int 
 14713 ;; Return value:  Size  Location     Type
 14714 ;;                  1    wreg      void 
 14715 ;; Registers used:
 14716 ;;		wreg, status,2, status,0
 14717 ;; Tracked objects:
 14718 ;;		On entry : 0/0
 14719 ;;		On exit  : 0/0
 14720 ;;		Unchanged: 0/0
 14721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14723 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14724 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14725 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14726 ;;Total ram usage:        3 bytes
 14727 ;; Hardware stack levels used:    1
 14728 ;; This function calls:
 14729 ;;		Nothing
 14730 ;; This function is called by:
 14731 ;;		_keypressed
 14732 ;; This function uses a non-reentrant model
 14733 ;;
 14734                           
 14735                           	psect	text71
 14736  0032EC                     __ptext71:
 14737                           	opt stack 0
 14738  0032EC                     i2_closebotlid:
 14739                           	opt stack 22
 14740                           
 14741                           ;main.c: 789: unsigned int i;
 14742                           ;main.c: 790: for(i=0;i<50;i++)
 14743                           
 14744                           ;incstack = 0
 14745  0032EC  0E00               	movlw	0
 14746  0032EE  6E03               	movwf	i2closebotlid@i+1,c
 14747  0032F0  0E00               	movlw	0
 14748  0032F2  6E02               	movwf	i2closebotlid@i,c
 14749  0032F4                     i2l4626:
 14750  0032F4  5003               	movf	i2closebotlid@i+1,w,c
 14751  0032F6  E118               	bnz	i2l478
 14752  0032F8  0E32               	movlw	50
 14753  0032FA  5C02               	subwf	i2closebotlid@i,w,c
 14754  0032FC  B0D8               	btfsc	status,0,c
 14755  0032FE  0012               	return	
 14756                           
 14757                           ;main.c: 791: {
 14758                           ;main.c: 792: RC5 = 1;
 14759  003300  8A82               	bsf	3970,5,c	;volatile
 14760                           
 14761                           ;main.c: 793: _delay((unsigned long)((2700)*(8000000/4000000.0)));
 14762  003302  0E08               	movlw	8
 14763  003304  6E01               	movwf	??i2_closebotlid& (0+255),c
 14764  003306  0E02               	movlw	2
 14765  003308                     i2u766_47:
 14766  003308  2EE8               	decfsz	wreg,f,c
 14767  00330A  D7FE               	bra	i2u766_47
 14768  00330C  2E01               	decfsz	??i2_closebotlid& (0+255),f,c
 14769  00330E  D7FC               	bra	i2u766_47
 14770                           
 14771                           ;main.c: 794: RC5 = 0;
 14772  003310  9A82               	bcf	3970,5,c	;volatile
 14773                           
 14774                           ;main.c: 795: _delay((unsigned long)((17300)*(8000000/4000000.0)));
 14775  003312  0E2D               	movlw	45
 14776  003314  6E01               	movwf	??i2_closebotlid& (0+255),c
 14777  003316  0EEE               	movlw	238
 14778  003318                     i2u767_47:
 14779  003318  2EE8               	decfsz	wreg,f,c
 14780  00331A  D7FE               	bra	i2u767_47
 14781  00331C  2E01               	decfsz	??i2_closebotlid& (0+255),f,c
 14782  00331E  D7FC               	bra	i2u767_47
 14783  003320  D000               	nop2	
 14784  003322  4A02               	infsnz	i2closebotlid@i,f,c
 14785  003324  2A03               	incf	i2closebotlid@i+1,f,c
 14786  003326  D7E6               	goto	i2l4626
 14787  003328                     i2l478:
 14788  003328  0012               	return		;funcret
 14789  00332A                     __end_ofi2_closebotlid:
 14790                           	opt stack 0
 14791                           pclatu	equ	0xFFB
 14792                           pclath	equ	0xFFA
 14793                           tblptru	equ	0xFF8
 14794                           tblptrh	equ	0xFF7
 14795                           tblptrl	equ	0xFF6
 14796                           tablat	equ	0xFF5
 14797                           prodh	equ	0xFF4
 14798                           prodl	equ	0xFF3
 14799                           intcon	equ	0xFF2
 14800                           intcon2	equ	0xFF1
 14801                           intcon3	equ	0xFF0
 14802                           postinc0	equ	0xFEE
 14803                           fsr0h	equ	0xFEA
 14804                           fsr0l	equ	0xFE9
 14805                           wreg	equ	0xFE8
 14806                           fsr1h	equ	0xFE2
 14807                           fsr1l	equ	0xFE1
 14808                           indf2	equ	0xFDF
 14809                           postinc2	equ	0xFDE
 14810                           postdec2	equ	0xFDD
 14811                           fsr2h	equ	0xFDA
 14812                           fsr2l	equ	0xFD9
 14813                           status	equ	0xFD8
 14814                           pclatu	equ	0xFFB
 14815                           pclath	equ	0xFFA
 14816                           tblptru	equ	0xFF8
 14817                           tblptrh	equ	0xFF7
 14818                           tblptrl	equ	0xFF6
 14819                           tablat	equ	0xFF5
 14820                           prodh	equ	0xFF4
 14821                           prodl	equ	0xFF3
 14822                           intcon	equ	0xFF2
 14823                           intcon2	equ	0xFF1
 14824                           intcon3	equ	0xFF0
 14825                           postinc0	equ	0xFEE
 14826                           fsr0h	equ	0xFEA
 14827                           fsr0l	equ	0xFE9
 14828                           wreg	equ	0xFE8
 14829                           fsr1h	equ	0xFE2
 14830                           fsr1l	equ	0xFE1
 14831                           indf2	equ	0xFDF
 14832                           postinc2	equ	0xFDE
 14833                           postdec2	equ	0xFDD
 14834                           fsr2h	equ	0xFDA
 14835                           fsr2l	equ	0xFD9
 14836                           status	equ	0xFD8
 14837                           
 14838                           	psect	rparam
 14839  0000                     pclatu	equ	0xFFB
 14840                           pclath	equ	0xFFA
 14841                           tblptru	equ	0xFF8
 14842                           tblptrh	equ	0xFF7
 14843                           tblptrl	equ	0xFF6
 14844                           tablat	equ	0xFF5
 14845                           prodh	equ	0xFF4
 14846                           prodl	equ	0xFF3
 14847                           intcon	equ	0xFF2
 14848                           intcon2	equ	0xFF1
 14849                           intcon3	equ	0xFF0
 14850                           postinc0	equ	0xFEE
 14851                           fsr0h	equ	0xFEA
 14852                           fsr0l	equ	0xFE9
 14853                           wreg	equ	0xFE8
 14854                           fsr1h	equ	0xFE2
 14855                           fsr1l	equ	0xFE1
 14856                           indf2	equ	0xFDF
 14857                           postinc2	equ	0xFDE
 14858                           postdec2	equ	0xFDD
 14859                           fsr2h	equ	0xFDA
 14860                           fsr2l	equ	0xFD9
 14861                           status	equ	0xFD8
 14862                           
 14863                           	psect	temp
 14864  00004B                     btemp:
 14865                           	opt stack 0
 14866  00004B                     	ds	1
 14867  0000                     int$flags	set	btemp
 14868                           pclatu	equ	0xFFB
 14869                           pclath	equ	0xFFA
 14870                           tblptru	equ	0xFF8
 14871                           tblptrh	equ	0xFF7
 14872                           tblptrl	equ	0xFF6
 14873                           tablat	equ	0xFF5
 14874                           prodh	equ	0xFF4
 14875                           prodl	equ	0xFF3
 14876                           intcon	equ	0xFF2
 14877                           intcon2	equ	0xFF1
 14878                           intcon3	equ	0xFF0
 14879                           postinc0	equ	0xFEE
 14880                           fsr0h	equ	0xFEA
 14881                           fsr0l	equ	0xFE9
 14882                           wreg	equ	0xFE8
 14883                           fsr1h	equ	0xFE2
 14884                           fsr1l	equ	0xFE1
 14885                           indf2	equ	0xFDF
 14886                           postinc2	equ	0xFDE
 14887                           postdec2	equ	0xFDD
 14888                           fsr2h	equ	0xFDA
 14889                           fsr2l	equ	0xFD9
 14890                           status	equ	0xFD8


Data Sizes:
    Strings     601
    Constant    99
    Data        0
    BSS         51
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     72      74
    BANK0           128    128     128
    BANK1           256     34      83
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK1[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_43(CODE[17]), STR_42(CODE[17]), STR_40(CODE[23]), STR_39(CODE[21]), 
		 -> STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[19]), STR_35(CODE[19]), 
		 -> STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), 
		 -> STR_30(CODE[17]), STR_29(CODE[17]), STR_28(CODE[17]), STR_27(CODE[17]), 
		 -> STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[17]), 
		 -> STR_22(CODE[17]), STR_21(CODE[17]), STR_20(CODE[20]), STR_19(CODE[17]), 
		 -> STR_18(CODE[19]), STR_17(CODE[19]), STR_16(CODE[19]), STR_15(CODE[19]), 
		 -> STR_14(CODE[18]), STR_13(CODE[17]), STR_12(CODE[19]), STR_11(CODE[19]), 
		 -> STR_10(CODE[19]), STR_9(CODE[19]), STR_8(CODE[17]), STR_7(CODE[17]), 
		 -> STR_6(CODE[19]), STR_5(CODE[19]), STR_4(CODE[17]), STR_3(CODE[16]), 
		 -> STR_2(CODE[17]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    print@line1	PTR unsigned char  size(2) Largest target is 19
		 -> STR_42(CODE[17]), STR_33(CODE[17]), STR_31(CODE[17]), STR_29(CODE[17]), 
		 -> STR_27(CODE[17]), STR_25(CODE[17]), STR_23(CODE[17]), STR_21(CODE[17]), 
		 -> STR_19(CODE[17]), STR_13(CODE[17]), STR_7(CODE[17]), STR_5(CODE[19]), 
		 -> STR_3(CODE[16]), STR_1(CODE[17]), 

    print@line2	PTR unsigned char  size(2) Largest target is 20
		 -> STR_43(CODE[17]), STR_34(CODE[17]), STR_32(CODE[17]), STR_30(CODE[17]), 
		 -> STR_28(CODE[17]), STR_26(CODE[17]), STR_24(CODE[17]), STR_22(CODE[17]), 
		 -> STR_20(CODE[20]), STR_14(CODE[18]), STR_8(CODE[17]), STR_6(CODE[19]), 
		 -> STR_4(CODE[17]), STR_2(CODE[17]), 

    time_diff@time2	PTR unsigned char  size(2) Largest target is 7
		 -> end_time(BANK1[7]), 

    time_diff@time1	PTR unsigned char  size(2) Largest target is 7
		 -> start_time(BANK1[7]), 

    update_time@time	PTR unsigned char  size(2) Largest target is 7
		 -> end_time(BANK1[7]), start_time(BANK1[7]), time(BANK1[7]), 

    standby_mode@time	PTR unsigned char  size(2) Largest target is 7
		 -> time(BANK1[7]), 


Critical Paths under _main in COMRAM

    _log->_eval_poly
    _exp->_eval_poly
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    _eval_poly->___ftmul
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    _update_time->_I2C_Master_Read
    _update_time->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdclear->_lcdInst
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _keypressed in COMRAM

    _keypressed->i2_print
    i2_update_time->i2_I2C_Master_Read
    i2_update_time->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    i2_print->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdclear->i2_lcdInst
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    _main->_standby_mode
    _time_diff->_dec2hex
    _dec2hex->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    _standby_mode->_printf
    _print->_printf
    _printf->_time_diff

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_print
    _standby_mode->_printf
    _print->_printf

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0  110080
                                             22 BANK1     12    12      0
                    _I2C_Master_Init
                        _closebotlid
                        _closetoplid
                              _delay
                            _initLCD
                        _key_release
                            _lcdInst
                           _lcdclear
                         _openbotlid
                         _opentoplid
                              _print
                             _printf
                            _readADC
                        _read_eeprom
                       _standby_mode
                          _time_diff
                        _update_time
                               _wait
                       _write_eeprom
 ---------------------------------------------------------------------------------
 (1) _write_eeprom                                         3     0      3    4162
                                             52 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _wait                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _time_diff                                           24    20      4   86769
                                             94 BANK0     24    20      4
                             ___wmul
                            _dec2hex
 ---------------------------------------------------------------------------------
 (2) _dec2hex                                             16    14      2   85168
                                             78 BANK0     16    14      2
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                 17    11      6   71260
                                             61 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  5     2      3   23625
                                             31 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _exp                                                  9     6      3   38584
                                             52 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (5) _ldexp                                                7     2      5     376
                                             31 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (5) _floor                                                8     5      3    9793
                                             44 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                7     2      5     480
                                             52 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             15    11      4     508
                                             21 BANK0     15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftge                                               9     3      6     648
                                             52 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (6) ___altoft                                            10     6      4    2865
                                             70 COMRAM     2     2      0
                                             36 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           12     5      7   10588
                                             70 COMRAM     2     2      0
                                             21 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___ftmul                                             15     9      6    4224
                                             64 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftsub                                              6     0      6    5211
                                             21 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (6) ___ftadd                                             12     6      6    4847
                                              9 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftneg                                              3     0      3     237
                                             52 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (5) ___ftdiv                                             15     9      6    3272
                                             60 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___awtoft                                             4     1      3    3102
                                             60 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2763
                                             60 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2584
                                             52 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     428
                                             52 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _standby_mode                                         5     3      2    5421
                                            126 BANK0      2     0      2
                                             18 BANK1      3     3      0
                            _lcdInst
                             _printf
                        _update_time
 ---------------------------------------------------------------------------------
 (1) _update_time                                          3     1      2    1113
                                             55 COMRAM     3     1      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     406
                                             53 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                             53 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             52 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_eeprom                                          2     0      2    1068
                                             52 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _readADC                                              2     2      0      22
                                             52 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _print                                                4     0      4    5918
                                             18 BANK1      4     0      4
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              30    22      8    3955
                                            118 BANK0      8     0      8
                                              0 BANK1     18    18      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
                        _read_eeprom (ARG)
                          _time_diff (ARG)
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                             54 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                             52 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     801
                                             52 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                             59 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                             52 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _opentoplid                                           3     3      0      46
                                             52 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _openbotlid                                           3     3      0      46
                                             52 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcdclear                                             1     1      0     135
                                             55 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _key_release                                          2     2      0       0
                                             52 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             55 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                             54 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                             52 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _delay                                                6     4      2     322
                                             52 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _closetoplid                                          3     3      0      46
                                             52 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _closebotlid                                          3     3      0      46
                                             52 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     398
                                             65 COMRAM     4     0      4
                                              0 BANK0      4     4      0
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             52 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _keypressed                                          16    16      0    3026
                                             36 COMRAM    16    16      0
                      i2_closebotlid
                            i2_delay
                         i2_lcdclear
                       i2_opentoplid
                            i2_print
                      i2_update_time
 ---------------------------------------------------------------------------------
 (9) i2_update_time                                        3     1      2     283
                                              3 COMRAM     3     1      2
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (10) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (10) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (10) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (10) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_print                                              4     0      4    2398
                                             32 COMRAM     4     0      4
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           24    22      2    2123
                                             12 COMRAM    20    18      2
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (9) i2_opentoplid                                         3     3      0      46
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (9) i2_lcdclear                                           1     1      0     135
                                              3 COMRAM     1     1      0
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (10) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (9) i2_delay                                              6     4      2     118
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (9) i2_closebotlid                                        3     3      0      46
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _closebotlid
   _closetoplid
   _delay
   _initLCD
     _lcdInst
       _lcdNibble
   _key_release
   _lcdInst
     _lcdNibble
   _lcdclear
     _lcdInst
       _lcdNibble
   _openbotlid
   _opentoplid
   _print
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
       _read_eeprom (ARG)
       _time_diff (ARG)
         ___wmul
         _dec2hex
           ___awdiv
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
     _read_eeprom (ARG)
     _time_diff (ARG)
       ___wmul
       _dec2hex
         ___awdiv
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
   _readADC
   _read_eeprom
   _standby_mode
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
       _read_eeprom (ARG)
       _time_diff (ARG)
         ___wmul
         _dec2hex
           ___awdiv
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
     _update_time
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _time_diff
     ___wmul
     _dec2hex
       ___awdiv
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
       _pow
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         ___lltoft
           ___ftpack
         _exp
           ___awtoft
             ___ftpack
           ___ftdiv
             ___ftpack
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
           _floor
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
           _frexp
   _update_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _wait
   _write_eeprom

 _keypressed (ROOT)
   i2_closebotlid
   i2_delay
   i2_lcdclear
     i2_lcdInst
       i2_lcdNibble
   i2_opentoplid
   i2_print
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   i2_update_time
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     22      53       7       32.4%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     80      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     48      4A       1       58.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     11D      34        0.0%
DATA                 0      0     11D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Apr 11 15:54:10 2017

               ?_closebotlid 0001                  _update_time 2CFC                 ___altoft@exp 0047  
         i2_I2C_Master_Start 35EC                 _standby_mode 27D4           i2_I2C_Master_Write 35CA  
              ___altoft@sign 0048                 ?_closetoplid 0001                           l56 356C  
               ___awdiv@sign 003A          ___wmul@multiplicand 0037           i2___lwdiv@dividend 0001  
                __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                  __CFG_OSC$HS 000000  
               ___ftadd@exp1 0094                 ___ftadd@exp2 0093                 ___ftadd@sign 0092  
                        l330 09BC                          l331 08B2                          l340 09E0  
                        l341 09EA                          l326 0840                          l522 111A  
                        l370 0C3C                          l429 35F4                          l463 31F2  
                        l473 3230                          l481 3564                          l468 326E  
                        l820 17C6                          l478 32AC                          l822 17EE  
                        l831 18C4                          l487 33E2                          l840 18EE  
                        l816 178C                          l923 2CEA                          l851 25BA  
                        l793 2A20                          l873 349A                          l976 2EE0  
                        l986 312A                 __CFG_CPB$OFF 000000                          _RA0 007C00  
                        _RB0 007C08                          _RB2 007C0A                          _RC0 007C10  
                        _RA4 007C04                          _RC5 007C15                          _RC6 007C16  
                        _RC7 007C17                          _PEN 007E2A                 __CFG_CPD$OFF 000000  
                        _SEN 007E28          ?i2_I2C_Master_Start 0001          ?i2_I2C_Master_Write 0002  
                        _exp 198C                          _log 205C                          _pow 1D76  
                        _run 0100                          wreg 000FE8         __end_ofi2_opentoplid 32EC  
               __CFG_LVP$OFF 000000                 ___ftdiv@cntr 0080                 ___ftdiv@sign 0085  
               __CFG_WDT$OFF 000000                         l1013 1F0A                         l1008 1DB4  
                       l1171 1A5E                         l1172 1B98                         l1182 26D8  
                 i2_lcdclear 353E                         l4010 2D30                         l4020 2D54  
                       l4030 0F8C                         l4014 2D38                         l4200 2CA8  
                       l4104 11AA                         l4120 11E6                         l4032 0F9E  
                       l4210 2CDC                         l4202 2CAC                         l4106 11B0  
                       l4122 11F8                         l4050 104E                         l4042 0FD8  
                       l4026 0F78                         l4140 1276                         l4132 1252  
                       l4060 108C                         l4052 1054                         l4036 0FA8  
                       l4134 125C                         l4062 10A4                         l3510 2AFE  
                       l4160 131A                         l4152 12B8                         l4128 121A  
                       l4056 107A                         l4170 1380                         l4146 1292  
                       l4090 116E                         l4066 10B8                         l4058 1086  
                       l4074 10E8                         l3442 2B96                         l4148 129E  
                       l4156 12CC                         l4092 1174                         l4068 10D0  
                       l4172 138C                         l3452 2BF2                         l4158 12D2  
                       l4166 1366                         l4086 1152                         l3446 2BC6  
                       l3462 1F52                         l6110 0C16                         l6102 0BBA  
                       l6014 0A10                         l4168 1378                         l5240 29B0  
                       l5320 1854                         l5304 17E4                         l3480 1FE4  
                       l6016 0A14                         l6008 09FE                         l6104 0BC6  
                       l4450 33BC                         l4530 31FC                         l5250 2A0C  
                       l5242 29BA                         l5322 1862                         l5314 1826  
                       l3490 2014                         l6114 0C2C                         l6050 0AB2  
                       l4508 31BE                         l4524 34B8                         l5252 2A16  
                       l5244 29D8                         l5236 29A2                         l5500 2DE6  
                       l5340 1918                         l5332 18AA                         l5324 1870  
                       l3492 2024                         l3484 1FF8                         l3652 2388  
                       l3636 234C                         l3628 22E8                         l6108 0C0E  
                       l6036 0A66                         l6028 0A40                         l4198 2C9C  
                       l4542 323A                         l3910 2EBA                         l4526 34C6  
                       l5502 2DF2                         l5414 2542                         l5350 1966  
                       l5334 18B8                         l5326 187C                         l3494 202E  
                       l6142 0D80                         l6134 0CE0                         l6046 0AA6  
                       l4472 3080                         l4448 33A0                         l4456 3196  
                       l5248 29EE                         l5408 2516                         l5360 21CA  
                       l3648 2378                         l5520 20AA                         l6128 0C7E  
                       l6080 0B48                         l6072 0B24                         l4466 3074  
                       l3906 2EAE                         l3930 310C                         l5434 2590  
                       l3498 204A                         l5514 207E                         l5602 1E82  
                       l6146 0DD0                         l6138 0D30                         l6090 0B88  
                       l6058 0AD8                         l4476 3094                         l4468 3078  
                       l3908 2EB6                         l3852 3500                         l5292 179A  
                       l5452 2FFA                         l5380 223E                         l5276 2A66  
                       l6068 0B18                         l4478 3098                         l3918 2ED6  
                       l3934 3120                         l3926 3100                         l3870 2C1A  
                       l5390 2270                         l5366 21FC                         l5278 2A74  
                       l5542 19EC                         l5630 24D4                         l6158 0E0C  
                       l6190 0F34                         l6094 0B92                         l5710 01B8  
                       l4496 3278                         l3928 3108                         l3880 2C3C  
                       l3864 2C0A                         l5464 337A                         l5384 2254  
                       l5536 19B0                         l6184 0F14                         l5712 01C8  
                       l5704 0170                         l5298 17D4                         l5394 2286  
                       l5482 263A                         l5570 1B6E                         l5618 23F6  
                       l3876 2C30                         l3892 2C62                         l5548 1A28  
                       l6188 0F28                         l5812 0548                         l5732 0270  
                       l5716 01F2                         l6196 0F4A                         ?_exp 00B4  
                       ?_log 009F                         l3798 340C                         l3878 2C38  
                       l5494 28FA                         l5486 2658                         l5478 2626  
                       l5590 1DEC                         l5902 0778                         l5830 0610  
                       l5734 0276                         l3896 2C70                         l3888 2C58  
                       l5496 2978                         l5584 1DC8                         l5920 07D4  
                       l5824 05EE                         l5752 02DE                         _ADFM 007E07  
                       l5842 0644                         l5834 0624                         l5940 0848  
                       l5924 07E8                         l5932 0816                         l5828 0602  
                       l5756 02F2                         l5836 0632                         l5598 1E5C  
                       l5950 0876                         l5926 07F4                         l5870 06D2  
                       l5846 0658                         l5934 0822                         l5952 08A6  
                       l5936 0830                         l5928 0802                         l5880 0704  
                       l5792 047A                         l5776 03C0                         l5858 0694  
                       l5882 0712                         l5956 08BE                         l5788 0466  
                       l5974 0940                         l5966 08FA                         l5886 0726  
                       l5992 09C8                         l5898 0764                         _ADON 007E10  
                       ?_pow 00BD                         STR_1 FF78                         STR_2 FF23  
                       STR_3 FFEF                         STR_4 FE8A                         STR_5 FDE6  
                       STR_6 FDF9                         STR_7 FF56                         STR_8 FF12  
                       STR_9 FE32                         _LATA 000F89                         _LATB 000F8A  
                       _LATC 000F8B                         _LATD 000F8C                         _LATE 000F8D  
                       u3301 1F2E                         u3320 1F78                         u3325 1F6E  
                main@counter 0151                         u3540 231A                         u3710 340A  
                       u3390 2B26                         u6111 21DE                         u3548 231E  
                       u3398 2B28                         u6151 24FA                         u6240 264A  
                       u6330 1A32                         u6171 2526                         u6091 21AC  
                       u6340 1A34                         u6420 1E40                         _RCEN 007E2B  
                       u7160 0BF8                         u7307 0858                         u7317 086C  
                       u6455 2E6A                         u7407 0B76                         u7327 08D8  
                       i2l56 357E                         u7417 34BE                         u7337 08EA  
                       u6810 0954                         u7507 2F5C                         u7427 31D2  
                       u7347 0908                         u6820 0968                         u7517 2F7C  
                       u7437 31E4                         u7357 0A80                         u6830 097C  
                       u7527 2F84                         u7447 3210                         u7367 0A94  
                       u6840 0990                         u7537 3086                         u7457 3220  
                       u5881 173A                         u7377 0AF2                         u7547 324E  
                       u7467 3532                         u5891 1758                         u7387 0B06  
                       u7557 325E                         u7477 302A                         u7397 0B62  
                       u7567 328C                         u7487 305E                         u7577 329C  
                       u7497 2F54                         _RSEN 007E29                         _flag 0116  
                       _main 0012                 ___ftpack@arg 0035                         _keys FD43  
               ___ftpack@exp 0038                         _wait 35F4                         _time 012A  
                       fsr0h 000FEA                         fsr1h 000FE2           i2___lwdiv@quotient 0005  
                       fsr2h 000FDA                         fsr0l 000FE9                         indf2 000FDF  
                       fsr1l 000FE1                         fsr2l 000FD9                         btemp 004B  
                       _type 0119                i2opentoplid@i 0002                         exp@x 00B4  
                       log@x 009F         ??i2_I2C_Master_Start 0002         ??i2_I2C_Master_Write 0004  
                       pow@x 00BD                         pow@y 00C0                         prodh 000FF4  
                       prodl 000FF3              __end_ofi2_delay 30F2                         start 000E  
              __CFG_IESO$OFF 000000              __end_ofi2_print 3366              __end_ofi2_putch 35B4  
              __CFG_MCLRE$ON 000000                 ___ftmul@cntr 0087                 ___param_bank 000000  
               ___ftmul@sign 0088                  i2_lcdNibble 2F8A                 ___fttol@exp1 00A3  
                      ??_exp 0049                        ??_log 0049                 ___fttol@lval 009F  
                      ??_pow 0049             ?_I2C_Master_Init 0042             ?_I2C_Master_Read 0001  
               closebotlid@i 0036             ?_I2C_Master_Wait 0001             ?_I2C_Master_Stop 0001  
                      ?_main 0001                        _ACKEN 007E2C                        _ACKDT 007E2D  
            __end_of___awdiv 2C7A              __end_of_dec2hex 24EA                        _EEADR 000FA9  
            __end_of___ftadd 198C                        STR_10 FE0C                        STR_11 FE32  
                      STR_12 FE0C                        STR_20 FDD2                        STR_13 FF67  
                      STR_21 FF45                        STR_22 FF34                        STR_30 FE68  
                      STR_14 FE45                        STR_15 FE32                        STR_23 FECE  
                      STR_31 FEBD                        STR_16 FE0C                        STR_24 FFCD  
                      STR_32 FE9B                        STR_40 FDA6                        STR_41 FE56  
                      STR_17 FE32                        STR_25 FFAB                        STR_33 FEAC  
                      STR_18 FE0C                        STR_42 FEBD                        STR_26 FF01  
                      STR_34 FEDF                        STR_43 FE9B                        STR_35 FE32  
                      STR_27 FFBC                        STR_19 FF89                        STR_28 FEF0  
                      STR_44 FE57                        STR_36 FE1F                        STR_29 FFDE  
                      STR_37 FF9A                        STR_38 FE79                        STR_39 FDBD  
                      ?_wait 0001              __end_of___ftdiv 25EE              __end_of___ftneg 34A8  
            __end_of___lldiv 2CFC              __end_of___ftmul 22C4              ___awdiv@divisor 0037  
            __end_of___ftsub 3024              __end_of___fttol 205C              __end_of___lwdiv 2EEA  
            __end_of___lwmod 3134                 ?_key_release 0001                        i2l522 1504  
                      i2l463 32EA                        i2l455 2796                        i2l458 2798  
                      i2l478 3328              ___awdiv@counter 0039                        i2l976 2F32  
                      i2l986 316C                        _PORTB 000F81                        _TRISA 000F92  
                      _TRISB 000F93                        _TRISC 000F94                        _TRISD 000F95  
                      _TRISE 000F96                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000  
               ___lltoft@exp 0045              __end_of_lcdInst 35A8                 ?_read_eeprom 0035  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000  
             __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000                        _nRBPU 007F8F  
              __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000  
            __end_of_readADC 34CC              __end_of_initLCD 306A               __CFG_EBTRB$OFF 000000  
                      _flag1 0114                   i2isdigit@c 0003                        _flag2 0112  
                      _flag3 0110                ___awtoft@sign 0040                        _flag4 010E  
                      _flag5 010C                        _delay 306A                        _brand 011A  
            __end_of_dpowers FD5E                        _floor 25EE                        _ldexp 22C4  
                      _frexp 2AD6                        _errno 0049              __end_of_isdigit 3508  
              ___ftpack@sign 0039                        _print 3176                        _putch 3590  
                      main@i 0149                        _yop_a 010A                        _yop_b 0108  
                      pclath 000FFA                        tablat 000FF5                        pow@yi 00CA  
               closetoplid@i 0036             __end_ofi2___wmul 3484                        status 000FD8  
             __CFG_PBADEN$ON 000000                i2printf@width 001E                  exp@exponent 00BA  
           __end_ofi2_printf 1724           __size_ofi2___lwdiv 0052           __size_ofi2___lwmod 0042  
                ldexp@newexp 00A2              __initialization 34CC                  log@exponent 00A2  
         __size_ofi2_lcdInst 000C        __end_ofi2_update_time 2DE0                 __end_of_main 0F6A  
               __end_of_keys FD54                 __end_of_wait 35FA                   i2printf@ap 0016  
                 i2printf@cp 0013        __size_of_write_eeprom 0026           __size_ofi2_isdigit 001E  
               update_time@i 003A                       ??_main 0147                ___fttol@sign1 009E  
                     ??_wait 0035                __activetblptr 000002            ?_I2C_Master_Start 0001  
          ?_I2C_Master_Write 0036                       ?_delay 0035           ??_I2C_Master_Start 0036  
                     _ADCON0 000FC2                       _ADCON1 000FC1           ??_I2C_Master_Write 0038  
                     ?_floor 00AC                       ?_ldexp 009F                       ?_frexp 0035  
           __end_of___altoft 2AD6                       _ADRESH 000FC4                       _EEADRH 000FAA  
                     _ADRESL 000FC3                       _EEDATA 000FA8                       _EECON2 000FA7  
           ___awdiv@dividend 0035              i2lcdNibble@data 0002                  ?i2_lcdclear 0001  
                     ?_print 0143             __end_of___awtoft 339E                       ?_putch 0001  
           __end_of___ftpack 2A40              i2lcdNibble@temp 0001                    ??i2_delay 0003  
           __end_of___lltoft 2E3C                       _INT1IE 007F83                       _INT1IF 007F80  
                     _CVRCON 000FB5                       i2l4310 154C                       i2l4312 1550  
                     i2l4306 1532                       i2l4250 13C4                       i2l4324 157C  
                     i2l4340 15AC                       i2l4252 13D2                       i2l4326 1580  
                     i2l4342 15BC                       i2l4270 1464                       i2l4262 1406  
                     i2l4246 13B4                       i2l4238 3458                       i2l5206 2726  
                     i2l5230 2770                       i2l4600 30DC                       i2l4360 1618  
                     i2l4352 15FA                       i2l4280 148E                       i2l4272 1468  
                     i2l4256 13D8                       i2l4354 1602                       i2l4282 14A0  
                     i2l5226 2768                       i2l4380 16A6                       i2l4372 164A  
                     i2l4348 15D6                       i2l4276 147E                       i2l4614 32B6  
                     i2l4390 1702                       i2l4366 162E                       i2l4286 14B2  
                     i2l4278 1488                       i2l4294 14D6                       i2l4606 3346  
                     i2l4368 1636                       i2l4376 165C                       i2l4288 14C4  
                     i2l4392 170A                       i2l4626 32F4                       i2l4378 1662  
                     i2l4386 16EC                       i2l4388 16FC                       i2l4572 2DA2  
                     i2l4590 30BC                       i2l4582 2DC6                       i2l3960 351E  
                     i2l4576 2DAA                       i2l4594 30C4                       i2l3970 2F00  
                     i2l4588 30B8                       i2l3972 2F08                       i2l4598 30D8  
                     i2l3982 2F28                       i2l3974 2F0C                       i2l3990 3142  
                     i2l3992 314A                       i2l3994 314E                       i2l3998 3162  
                  ??i2_print 0025                    ??i2_putch 0003                       _SSPADD 000FC8  
                     _TRISC3 007CA3                       _TRISC4 007CA4                       _SSPBUF 000FC9  
            update_time@time 0038                 _write_eeprom 33C6               __CFG_XINST$OFF 000000  
           __end_of_lcdclear 353E                       ___ftge 2B66                       ___wmul 3412  
                  ??___awdiv 0039                    ??_dec2hex 0049                    ??___ftadd 008F  
             __CFG_STVREN$ON 000000                    ??___ftdiv 0043                    ??___ftneg 0038  
                  ??___lldiv 003D                    ??___ftmul 0080                    ??___ftsub 0047  
                  ??___fttol 0099                    ??___lwdiv 0039                    ??___lwmod 0040  
                     _eska_a 0106                       _eska_b 0104         __size_of_closebotlid 003E  
                     delay@i 0038                       clear_0 34D2             ___awdiv@quotient 003B  
                  ??_lcdInst 0037                       _printf 0F6A         __size_of_closetoplid 003E  
                     floor@i 00AF                 i2delay@i_822 0006                       floor@x 00AC  
      ___ftmul@f3_as_product 0084                    ??_readADC 0035                    ??_initLCD 0038  
      __size_ofi2_opentoplid 003E                    ??_isdigit 0035            __end_ofi2___lwdiv 2F3C  
               __mediumconst FD42            __end_ofi2___lwmod 3176                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8            __end_ofi2_lcdInst 35C0  
     __size_ofi2_closebotlid 003E            __end_ofi2_isdigit 3526             __end_ofexp@coeff FD8B  
           __end_oflog@coeff FDA6                   __accesstop 0080      __end_of__initialization 34DC  
                 ___altoft@c 00A4                   ___ftadd@f1 0089                   ___ftadd@f2 008C  
                 ___ftge@ff1 0035                   ___ftge@ff2 0038                 eval_poly@res 009C  
              ___rparam_used 000001                   ___ftdiv@f1 003D                   ___ftdiv@f2 0040  
                 ___ftdiv@f3 0081                   ___ftneg@f1 0035                   ___awtoft@c 003D  
                 ___ftmul@f1 0041                   ___ftmul@f2 0044                   ___ftsub@f1 0095  
                 ___ftsub@f2 0098                   ___fttol@f1 0095           i2___lwmod@dividend 0008  
             __pcstackCOMRAM 0001                 ?_update_time 0038                 i2_opentoplid 32AE  
              __end_of_delay 30AE                   ___lltoft@c 003D                __end_of_floor 26E6  
              __end_of_ldexp 23D8                __end_of_frexp 2B66                __end_of_print 31B6  
              __end_of_putch 359C          __size_ofi2_lcdclear 0018                  i2printf@idx 0015  
                i2printf@len 0018                  i2printf@val 001B               i2closebotlid@i 0002  
                  ?i2___wmul 0001           __size_of_lcdNibble 004E                   dec2hex@num 00CE  
                i2putch@data 0003         __size_of_key_release 0028                    ?i2_printf 000D  
                    ??_delay 0037                      ??_floor 0049                      ??_ldexp 00A4  
                    ??_frexp 003A         __size_of_read_eeprom 0016                      ??_print 0049  
                    ??_putch 0037                   __pbssBANK1 0100              dec2hex@quotient 00DC  
         __size_of_eval_poly 00D8                dec2hex@hexnum 00DA                      ?___ftge 0035  
               ?i2_lcdNibble 0001                      ?___wmul 0035                i2_closebotlid 32EC  
                  ?___altoft 00A4                    ?___awtoft 003D                    ?___ftpack 0035  
                    ?_printf 00F6                    ?___lltoft 003D                   ??i2___wmul 0005  
         __size_of_time_diff 01D0               i2update_time@i 0006                   ??i2_printf 000F  
           write_eeprom@data 0037                      _SSPCON1 000FC6                      _SSPCON2 000FC5  
                  ?_lcdclear 0001                      _SSPSTAT 000FC7                      i2_delay 30AE  
                    i2_print 332A                      i2_putch 35A8  __size_ofi2_I2C_Master_Start 0008  
          __end_of_lcdNibble 2F8A  __size_ofi2_I2C_Master_Write 000A                      __Hparam 0000  
                    __Lparam 0000               ?i2_closebotlid 0001              __size_of___ftge 0090  
                    ___awdiv 2BF6                      _dec2hex 23D8                      ___ftadd 1724  
                    ___ftdiv 24EA                      ___ftneg 3484                      ___lldiv 2C7A  
            __size_of___wmul 0026                      ___ftmul 2198                      ___ftsub 2FD8  
                    ___fttol 1F18                      ___lwdiv 2E98                      ___lwmod 30F2  
                  _CMCONbits 000FB4                   _curr_state 0118                   ??___altoft 00A8  
                openbotlid@i 0036                      __pcinit 34CC                   ??___awtoft 0040  
                 ??___ftpack 003A            __end_of_eval_poly 2992                      __ramtop 1000  
                    _lcdInst 359C                   ??___lltoft 0041                      __ptext0 0012  
                    __ptext1 33C6                      __ptext2 35F4                      __ptext3 1BA6  
                    __ptext4 23D8                      __ptext5 1D76                      __ptext6 205C  
                    __ptext7 198C                      __ptext8 22C4                      __ptext9 25EE  
                 delay@i_822 003A              __size_of_printf 0440                      _readADC 34A8  
                    _initLCD 3024            __end_of_hexpowers FD66                      _dpowers FD54  
          __end_of_curr_time FD6D                 __size_of_exp 021A                 __size_of_log 013C  
                    _isdigit 34EA                 __size_of_pow 01A2                   _keypressed 0008  
           standby_mode@time 00FE     __size_of_I2C_Master_Init 005C     __size_of_I2C_Master_Read 0026  
   __size_of_I2C_Master_Wait 0012     __size_of_I2C_Master_Stop 0008                      _pressed 011B  
               ??i2_lcdclear 0004                   ??_lcdclear 0038               __pintcode_body 26E6  
       end_of_initialization 34DC                      exp@sign 00BC                  opentoplid@i 0036  
              __Lmediumconst FD42                      int_func 26E6          i2___wmul@multiplier 0001  
          __end_of_time_diff 1D76    __size_of_I2C_Master_Start 0008    __size_of_I2C_Master_Write 000A  
            ___lldiv@divisor 0039                   _openbotlid 31F4                      pow@sign 00C9  
            ___lldiv@counter 0041                  time_diff@d1 00F0                  time_diff@d2 00F2  
                time_diff@d3 00F4                  time_diff@s1 00EC                  time_diff@s2 00EE  
                    printf@c 0142                      printf@f 00F6             I2C_Master_Init@c 0042  
                 _opentoplid 31B6             I2C_Master_Read@a 0036                      postdec2 000FDD  
                    postinc0 000FEE                      postinc2 000FDE         __size_of_update_time 0072  
         __end_ofi2_lcdclear 3556                    _PORTAbits 000F80                    _PORTBbits 000F81  
                  _PORTEbits 000F84            i2_I2C_Master_Read 3438            i2_I2C_Master_Wait 357E  
          i2_I2C_Master_Stop 35E4            i2___lwdiv@divisor 0003       __size_ofi2_update_time 0072  
                  i2___lwdiv 2EEA                    i2___lwmod 3134            i2___lwdiv@counter 0007  
         ?i2_I2C_Master_Read 0001           ?i2_I2C_Master_Wait 0001           ?i2_I2C_Master_Stop 0001  
                 _start_time 0123                    i2_lcdInst 35B4                  ___ftdiv@exp 0084  
                printf@width 0140          ??i2_I2C_Master_Read 0002                    i2_isdigit 3508  
        ??i2_I2C_Master_Wait 0001          ??i2_I2C_Master_Stop 0002              ??i2_closebotlid 0001  
              ??_closebotlid 0035                  ___ftmul@exp 0083                ?_standby_mode 00FE  
              ??_closetoplid 0035               __end_of___ftge 2BF6               __end_of___wmul 3438  
       __size_ofi2_lcdNibble 004E                i2lcdInst@data 0003                 i2print@line1 0021  
               i2print@line2 0023                   floor@expon 00B2             i2___wmul@product 0005  
             __end_of_printf 13AA                 i2printf@flag 001D    __end_ofi2_I2C_Master_Read 345E  
  __end_ofi2_I2C_Master_Wait 3590                 i2printf@prec 001A          start_initialization 34CC  
  __end_ofi2_I2C_Master_Stop 35EC                   eval_poly@d 0098                   eval_poly@n 009A  
                 eval_poly@x 0095                  ?_keypressed 0001            __size_ofi2___wmul 0026  
                 ldexp@value 009F                  __end_of_exp 1BA6                  __end_of_log 2198  
                __end_of_pow 1F18                    i2printf@c 0020                    i2printf@f 000D  
      i2I2C_Master_Read@temp 0003                   ?i2___lwdiv 0001                   ?i2___lwmod 0008  
          __size_ofi2_printf 037A                  dec2hex@temp 00D6                   frexp@value 0035  
          ??_I2C_Master_Init 0080            ??_I2C_Master_Read 0036            ??_I2C_Master_Wait 0035  
                 ?i2_lcdInst 0001            ??_I2C_Master_Stop 0036                   ?i2_isdigit 0001  
                ?_openbotlid 0001               ??_standby_mode 0143                     ??___ftge 003B  
                ?_opentoplid 0001                     ??___wmul 0039                i2_update_time 2D6E  
           __CFG_LPT1OSC$OFF 000000                     ??_printf 0131          __end_of_closebotlid 32AE  
              ??_key_release 0035            __size_of___altoft 0096            __size_of___awtoft 0038  
          __size_of___ftpack 00AE          __end_of_closetoplid 3270            __size_of___lltoft 005C  
                __pbssCOMRAM 0049                ??_read_eeprom 0037                __pcstackBANK0 0080  
              __pcstackBANK1 0131            i2___lwmod@divisor 000A            i2___lwmod@counter 000C  
               _isdigit$1143 0036                     ?i2_delay 0001                     ?i2_print 0021  
                   ?i2_putch 0001            __size_of_lcdclear 0018             _I2C_Master_Start 35DC  
        i2I2C_Master_Write@d 0002             _I2C_Master_Write 35C0             ___lwdiv@dividend 0035  
          __CFG_CCP2MX$PORTC 000000          __size_of_keypressed 27CC                    __pintcode 0008  
             ?i2_update_time 0004                __pmediumconst FD42                    _lcdNibble 2F3C  
                   ?___awdiv 0035                     ?_dec2hex 00CE                     ?___ftadd 0089  
                   ?___ftdiv 003D                     ?___ftneg 0035                     ?___lldiv 0035  
                   ?___ftmul 0041                     ?___ftsub 0095                     ?___fttol 0095  
                   ?___lwdiv 0035                     ?___lwmod 003C                     ?_lcdInst 0001  
                   ?_readADC 0001                     ?_initLCD 0001                     ?_isdigit 0001  
 __size_ofi2_I2C_Master_Read 0026   __size_ofi2_I2C_Master_Wait 0012                    _eval_poly 28BA  
 __size_ofi2_I2C_Master_Stop 0008          __size_of_openbotlid 003E                    _hexpowers FD5E  
           ___lwdiv@quotient 0039               __size_of_delay 0044                    _curr_time FD66  
        __end_of_key_release 33C6               __size_of_floor 00F8               __size_of_ldexp 0114  
             __size_of_frexp 0090          __size_of_opentoplid 003E                  ??i2___lwdiv 0005  
                ??i2___lwmod 000C               __size_of_print 0040               __size_of_putch 000C  
        __end_of_read_eeprom 356C   __end_ofi2_I2C_Master_Start 35F4   __end_ofi2_I2C_Master_Write 35D4  
               delay@seconds 0035                  ??i2_lcdInst 0003               ___wmul@product 0039  
                   _LATDbits 000F8C                ?_write_eeprom 0035                  ??i2_isdigit 0001  
                   i2u435_40 3456                     _PIR2bits 000FA1                     i2u760_47 354A  
                   i2u761_47 2FA2                     i2u762_47 2FAA                     i2u763_47 2FCA  
                   i2u764_47 2FD2                     i2u765_47 30CA                     i2u766_47 3308  
                   i2u758_47 32CA                     i2u767_47 3318                     i2u759_47 32DC  
                _closebotlid 3270             __CFG_WDTPS$32768 000000                    _time_diff 1BA6  
                 ?_lcdNibble 0001                  _closetoplid 3232                   print@line1 0143  
                 print@line2 0145               time_diff@time1 00DE               time_diff@time2 00E0  
                 _ADCON0bits 000FC2                    main@i_782 014B                    main@i_783 014D  
                  main@i_784 014F            ___wmul@multiplier 0035                     i2___wmul 345E  
              lcdNibble@data 0036                   printf@flag 013F                lcdNibble@temp 0035  
                 printf@prec 013C                   ?_eval_poly 0095                     i2delay@i 0004  
                   i2_printf 13AA          I2C_Master_Read@temp 0037         __end_of_standby_mode 28BA  
           __size_ofi2_delay 0044             __size_ofi2_print 003C               ??_write_eeprom 0038  
           __size_ofi2_putch 000C                    frexp@eptr 0038                   _EECON1bits 000FA6  
                   __Hrparam 0000              ??i2_update_time 0006                     __Lrparam 0000  
              ??_update_time 003A           __CFG_BOREN$SBORDIS 000000                   ?_time_diff 00DE  
              ?i2_opentoplid 0001             __size_of___awdiv 0084             __size_of_dec2hex 0112  
           __size_of___ftadd 0268             __size_of___ftdiv 0104             __size_of___ftneg 0024  
      i2___wmul@multiplicand 0003             __size_of___lldiv 0082                     ___altoft 2A40  
           __size_of___ftmul 012C             __size_of___ftsub 004C             __size_of___fttol 0144  
           __size_of___lwdiv 0052             __size_of___lwmod 0042               readADC@channel 0036  
                   ___awtoft 3366                     ___ftpack 2992                     ___lltoft 2DE0  
         i2I2C_Master_Read@a 0002                     dec2hex@i 00D8             __size_of_lcdInst 000C  
         read_eeprom@address 0035                  _key_release 339E                     _exp$1580 00B7  
            _I2C_Master_Init 2E3C             __size_of_readADC 0024              _I2C_Master_Read 33EC  
           __size_of_initLCD 0046              _I2C_Master_Wait 356C              _I2C_Master_Stop 35D4  
               ??_keypressed 0025             __size_of_isdigit 001E                  _read_eeprom 3556  
            ___lwdiv@divisor 0037              ___lwdiv@counter 003B                     __ptext10 2AD6  
                   __ptext11 1F18                     __ptext20 3366                     __ptext12 2B66  
                   __ptext21 2DE0                     __ptext13 2A40                     __ptext30 356C  
                   __ptext22 2992                     __ptext14 28BA                     __ptext31 3556  
                   __ptext23 2BF6                     __ptext15 2198                     __ptext40 31B6  
                   __ptext32 34A8                     __ptext24 27D4                     __ptext16 2FD8  
                   __ptext41 31F4                     __ptext33 3176                     __ptext25 2CFC  
                   __ptext17 1724                     __ptext50 2E3C                     __ptext42 3526  
                   __ptext34 0F6A                     __ptext26 35C0                     __ptext18 3484  
                   __ptext51 2C7A                     __ptext43 339E                     __ptext35 3590  
                   __ptext27 35D4                     __ptext19 24EA                     __ptext60 13AA  
                   __ptext44 3024                     __ptext36 34EA                     __ptext28 35DC  
                   __ptext61 35A8                     __ptext53 2D6E                     __ptext45 359C  
                   __ptext37 3412                     __ptext29 33EC                     __ptext70 30AE  
                   __ptext62 3508                     __ptext54 35CA                     __ptext46 2F3C  
                   __ptext38 30F2                     __ptext71 32EC                     __ptext63 345E  
                   __ptext55 35E4                     __ptext47 306A                     __ptext39 2E98  
                   __ptext64 3134                     __ptext56 35EC                     __ptext48 3232  
                   __ptext65 2EEA                     __ptext57 3438                     __ptext49 3270  
                   __ptext66 32AE                     __ptext58 357E                     __ptext67 353E  
                   __ptext59 332A                     __ptext68 35B4                     __ptext69 2F8A  
                   _end_time 011C                     _lcdclear 3526                     _pow$1578 00C3  
                   _pow$1579 00C6               i2_isdigit$1143 0002                __size_of_main 0F58  
              __size_of_wait 0006                 ??_openbotlid 0035            i2update_time@time 0004  
             ??i2_opentoplid 0001                 ??_opentoplid 0035                ??i2_lcdNibble 0001  
      __end_ofi2_closebotlid 332A                  ??_lcdNibble 0035           __end_of_keypressed 27D4  
                   int$flags 004B                time_diff@min1 00E8                time_diff@min2 00EA  
                  printf@idx 0137                    printf@len 013A                     _totalbot 0102  
                  printf@val 013D          __end_of_update_time 2D6E                     exp@coeff FD6D  
                   log@coeff FD8B                    putch@data 0037     __end_of_I2C_Master_Start 35E4  
   __end_of_I2C_Master_Write 35CA                   _INTCONbits 000FF2                  ??_eval_poly 0047  
                   isdigit@c 0037           __end_of_openbotlid 3232                     intlevel2 0000  
         __end_of_opentoplid 31F4             ___lwmod@dividend 003C             ___lldiv@dividend 0035  
             i2delay@seconds 0001                 time_diff@hr1 00E4                 time_diff@hr2 00E6  
                ??_time_diff 00E2                     printf@ap 0138                     printf@cp 0135  
    __end_of_I2C_Master_Init 2E98      __end_of_I2C_Master_Read 3412      __end_of_I2C_Master_Wait 357E  
    __end_of_I2C_Master_Stop 35DC                  lcdInst@data 0037          __end_ofi2_lcdNibble 2FD8  
       __end_of_write_eeprom 33EC        __size_of_standby_mode 00E6             ___lldiv@quotient 003D  
          I2C_Master_Write@d 0036              ___lwmod@divisor 003E              ___lwmod@counter 0040  
        write_eeprom@address 0035                 _dec2hex$1576 00D0                 _dec2hex$1577 00D3  
